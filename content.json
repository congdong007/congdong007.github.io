{"meta":{"title":"congdong007","subtitle":"A technology-focused organization","description":"The main programming languages covered are: Python、Typescript、Go、C/C++、asm、Bash","author":"Dong Cong","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-10-16T16:11:55.341Z","updated":"2023-10-16T16:11:55.341Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-10-15T00:30:44.000Z","updated":"2023-10-16T14:06:43.380Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"How to compile asm to execute under Linux","slug":"nasmCompile","date":"2011-03-02T16:31:25.000Z","updated":"2023-10-16T15:42:40.515Z","comments":true,"path":"2011/03/02/nasmCompile/","link":"","permalink":"http://example.com/2011/03/02/nasmCompile/","excerpt":"","text":"Here is code snippet to show how to compile asm to execute under Linux: shellx.asm: 12345678910111213section .textglobal _start _start: mov edx,len mov ecx,msg mov ebx,1 mov eax,4 int 0x80 mov eax,1 int 0x80 section .datamsg db &#x27;Hello world&#x27;,0xa len equ $ - msg let’s start First step: 1vagrant@kali:~/Desktop/cdasm$ nasm -f elf64 shellx.asm Next step: 1vagrant@kali:~/Desktop/cdasm$ ld -s -o shellx shellx.o Execute : 1vagrant@kali:~/Desktop/cdasm$ ./shellx then output : 1Hello world","categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"}],"tags":[{"name":"nasm","slug":"nasm","permalink":"http://example.com/tags/nasm/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"Compilation of Python Code Snippets for Hashing","slug":"pythonHash","date":"2011-01-16T15:47:24.000Z","updated":"2023-10-16T14:58:41.489Z","comments":true,"path":"2011/01/16/pythonHash/","link":"","permalink":"http://example.com/2011/01/16/pythonHash/","excerpt":"","text":"Performing relevant hashing operations is an essential skill in penetration testing. Here is a compilation of code snippets for common hash implementations in Python. md5 : 123456import hashlibmystring = input(&#x27;Enter String to hash: &#x27;)# Assumes the default UTF-8hash_object = hashlib.md5(mystring.encode())print(hash_object.hexdigest()) sha1: 12345import hashlibhash_object = hashlib.sha1(b&#x27;Hello World&#x27;)hex_dig = hash_object.hexdigest()print(hex_dig) SHA256: 123456import hashlibhash_object = hashlib.sha256(b&#x27;Hello World&#x27;)hex_dig = hash_object.hexdigest()print(hex_dig) sha512: 12345import hashlibinput = &#x27;test&#x27;hash = hashlib.sha512( str( input ).encode(&quot;utf-8&quot;) ).hexdigest()print(hash) DSA: 12345import hashlibhash_object = hashlib.new(&#x27;DSA&#x27;)hash_object.update(b&#x27;Hello World&#x27;)print(hash_object.hexdigest())","categories":[{"name":"Penetration Tester","slug":"Penetration-Tester","permalink":"http://example.com/categories/Penetration-Tester/"}],"tags":[{"name":"hash","slug":"hash","permalink":"http://example.com/tags/hash/"}]},{"title":"In Qt, how to transmit custom data using QAction::setData","slug":"QtSetData","date":"2010-05-02T03:16:09.000Z","updated":"2023-10-16T14:15:57.813Z","comments":true,"path":"2010/05/01/QtSetData/","link":"","permalink":"http://example.com/2010/05/01/QtSetData/","excerpt":"","text":"Recently, in a project, there was a need to transmit custom data using QAction::setData. I’ve searched online for a lot of information, but it’s all a bit vague, and none of them hit the mark. Some even provide solutions that completely contradict Qt’s principles. Below is an example code I wrote: Custom data:Here, taking a custom class as an example, the code is as follows: 123456789101112131415161718192021//.h#ifndef QNEWITEM_H#define QNEWITEM_H#include &lt;QObject&gt;class QNewItem : public QObject&#123;public: QNewItem(QObject *parent = 0); ~QNewItem(); bool setUserInfo(QString&amp; strName,qint16&amp; nAge);private: QString m_strName; qint16 m_nAge;&#125;;#endif // QNEWITEM_H 123456789101112131415161718192021222324252627282930//.cpp#include &quot;qnewitem.h&quot;QNewItem::QNewItem(QObject *parent): QObject(parent)&#123;&#125;QNewItem::~QNewItem()&#123;&#125;bool QNewItem::setUserInfo( QString&amp; strName,qint16&amp; nAge )&#123; bool bRet = false; do &#123; if( strName.isEmpty() || nAge &gt;200 &amp;&amp; nAge&lt;0 ) break; m_strName = strName; m_nAge = nAge; bRet = true; &#125; while (false); return bRet;&#125; At the beginning of the calling CPP file, you must declare it like this: 123#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*) There’s not much else to say; when you look at the code, you’ll understand everything. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*)customDefineDemo::customDefineDemo(QWidget *parent, Qt::WFlags flags): QMainWindow(parent, flags)&#123; ui.setupUi(this); connect(ui.pushButton , SIGNAL(clicked()),this,SLOT(onBtnClick()));&#125;customDefineDemo::~customDefineDemo()&#123;&#125;void customDefineDemo::onBtnClick()&#123; QMenu* pMenu = new QMenu(); QNewItem* pNewItem = new QNewItem(); qint16 nAge = 34; QVariant qv; do &#123; QAction* pPortraitView = new QAction(tr(&quot;New&quot;), this); QAction* pAddGroup = new QAction(tr(&quot;Open&quot;), this); QAction* pDeleteGroup = new QAction(tr(&quot;Save&quot;), this); pNewItem-&gt;setUserInfo(tr(&quot;Eric&quot;),nAge); pPortraitView-&gt;setData( QVariant::fromValue(pNewItem) ) ; connect(pPortraitView,SIGNAL(triggered()),this,SLOT(triggeredMenuSendMsgContact())); pMenu-&gt;addAction(pPortraitView); pMenu-&gt;addAction(pAddGroup); pMenu-&gt;addAction(pDeleteGroup); pMenu-&gt;exec(QCursor::pos()); &#125; while (false); if( pMenu != nullptr ) &#123; delete pMenu; pMenu = nullptr; &#125;&#125;void customDefineDemo::triggeredMenuSendMsgContact()&#123; QAction* pSendMsg= NULL; QNewItem* pObj = NULL; do &#123; pSendMsg=qobject_cast&lt;QAction*&gt;(sender()); pObj = pSendMsg-&gt;data().value&lt;QNewItem*&gt;(); &#125; while (false); if( pObj != nullptr ) &#123; delete pObj; pObj = nullptr; &#125;&#125;","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"}]},{"title":"The confusing floating point problem","slug":"floatData","date":"2010-03-15T02:44:22.000Z","updated":"2023-10-16T14:14:30.292Z","comments":true,"path":"2010/03/14/floatData/","link":"","permalink":"http://example.com/2010/03/14/floatData/","excerpt":"","text":"Recently, I encountered an issue with floating-point numbers. code: 1fld dword ptr ds:[esi+1E4] and 1esi+1E4 = 02FCE9D4 The following is its memory: 102FCE9D4 00 C0 2B 45 00 C0 2B 45 00 00 00 00 00 00 00 00 .?E.?E........ After execution this code: 1fld dword ptr ds:[esi+1E4] watches: 1ST0 = 2748.00000000000. I would like to know how ST0 equals 2748? In the end, it’s all about the representation of floating-point numbers. According to the IEEE standard, the first bit is the sign bit, the next 8 bits represent the exponent, and the remaining 23 bits are the mantissa. Considering that it’s little-endian storage, the value of the number 00 C0 2B 45 is 452BC000, which is: 10100 0101 0010 1011 1100 0000 0000 0000 The first bit is 0, indicating it’s a positive number.The next 8 bits, which is 10001010, 8A, in decimal, is 138. 138 - 127 &#x3D; 11, indicating the exponent is 11 bits.And the remaining 23 bits have the value: 1010 1011 1100 0000 0000 0000 The leading bit, with the omitted 1, has a value of: 11010 1011 1100 0000 0000 0000 Above 11 bits for the exponent indicate that the position of the decimal point is: 11010 1011 1100 . 0000 0000 0000 Converting to hexadecimal, it’s ABC.000. Converting to decimal, it’s 2748.00000000.","categories":[{"name":"Others","slug":"Others","permalink":"http://example.com/categories/Others/"}],"tags":[{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"float","slug":"float","permalink":"http://example.com/tags/float/"},{"name":"binary","slug":"binary","permalink":"http://example.com/tags/binary/"}]},{"title":"Example program for code decompilation","slug":"codedecompilation","date":"2009-11-05T03:36:35.000Z","updated":"2023-10-16T14:15:04.251Z","comments":true,"path":"2009/11/04/codedecompilation/","link":"","permalink":"http://example.com/2009/11/04/codedecompilation/","excerpt":"","text":"Some time ago, a friend asked me to help reverse engineer something, extract its code, save it as an assembly file, and compile and run it in VC (Visual C++). asm file : 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 .686p .model flat,c option casemap : none extern sprintf:proc extern strcat:proc .data ___security_cookie dd 0BB40E64Eh a02x_0 db &quot;%02X&quot; .code public sub_40B444 sub_40B444 proc near ; CODE XREF: sub_40CCEA+A4p;Source = byte ptr -14h;var_4 = dword ptr -4;arg_0 = dword ptr 8;arg_4 = dword ptr 0Ch;arg_8 = dword ptr 10h push ebp mov ebp, esp sub esp, 14h mov eax, dword ptr ___security_cookie ; &quot;N鍬? xor eax, ebp mov [ebp-4], eax push ebx mov ebx, [ebp+8] push esi mov esi, [ebp+10h] push edi xor edi, edi cmp [ebp+0Ch], edi mov byte ptr [esi], 0 jbe short loc_40B48Eloc_40B467: ; CODE XREF: sub_40B444+48j movzx eax, byte ptr [ebx+edi] push eax lea eax, [ebp-14h] push offset a02x_0 ; &quot;%02X&quot; push eax ; Dest call sprintf lea eax, [ebp-14h] push eax ; Source push esi ; Dest call strcat add esp, 14h inc edi cmp edi, [ebp+0Ch] jb short loc_40B467loc_40B48E: ; CODE XREF: sub_40B444+21j mov ecx, [ebp-4] pop edi pop esi xor ecx, ebp leave retnsub_40B444 endpend The sample code is as follows: 123456789101112131415161718192021222324#include &quot;stdafx.h&quot;#include &lt;Windows.h&gt;extern &quot;C&quot; &#123; char* sub_40B444(char*,int,char*);&#125;int _tmain(int argc, _TCHAR* argv[])&#123; char* pszBuf = new char[1024]; memset( pszBuf , 0 , 1024 ); strcpy_s( pszBuf , 1024 , &quot;des:&quot; ); sub_40B444( &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; , strlen(&quot;你总是说我在，这样孤单时候，才能想起与你联络&quot;) , pszBuf ); printf_s( &quot;format string : %s\\n&quot; , &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; ); printf_s( &quot;format string : %s\\n&quot; , pszBuf ); if( pszBuf != NULL ) &#123; delete[]pszBuf; pszBuf = NULL; &#125; return 0;&#125;","categories":[{"name":"Asm , C/C++","slug":"Asm-C-C","permalink":"http://example.com/categories/Asm-C-C/"}],"tags":[{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"}]},{"title":"NDIS6 how to drop packets","slug":"ndis6DropPackage","date":"2009-07-15T02:29:18.000Z","updated":"2023-10-16T15:17:44.235Z","comments":true,"path":"2009/07/14/ndis6DropPackage/","link":"","permalink":"http://example.com/2009/07/14/ndis6DropPackage/","excerpt":"","text":"In ndis6 how to drop packets? in FilterSendNetBufferLists: 1234567891011121314FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);//DEBUGP(DL_TRACE, (&quot;&lt;===SendNetBufferList [CheckPacket] drop this packet. \\n&quot;)); CurrNbl = NetBufferLists;while (CurrNbl)&#123; NET_BUFFER_LIST_STATUS(CurrNbl) = NDIS_STATUS_MEDIA_DISCONNECTED ; CurrNbl = NET_BUFFER_LIST_NEXT_NBL(CurrNbl);&#125;NdisFSendNetBufferListsComplete(pFilter-&gt;FilterHandle,NetBufferLists,DispatchLevel ? NDIS_SEND_COMPLETE_FLAGS_DISPATCH_LEVEL : 0);break; in FilterReceiveNetBufferLists: 12345678910111213FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);if (NDIS_TEST_RECEIVE_CAN_PEND(ReceiveFlags))&#123; ReturnFlags = 0; if (NDIS_TEST_RECEIVE_AT_DISPATCH_LEVEL(ReceiveFlags)) &#123; NDIS_SET_RETURN_FLAG(ReturnFlags, NDIS_RETURN_FLAGS_DISPATCH_LEVEL); &#125; NdisFReturnNetBufferLists(pFilter-&gt;FilterHandle, NetBufferLists, ReturnFlags);&#125;break;","categories":[{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/categories/Kernel/"}],"tags":[{"name":"ndis6","slug":"ndis6","permalink":"http://example.com/tags/ndis6/"},{"name":"kernel","slug":"kernel","permalink":"http://example.com/tags/kernel/"},{"name":"firewall","slug":"firewall","permalink":"http://example.com/tags/firewall/"}]},{"title":"In a VC (Visual C++) project, how to compile with an assembly language file","slug":"compileAssemblyFile","date":"2009-01-04T04:29:12.000Z","updated":"2023-10-16T14:14:45.819Z","comments":true,"path":"2009/01/03/compileAssemblyFile/","link":"","permalink":"http://example.com/2009/01/03/compileAssemblyFile/","excerpt":"","text":"It include four steps: Add the assembly language file to the project. In the Solution Explorer window, right-click the Visual C++ project, choose “Build Customizations…”, and a dialog box labeled “Visual C++ Build Customization Files” will pop up. Check the “masm” option and click OK. At this point, in the Configuration Property, you can see “Microsoft Macro Assembler.“ Right-click the assembly language file, select “Properties,” go to “Custom Build Step,” and then “General.” In the “Command Line“ field on the right, input: 1ml.exe /c /D&quot;X86&quot; /D&quot;DEBUG&quot; /Fo&quot;$(IntDir)/$(InputName).obj&quot; $(InputFileName) In the “Outputs“ field, input: 1$(IntDir)/$(InputName).obj Don’t forget to add the path to ml.exe to the environment variable “PATH.”","categories":[{"name":"Asm, C/C++","slug":"Asm-C-C","permalink":"http://example.com/categories/Asm-C-C/"}],"tags":[{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"}]}],"categories":[{"name":"Asm","slug":"Asm","permalink":"http://example.com/categories/Asm/"},{"name":"Penetration Tester","slug":"Penetration-Tester","permalink":"http://example.com/categories/Penetration-Tester/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"},{"name":"Others","slug":"Others","permalink":"http://example.com/categories/Others/"},{"name":"Asm , C/C++","slug":"Asm-C-C","permalink":"http://example.com/categories/Asm-C-C/"},{"name":"Kernel","slug":"Kernel","permalink":"http://example.com/categories/Kernel/"},{"name":"Asm, C/C++","slug":"Asm-C-C","permalink":"http://example.com/categories/Asm-C-C/"}],"tags":[{"name":"nasm","slug":"nasm","permalink":"http://example.com/tags/nasm/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"hash","slug":"hash","permalink":"http://example.com/tags/hash/"},{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"},{"name":"asm","slug":"asm","permalink":"http://example.com/tags/asm/"},{"name":"float","slug":"float","permalink":"http://example.com/tags/float/"},{"name":"binary","slug":"binary","permalink":"http://example.com/tags/binary/"},{"name":"inline","slug":"inline","permalink":"http://example.com/tags/inline/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/tags/C-C/"},{"name":"ndis6","slug":"ndis6","permalink":"http://example.com/tags/ndis6/"},{"name":"kernel","slug":"kernel","permalink":"http://example.com/tags/kernel/"},{"name":"firewall","slug":"firewall","permalink":"http://example.com/tags/firewall/"}]}