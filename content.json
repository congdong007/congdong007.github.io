{"meta":{"title":"congdong007","subtitle":"A technology-focused organization","description":"The main programming languages covered are: Python、Typescript、Go、C/C++、asm、Bash","author":"Dong Cong","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-10-15T03:26:56.591Z","updated":"2023-10-15T03:26:56.591Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-10-15T00:30:44.000Z","updated":"2023-10-15T00:31:14.374Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"About information_schema in MySQL","slug":"information-schema","date":"2010-10-15T16:47:16.000Z","updated":"2023-10-15T22:14:12.109Z","comments":true,"path":"2010/10/15/information-schema/","link":"","permalink":"http://example.com/2010/10/15/information-schema/","excerpt":"","text":"The “information_schema“ is a system database in MySQL that contains metadata information about databases, tables, columns, indexes, users, permissions, and more within the MySQL server. It serves as an interface for querying metadata information in MySQL. This information is stored in tabular form within tables in the “information_schema” database, and users can retrieve metadata information by using SQL statements to query these tables. Here are some common tables in the ‘information_schema’ database: SCHEMATA: Stores information about all databases, including database names, character sets, etc. TABLES: Stores information about all tables, including table names, table types, engines, etc. COLUMNS: Stores information about all columns, including column names, column data types, column constraints, etc. STATISTICS: Stores information about all indexes, including index names, index types, the table where the index is located, index columns, etc. USER_PRIVILEGES: Stores information about user privileges, including user accounts, permissions, etc. By querying the tables in the information_schema database, you can obtain information about various aspects of databases, tables, columns, indexes, users, and permissions. This is very helpful for database management and maintenance. Next, let’s take a look at an example of finding key information through the information_schema database: Query information about the current user:1SELECT current_user(); Query information about the user for the current session:1SELECT session_user(); Get the path of the database:1SELECT @@datadir; Get the installation path of MySQL:1select @@basedir; Retrieve information about the operating system version:1SELECT @@version_compile_os;","categories":[],"tags":[]},{"title":"In Qt, how to transmit custom data using QAction::setData","slug":"QtSetData","date":"2010-05-02T03:16:09.000Z","updated":"2023-10-15T03:29:39.329Z","comments":true,"path":"2010/05/01/QtSetData/","link":"","permalink":"http://example.com/2010/05/01/QtSetData/","excerpt":"","text":"Recently, in a project, there was a need to transmit custom data using QAction::setData. I’ve searched online for a lot of information, but it’s all a bit vague, and none of them hit the mark. Some even provide solutions that completely contradict Qt’s principles. Below is an example code I wrote: Custom data:Here, taking a custom class as an example, the code is as follows: 123456789101112131415161718192021//.h#ifndef QNEWITEM_H#define QNEWITEM_H#include &lt;QObject&gt;class QNewItem : public QObject&#123;public: QNewItem(QObject *parent = 0); ~QNewItem(); bool setUserInfo(QString&amp; strName,qint16&amp; nAge);private: QString m_strName; qint16 m_nAge;&#125;;#endif // QNEWITEM_H 123456789101112131415161718192021222324252627282930//.cpp#include &quot;qnewitem.h&quot;QNewItem::QNewItem(QObject *parent): QObject(parent)&#123;&#125;QNewItem::~QNewItem()&#123;&#125;bool QNewItem::setUserInfo( QString&amp; strName,qint16&amp; nAge )&#123; bool bRet = false; do &#123; if( strName.isEmpty() || nAge &gt;200 &amp;&amp; nAge&lt;0 ) break; m_strName = strName; m_nAge = nAge; bRet = true; &#125; while (false); return bRet;&#125; At the beginning of the calling CPP file, you must declare it like this: 123#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*) There’s not much else to say; when you look at the code, you’ll understand everything. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &quot;qnewitem.h&quot;Q_DECLARE_METATYPE(QNewItem*)customDefineDemo::customDefineDemo(QWidget *parent, Qt::WFlags flags): QMainWindow(parent, flags)&#123; ui.setupUi(this); connect(ui.pushButton , SIGNAL(clicked()),this,SLOT(onBtnClick()));&#125;customDefineDemo::~customDefineDemo()&#123;&#125;void customDefineDemo::onBtnClick()&#123; QMenu* pMenu = new QMenu(); QNewItem* pNewItem = new QNewItem(); qint16 nAge = 34; QVariant qv; do &#123; QAction* pPortraitView = new QAction(tr(&quot;New&quot;), this); QAction* pAddGroup = new QAction(tr(&quot;Open&quot;), this); QAction* pDeleteGroup = new QAction(tr(&quot;Save&quot;), this); pNewItem-&gt;setUserInfo(tr(&quot;Eric&quot;),nAge); pPortraitView-&gt;setData( QVariant::fromValue(pNewItem) ) ; connect(pPortraitView,SIGNAL(triggered()),this,SLOT(triggeredMenuSendMsgContact())); pMenu-&gt;addAction(pPortraitView); pMenu-&gt;addAction(pAddGroup); pMenu-&gt;addAction(pDeleteGroup); pMenu-&gt;exec(QCursor::pos()); &#125; while (false); if( pMenu != nullptr ) &#123; delete pMenu; pMenu = nullptr; &#125;&#125;void customDefineDemo::triggeredMenuSendMsgContact()&#123; QAction* pSendMsg= NULL; QNewItem* pObj = NULL; do &#123; pSendMsg=qobject_cast&lt;QAction*&gt;(sender()); pObj = pSendMsg-&gt;data().value&lt;QNewItem*&gt;(); &#125; while (false); if( pObj != nullptr ) &#123; delete pObj; pObj = nullptr; &#125;&#125;","categories":[],"tags":[]},{"title":"The confusing floating point problem","slug":"floatData","date":"2010-03-15T02:44:22.000Z","updated":"2023-10-15T03:15:38.910Z","comments":true,"path":"2010/03/14/floatData/","link":"","permalink":"http://example.com/2010/03/14/floatData/","excerpt":"","text":"Recently, I encountered an issue with floating-point numbers. code: 1fld dword ptr ds:[esi+1E4] and 1esi+1E4 = 02FCE9D4 The following is its memory: 102FCE9D4 00 C0 2B 45 00 C0 2B 45 00 00 00 00 00 00 00 00 .?E.?E........ After execution this code: 1fld dword ptr ds:[esi+1E4] watches: 1ST0 = 2748.00000000000. I would like to know how ST0 equals 2748? In the end, it’s all about the representation of floating-point numbers. According to the IEEE standard, the first bit is the sign bit, the next 8 bits represent the exponent, and the remaining 23 bits are the mantissa. Considering that it’s little-endian storage, the value of the number 00 C0 2B 45 is 452BC000, which is: 10100 0101 0010 1011 1100 0000 0000 0000 The first bit is 0, indicating it’s a positive number.The next 8 bits, which is 10001010, 8A, in decimal, is 138. 138 - 127 &#x3D; 11, indicating the exponent is 11 bits.And the remaining 23 bits have the value: 1010 1011 1100 0000 0000 0000 The leading bit, with the omitted 1, has a value of: 11010 1011 1100 0000 0000 0000 Above 11 bits for the exponent indicate that the position of the decimal point is: 11010 1011 1100 . 0000 0000 0000 Converting to hexadecimal, it’s ABC.000. Converting to decimal, it’s 2748.00000000.","categories":[],"tags":[]},{"title":"Example program for code decompilation","slug":"codedecompilation","date":"2009-11-05T03:36:35.000Z","updated":"2023-10-15T02:43:22.534Z","comments":true,"path":"2009/11/04/codedecompilation/","link":"","permalink":"http://example.com/2009/11/04/codedecompilation/","excerpt":"","text":"Some time ago, a friend asked me to help reverse engineer something, extract its code, save it as an assembly file, and compile and run it in VC (Visual C++). asm file : 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 .686p .model flat,c option casemap : none extern sprintf:proc extern strcat:proc .data ___security_cookie dd 0BB40E64Eh a02x_0 db &quot;%02X&quot; .code public sub_40B444 sub_40B444 proc near ; CODE XREF: sub_40CCEA+A4p;Source = byte ptr -14h;var_4 = dword ptr -4;arg_0 = dword ptr 8;arg_4 = dword ptr 0Ch;arg_8 = dword ptr 10h push ebp mov ebp, esp sub esp, 14h mov eax, dword ptr ___security_cookie ; &quot;N鍬? xor eax, ebp mov [ebp-4], eax push ebx mov ebx, [ebp+8] push esi mov esi, [ebp+10h] push edi xor edi, edi cmp [ebp+0Ch], edi mov byte ptr [esi], 0 jbe short loc_40B48Eloc_40B467: ; CODE XREF: sub_40B444+48j movzx eax, byte ptr [ebx+edi] push eax lea eax, [ebp-14h] push offset a02x_0 ; &quot;%02X&quot; push eax ; Dest call sprintf lea eax, [ebp-14h] push eax ; Source push esi ; Dest call strcat add esp, 14h inc edi cmp edi, [ebp+0Ch] jb short loc_40B467loc_40B48E: ; CODE XREF: sub_40B444+21j mov ecx, [ebp-4] pop edi pop esi xor ecx, ebp leave retnsub_40B444 endpend The sample code is as follows: 123456789101112131415161718192021222324#include &quot;stdafx.h&quot;#include &lt;Windows.h&gt;extern &quot;C&quot; &#123; char* sub_40B444(char*,int,char*);&#125;int _tmain(int argc, _TCHAR* argv[])&#123; char* pszBuf = new char[1024]; memset( pszBuf , 0 , 1024 ); strcpy_s( pszBuf , 1024 , &quot;des:&quot; ); sub_40B444( &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; , strlen(&quot;你总是说我在，这样孤单时候，才能想起与你联络&quot;) , pszBuf ); printf_s( &quot;format string : %s\\n&quot; , &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; ); printf_s( &quot;format string : %s\\n&quot; , pszBuf ); if( pszBuf != NULL ) &#123; delete[]pszBuf; pszBuf = NULL; &#125; return 0;&#125;","categories":[],"tags":[]},{"title":"NDIS6 how to drop packets","slug":"ndis6DropPackage","date":"2009-07-15T02:29:18.000Z","updated":"2023-10-15T03:23:52.959Z","comments":true,"path":"2009/07/14/ndis6DropPackage/","link":"","permalink":"http://example.com/2009/07/14/ndis6DropPackage/","excerpt":"","text":"In ndis6 how to drop packets? in FilterSendNetBufferLists: 1234567891011121314FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);//DEBUGP(DL_TRACE, (&quot;&lt;===SendNetBufferList [CheckPacket] drop this packet. \\n&quot;)); CurrNbl = NetBufferLists;while (CurrNbl)&#123; NET_BUFFER_LIST_STATUS(CurrNbl) = NDIS_STATUS_MEDIA_DISCONNECTED ; CurrNbl = NET_BUFFER_LIST_NEXT_NBL(CurrNbl);&#125;NdisFSendNetBufferListsComplete(pFilter-&gt;FilterHandle,NetBufferLists,DispatchLevel ? NDIS_SEND_COMPLETE_FLAGS_DISPATCH_LEVEL : 0);break; in FilterReceiveNetBufferLists: 12345678910111213FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);if (NDIS_TEST_RECEIVE_CAN_PEND(ReceiveFlags))&#123; ReturnFlags = 0; if (NDIS_TEST_RECEIVE_AT_DISPATCH_LEVEL(ReceiveFlags)) &#123; NDIS_SET_RETURN_FLAG(ReturnFlags, NDIS_RETURN_FLAGS_DISPATCH_LEVEL); &#125; NdisFReturnNetBufferLists(pFilter-&gt;FilterHandle, NetBufferLists, ReturnFlags);&#125;break;","categories":[],"tags":[]},{"title":"In a VC (Visual C++) project, how to compile with an assembly language file","slug":"compileAssemblyFile","date":"2009-01-04T04:29:12.000Z","updated":"2023-10-15T01:49:35.183Z","comments":true,"path":"2009/01/03/compileAssemblyFile/","link":"","permalink":"http://example.com/2009/01/03/compileAssemblyFile/","excerpt":"","text":"It include four steps: Add the assembly language file to the project. In the Solution Explorer window, right-click the Visual C++ project, choose “Build Customizations…”, and a dialog box labeled “Visual C++ Build Customization Files” will pop up. Check the “masm” option and click OK. At this point, in the Configuration Property, you can see “Microsoft Macro Assembler.“ Right-click the assembly language file, select “Properties,” go to “Custom Build Step,” and then “General.” In the “Command Line“ field on the right, input: 1ml.exe /c /D&quot;X86&quot; /D&quot;DEBUG&quot; /Fo&quot;$(IntDir)/$(InputName).obj&quot; $(InputFileName) In the “Outputs“ field, input: 1$(IntDir)/$(InputName).obj Don’t forget to add the path to ml.exe to the environment variable “PATH.”","categories":[],"tags":[]}],"categories":[],"tags":[]}