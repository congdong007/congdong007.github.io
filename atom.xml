<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>congdong007</title>
  
  <subtitle>A technology-focused organization</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-17T03:30:34.565Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dong Cong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Closure and Anonymous Function in Go</title>
    <link href="http://example.com/2018/11/28/goAnonymousFunctionClosure/"/>
    <id>http://example.com/2018/11/28/goAnonymousFunctionClosure/</id>
    <published>2018-11-29T02:21:24.000Z</published>
    <updated>2023-10-17T03:30:34.565Z</updated>
    
    <content type="html"><![CDATA[<p>In Go language, <strong><em>closures</em></strong> and <strong><em>anonymous functions</em></strong> are both forms of functions, but they have some important differences. Below, I will provide examples of the usage and differences between these two concepts:</p><ol><li><strong><em>Closure</em></strong> Example:<br>A <strong><em>closure</em></strong> refers to a function that captures one or more variables from its outer function scope and can be called outside of that function while still accessing these captured variables.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    outerVar := 10</span><br><span class="line"></span><br><span class="line">    // Closure function</span><br><span class="line">    closure := func() &#123;</span><br><span class="line">        fmt.Println(&quot;Outer variable outerVar:&quot;, outerVar)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Call the closure function</span><br><span class="line">    closure() // Output: Outer variable outerVar: 10</span><br><span class="line"></span><br><span class="line">    // Modify the outer variable</span><br><span class="line">    outerVar = 20</span><br><span class="line"></span><br><span class="line">    // Call the closure function again</span><br><span class="line">    closure() // Output: Outer variable outerVar: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example, <strong><em>closure</em></strong> is a closure that captures the outer variable outerVar and can access and modify that variable even outside the function.</p><ol start="2"><li><strong><em>Anonymous Function</em></strong> Example:</li></ol><p>An <strong><em>anonymous function</em></strong> is a function without a name; it can be directly assigned to a variable or passed as an argument to other functions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    // Define and call an anonymous function</span><br><span class="line">    result := func(x, y int) int &#123;</span><br><span class="line">        return x + y</span><br><span class="line">    &#125;(5, 3)</span><br><span class="line"></span><br><span class="line">    fmt.Println(&quot;Result of the anonymous function:&quot;, result) // Output: Result of the anonymous function: 8</span><br><span class="line"></span><br><span class="line">    // Assign an anonymous function to a variable</span><br><span class="line">    add := func(x, y int) int &#123;</span><br><span class="line">        return x + y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum := add(10, 20)</span><br><span class="line">    fmt.Println(&quot;Calling the anonymous function using a variable:&quot;, sum) // Output: Calling the anonymous function using a variable: 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example, we define an <strong><em>anonymous function</em></strong> and call it directly. We also assign another <strong><em>anonymous function</em></strong> to the add variable and use that variable to call the function.</p><p>To summarize the differences:</p><p>A <strong><em>closure</em></strong> is a function that captures external variables and can access and modify them outside of the function.<br>An <strong><em>anonymous function</em></strong> is a function without a name, which can be assigned to a variable or passed as an argument to other functions.<br>It’s important to note that while <strong><em>closures</em></strong> often involve <strong><em>anonymous functions</em></strong>, not all <strong><em>anonymous functions</em></strong> are <strong><em>closures</em></strong>. A <strong><em>closure</em></strong> is a specific type of <strong><em>anonymous function</em></strong> that captures external variables.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In Go language, &lt;strong&gt;&lt;em&gt;closures&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;anonymous functions&lt;/em&gt;&lt;/strong&gt; are both forms of functions, but the</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="Closure and Anonymous Function" scheme="http://example.com/categories/Go/Closure-and-Anonymous-Function/"/>
    
    
  </entry>
  
  <entry>
    <title>A Brief Summary of &quot;go func()&quot;</title>
    <link href="http://example.com/2018/11/16/goFunc/"/>
    <id>http://example.com/2018/11/16/goFunc/</id>
    <published>2018-11-17T04:00:34.000Z</published>
    <updated>2023-10-17T03:23:53.726Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>“go func()”</em></strong> is a way in the Go programming language to launch new concurrent goroutines. A goroutine is a lightweight thread in Go used for concurrent task execution. Using <strong><em>“go func()”</em></strong> allows you to create new concurrent execution flows in your program without the need to explicitly create threads or manage the complexity of thread management.</p><p>Here is a basic example and some key concepts of using <strong><em>“go func()”</em></strong>:</p><p>Basic Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    go func() &#123;</span><br><span class="line">        // Place the code you want to execute in a new concurrent goroutine here</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    // The main goroutine continues to execute other work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the example above, <strong><em>“go func()”</em></strong> starts a concurrent goroutine for an anonymous function, which will execute the code inside it. The main goroutine continues to execute other tasks, while the new concurrent goroutine runs in the background.</p><p>Key Concepts:</p><ol><li><p><strong><em>Anonymous Function</em></strong>: Anonymous functions are typically used to define <strong><em>“go func()”</em></strong> because there’s no need to name the concurrent goroutine. The code for the anonymous function can be enclosed in {} as needed.</p></li><li><p><strong><em>Concurrent Execution</em></strong>: Goroutines launched with <strong><em>“go func()”</em></strong> run concurrently in the background without blocking the main program’s execution. This allows you to execute multiple tasks simultaneously, improving program performance.</p></li><li><p><strong><em>Data Sharing</em></strong>: Concurrent goroutines can share data, but it’s important to handle shared data carefully to avoid race conditions and data races. You can use tools provided by the “sync” package to manage access to shared data.</p></li><li><p><strong><em>Goroutine Management</em></strong>: Go’s runtime system is responsible for creating, scheduling, and destroying goroutines. You don’t need to worry about the complexity of thread creation and destruction.</p></li><li><p><strong><em>Waiting for Goroutines to Complete</em></strong>: If you need to wait for concurrent goroutines to finish, you can use mechanisms like “sync.WaitGroup” or channels to implement waiting.</p></li></ol><p>Using <strong><em>“go func()”</em></strong> is a simple way to achieve concurrency in the Go programming language, allowing you to run tasks in parallel, such as handling concurrent requests, performing background tasks, or other work that needs to execute simultaneously. However, be cautious about handling concurrency issues and ensuring that shared data is synchronized and accessed correctly.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;“go func()”&lt;/em&gt;&lt;/strong&gt; is a way in the Go programming language to launch new concurrent goroutines. A goroutine is a light</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="go func()" scheme="http://example.com/categories/Go/go-func/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>A Simple Plugin System by Python</title>
    <link href="http://example.com/2011/10/22/SimplePluginSystemByPython/"/>
    <id>http://example.com/2011/10/22/SimplePluginSystemByPython/</id>
    <published>2011-10-22T20:41:33.000Z</published>
    <updated>2023-10-17T03:17:52.035Z</updated>
    
    <content type="html"><![CDATA[<p>Due to the requirements of my work, I needed to design an open software system, and immediately thought of the Python language. As a result, I designed a simple and easily extensible plugin system.</p><p>Here’s the code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#main.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import importlib</span><br><span class="line"></span><br><span class="line">class PluginManager:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.plugins = []</span><br><span class="line">        self.func_name = &quot;MyPlugin&quot;</span><br><span class="line"></span><br><span class="line">    def load_plugin(self, plugin_name):</span><br><span class="line">        try:</span><br><span class="line">            plugin_module = importlib.import_module(f&#x27;plugins.&#123;plugin_name&#125;&#x27;)</span><br><span class="line">            plugin_instance = getattr(plugin_module, self.func_name)()</span><br><span class="line">            self.plugins.append(plugin_instance)</span><br><span class="line">            print(f&quot;plugin &#123;plugin_name&#125; loaded.&quot;)</span><br><span class="line">        except ImportError:</span><br><span class="line">            print(f&quot;Load plugin &#123;plugin_name&#125; failed.&quot;)</span><br><span class="line"></span><br><span class="line">    def run_plugins(self):</span><br><span class="line">        for plugin in self.plugins:</span><br><span class="line">            plugin.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    manager = PluginManager()</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        print(&quot;1. Add Plugin&quot;)</span><br><span class="line">        print(&quot;2. Run Plugin&quot;)</span><br><span class="line">        print(&quot;3. Quit&quot;)</span><br><span class="line">        choice = input(&quot;Your Select: &quot;)</span><br><span class="line"></span><br><span class="line">        if choice == &quot;1&quot;:</span><br><span class="line">            plugin_name = input(&quot;Please input the name of plugin: &quot;)</span><br><span class="line">            manager.load_plugin(plugin_name)</span><br><span class="line"></span><br><span class="line">        elif choice == &quot;2&quot;:</span><br><span class="line">            manager.run_plugins()</span><br><span class="line"></span><br><span class="line">        elif choice == &quot;3&quot;:</span><br><span class="line">            break</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Then, you create a directory named ‘plugins.’ In this directory, you can add your plugin, which must define a class named <strong><em>‘MyPlugin’</em></strong> and must have a function named <strong><em>‘run’</em></strong>. Here is the simple code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#my_plugin</span><br><span class="line"></span><br><span class="line">class MyPlugin:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;MyPlugin is running&quot;)</span><br></pre></td></tr></table></figure><p>The following is the running process:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. Add Plugin</span><br><span class="line">2. Run Plugin</span><br><span class="line">3. Quit</span><br><span class="line">Your Select: 1</span><br><span class="line">Please input the name of plugin: my_plugin</span><br><span class="line">plugin my_plugin loaded.</span><br><span class="line">1. Add Plugin</span><br><span class="line">2. Run Plugin</span><br><span class="line">3. Quit</span><br><span class="line">Your Select: 2</span><br><span class="line">MyPlugin is running</span><br><span class="line">1. Add Plugin</span><br><span class="line">2. Run Plugin</span><br><span class="line">3. Quit</span><br><span class="line">Your Select: 3</span><br><span class="line">PS C:\Users\xxx\Desktop\yyy\plugin-system&gt;</span><br></pre></td></tr></table></figure><p>You can use this model to design a big and an opened software system.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Due to the requirements of my work, I needed to design an open software system, and immediately thought of the Python language. As a resu</summary>
      
    
    
    
    <category term="System Architecture" scheme="http://example.com/categories/System-Architecture/"/>
    
    <category term="Plugin Pattern" scheme="http://example.com/categories/System-Architecture/Plugin-Pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>Shellcode Written in Linux</title>
    <link href="http://example.com/2011/10/16/shellcodewrite/"/>
    <id>http://example.com/2011/10/16/shellcodewrite/</id>
    <published>2011-10-16T15:54:47.000Z</published>
    <updated>2023-10-16T23:03:18.081Z</updated>
    
    <content type="html"><![CDATA[<p>Before you start learning shellcode development, please install NASM on your Linux system. Here’s the shellcode code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line"></span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">jmp short callShellcode</span><br><span class="line"></span><br><span class="line">shellcode:</span><br><span class="line"></span><br><span class="line">pop esi                     ; Pop &#x27;/bin/sh&#x27; from the stack into esi</span><br><span class="line">xor eax, eax                ; Set eax to NULL</span><br><span class="line">mov byte [esi + 7], al      ; Null-terminate &#x27;/bin/sh&#x27; using the low byte of eax</span><br><span class="line">lea ebx, [esi]              ; Load the address of &#x27;/bin/sh&#x27; into ebx</span><br><span class="line">mov dword [esi + 8], ebx</span><br><span class="line">lea ecx, [esi + 8]          ; Load the address of the argv array into ecx</span><br><span class="line">mov dword [esi + 12], eax</span><br><span class="line">lea edx, [esi + 12]         ; Load the address of the NULL terminator into edx</span><br><span class="line">mov al, 0x0b               ; Set al to 0x0b, the system call number for execve</span><br><span class="line">int 0x80                   ; Trigger the syscall</span><br><span class="line"></span><br><span class="line">callShellcode:</span><br><span class="line"></span><br><span class="line">call shellcode</span><br><span class="line">db &#x27;/bin/sh&#x27;</span><br></pre></td></tr></table></figure><p>After saving this code to a file named “shellx.asm,” you need to compile it using NASM to obtain the hexadecimal representation of the code. Use the following commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf shellx.asm</span><br><span class="line">ld -o shellx shellx.o -m elf_i386</span><br></pre></td></tr></table></figure><p>This will generate a “shellx” file. However, it’s not executable yet. You’ll need to use the “objdump” command to extract the hexadecimal code. You can use a Bash script like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(objdump -d <span class="string">&quot;<span class="variable">$1</span>&quot;</span> | <span class="built_in">tr</span> <span class="string">&#x27;\t&#x27;</span> <span class="string">&#x27; &#x27;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | egrep <span class="string">&#x27;^[0-9a-f]&#123;2&#125;$&#x27;</span>); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;\x<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><p>To validate your assembly code, you’ll need a C program as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char code[] = &quot;\xeb\x18\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x8d\x4e\x08\x89\x46\x0c\x8d\x56\x0c\xb0\x0b\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68&quot;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">    int (*func)();</span><br><span class="line">    func = (int (*)()) code;</span><br><span class="line">    (int)(*func)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile this code with the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -o shellcodetest shellcodetest.c -m32 -z execstack</span><br></pre></td></tr></table></figure><p>This will produce an executable, “shellcodetest.” When you run it, you’ll get a shell with root privileges:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/home/kali/shellCode_train# ./shellcodetest</span><br><span class="line"># ls</span><br><span class="line">    exit.asm     hello     shellcodetest    shellx.asm</span><br><span class="line">    exit.o       hello.asm  shellcodetest.c  shellx.o</span><br><span class="line">    getshellcode.sh  hello.o    shellx</span><br><span class="line"># whoami</span><br><span class="line">    root</span><br><span class="line">#</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Before you start learning shellcode development, please install NASM on your Linux system. Here’s the shellcode code:&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    
    <category term="shellcode" scheme="http://example.com/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>How to compile asm to execute under Linux</title>
    <link href="http://example.com/2011/03/02/nasmCompile/"/>
    <id>http://example.com/2011/03/02/nasmCompile/</id>
    <published>2011-03-02T16:31:25.000Z</published>
    <updated>2023-10-16T15:42:40.515Z</updated>
    
    <content type="html"><![CDATA[<p>Here is code snippet to show how to compile asm to execute under Linux:</p><p>shellx.asm:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">section     .text</span><br><span class="line">global      _start </span><br><span class="line">_start: </span><br><span class="line">    mov     edx,len   </span><br><span class="line">    mov     ecx,msg   </span><br><span class="line">    mov     ebx,1   </span><br><span class="line">    mov     eax,4   </span><br><span class="line">    int     0x80   </span><br><span class="line">    mov     eax,1  </span><br><span class="line">    int     0x80   </span><br><span class="line">section     .data</span><br><span class="line">msg     db  &#x27;Hello world&#x27;,0xa  </span><br><span class="line">len     equ $ - msg</span><br></pre></td></tr></table></figure><p>let’s start</p><ol><li>First step:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@kali:~/Desktop/cdasm$ nasm -f elf64 shellx.asm</span><br></pre></td></tr></table></figure><ol start="2"><li>Next step:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@kali:~/Desktop/cdasm$ ld -s -o shellx shellx.o</span><br></pre></td></tr></table></figure><ol start="3"><li>Execute :</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@kali:~/Desktop/cdasm$ ./shellx </span><br></pre></td></tr></table></figure><p>then output :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Here is code snippet to show how to compile asm to execute under Linux:&lt;/p&gt;
&lt;p&gt;shellx.asm:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="Asm" scheme="http://example.com/categories/Asm/"/>
    
    
    <category term="nasm" scheme="http://example.com/tags/nasm/"/>
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Compilation of Python Code Snippets for Hashing</title>
    <link href="http://example.com/2011/01/16/pythonHash/"/>
    <id>http://example.com/2011/01/16/pythonHash/</id>
    <published>2011-01-16T15:47:24.000Z</published>
    <updated>2023-10-17T03:10:58.965Z</updated>
    
    <content type="html"><![CDATA[<p>Performing relevant hashing operations is an essential skill in penetration testing. Here is a compilation of code snippets for common hash implementations in Python.</p><p><strong><em>md5</em></strong> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">mystring = input(&#x27;Enter String to hash: &#x27;)</span><br><span class="line"># Assumes the default UTF-8</span><br><span class="line">hash_object = hashlib.md5(mystring.encode())</span><br><span class="line">print(hash_object.hexdigest())</span><br></pre></td></tr></table></figure><p><strong><em>sha1</em></strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">hash_object = hashlib.sha1(b&#x27;Hello World&#x27;)</span><br><span class="line">hex_dig = hash_object.hexdigest()</span><br><span class="line">print(hex_dig)</span><br></pre></td></tr></table></figure><p><strong><em>SHA256</em></strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line">hash_object = hashlib.sha256(b&#x27;Hello World&#x27;)</span><br><span class="line">hex_dig = hash_object.hexdigest()</span><br><span class="line">print(hex_dig)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><em>sha512</em></strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">input = &#x27;test&#x27;</span><br><span class="line">hash = hashlib.sha512( str( input ).encode(&quot;utf-8&quot;) ).hexdigest()</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure><p><strong><em>DSA</em></strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">hash_object = hashlib.new(&#x27;DSA&#x27;)</span><br><span class="line">hash_object.update(b&#x27;Hello World&#x27;)</span><br><span class="line">print(hash_object.hexdigest())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Performing relevant hashing operations is an essential skill in penetration testing. Here is a compilation of code snippets for common ha</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>About information_schema in MySQL</title>
    <link href="http://example.com/2010/10/15/information-schema/"/>
    <id>http://example.com/2010/10/15/information-schema/</id>
    <published>2010-10-15T16:47:16.000Z</published>
    <updated>2023-10-16T22:48:41.383Z</updated>
    
    <content type="html"><![CDATA[<p>The “<strong><em>information_schema</em></strong>“ is a system database in MySQL that contains metadata information about <strong><em>databases, tables, columns, indexes, users, permissions,</em></strong> and more within the MySQL server. It serves as an interface for querying metadata information in MySQL. This information is stored in tabular form within tables in the “information_schema” database, and users can retrieve metadata information by using SQL statements to query these tables.</p><p>Here are some common tables in the ‘information_schema’ database:</p><ol><li><strong><em>SCHEMATA</em></strong>: Stores information about all databases, including database names, character sets, etc.</li><li><strong><em>TABLES</em></strong>: Stores information about all tables, including table names, table types, engines, etc.</li><li><strong><em>COLUMNS</em></strong>: Stores information about all columns, including column names, column data types, column constraints, etc.</li><li><strong><em>STATISTICS</em></strong>: Stores information about all indexes, including index names, index types, the table where the index is located, index columns, etc.</li><li><strong><em>USER_PRIVILEGES</em></strong>: Stores information about user privileges, including user accounts, permissions, etc.</li></ol><p>By querying the tables in the <strong><em>information_schema</em></strong> database, you can obtain information about various aspects of <strong><em>databases, tables, columns, indexes, users, and permissions</em></strong>. This is very helpful for database management and maintenance.</p><p>Next, let’s take a look at an example of finding key information through the information_schema database:</p><ol><li>Query information about the current user:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT current_user();</span><br></pre></td></tr></table></figure></li><li>Query information about the user for the current session:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT session_user();</span><br></pre></td></tr></table></figure></li><li>Get the path of the database:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@datadir;</span><br></pre></td></tr></table></figure></li><li>Get the installation path of MySQL:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir;</span><br></pre></td></tr></table></figure></li><li>Retrieve information about the operating system version:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@version_compile_os;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The “&lt;strong&gt;&lt;em&gt;information_schema&lt;/em&gt;&lt;/strong&gt;“ is a system database in MySQL that contains metadata information about &lt;strong&gt;&lt;em&gt;dat</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    <category term="mysql" scheme="http://example.com/categories/Penetration-Test/mysql/"/>
    
    <category term="sql inject" scheme="http://example.com/categories/Penetration-Test/mysql/sql-inject/"/>
    
    
  </entry>
  
  <entry>
    <title>In Qt, how to transmit custom data using QAction::setData</title>
    <link href="http://example.com/2010/05/01/QtSetData/"/>
    <id>http://example.com/2010/05/01/QtSetData/</id>
    <published>2010-05-02T03:16:09.000Z</published>
    <updated>2023-10-16T22:49:14.418Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, in a project, there was a need to transmit custom data using QAction::setData. I’ve searched online for a lot of information, but it’s all a bit vague, and none of them hit the mark. Some even provide solutions that completely contradict Qt’s principles. Below is an example code I wrote:</p><ol><li>Custom data:<br>Here, taking a custom class as an example, the code is as follows:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//.h</span><br><span class="line"></span><br><span class="line">#ifndef QNEWITEM_H</span><br><span class="line">#define QNEWITEM_H</span><br><span class="line"></span><br><span class="line">#include &lt;QObject&gt;</span><br><span class="line"></span><br><span class="line">class QNewItem : public QObject</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    QNewItem(QObject *parent = 0);</span><br><span class="line">    ~QNewItem();</span><br><span class="line"></span><br><span class="line">    bool setUserInfo(QString&amp; strName,qint16&amp; nAge);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    QString m_strName;</span><br><span class="line">    qint16 m_nAge;</span><br><span class="line">&#125;;</span><br><span class="line">#endif // QNEWITEM_H</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//.cpp</span><br><span class="line"></span><br><span class="line">#include &quot;qnewitem.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QNewItem::QNewItem(QObject *parent)</span><br><span class="line">: QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QNewItem::~QNewItem()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool QNewItem::setUserInfo( QString&amp; strName,qint16&amp; nAge )</span><br><span class="line">&#123;</span><br><span class="line">    bool bRet = false;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        if( strName.isEmpty() || nAge &gt;200 &amp;&amp; nAge&lt;0 ) break;</span><br><span class="line"></span><br><span class="line">        m_strName = strName;</span><br><span class="line">        m_nAge = nAge;</span><br><span class="line">        bRet = true;</span><br><span class="line">    &#125; while (false);</span><br><span class="line">    return bRet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>At the beginning of the calling CPP file, you must declare it like this:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;qnewitem.h&quot;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE(QNewItem*)</span><br></pre></td></tr></table></figure><p>There’s not much else to say; when you look at the code, you’ll understand everything.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;qnewitem.h&quot;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE(QNewItem*)</span><br><span class="line"></span><br><span class="line">customDefineDemo::customDefineDemo(QWidget *parent, Qt::WFlags flags)</span><br><span class="line">: QMainWindow(parent, flags)</span><br><span class="line">&#123;</span><br><span class="line">    ui.setupUi(this);</span><br><span class="line">    connect(ui.pushButton , SIGNAL(clicked()),this,SLOT(onBtnClick()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customDefineDemo::~customDefineDemo()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void customDefineDemo::onBtnClick()</span><br><span class="line">&#123;</span><br><span class="line">    QMenu* pMenu = new QMenu();</span><br><span class="line">    QNewItem* pNewItem = new QNewItem();</span><br><span class="line">    qint16 nAge = 34;</span><br><span class="line">    QVariant qv;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        QAction* pPortraitView = new QAction(tr(&quot;New&quot;), this);</span><br><span class="line">        QAction* pAddGroup = new QAction(tr(&quot;Open&quot;), this);</span><br><span class="line">        QAction* pDeleteGroup = new QAction(tr(&quot;Save&quot;), this);</span><br><span class="line"></span><br><span class="line">        pNewItem-&gt;setUserInfo(tr(&quot;Eric&quot;),nAge);</span><br><span class="line"></span><br><span class="line">        pPortraitView-&gt;setData( QVariant::fromValue(pNewItem) ) ;</span><br><span class="line"></span><br><span class="line">        connect(pPortraitView,SIGNAL(triggered()),this,SLOT(triggeredMenuSendMsgContact()));</span><br><span class="line"></span><br><span class="line">        pMenu-&gt;addAction(pPortraitView);</span><br><span class="line">        pMenu-&gt;addAction(pAddGroup);</span><br><span class="line">        pMenu-&gt;addAction(pDeleteGroup);</span><br><span class="line">        pMenu-&gt;exec(QCursor::pos());</span><br><span class="line">    &#125; while (false);</span><br><span class="line"></span><br><span class="line">    if( pMenu != nullptr )</span><br><span class="line">    &#123;</span><br><span class="line">        delete pMenu;</span><br><span class="line">        pMenu = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void customDefineDemo::triggeredMenuSendMsgContact()</span><br><span class="line">&#123;</span><br><span class="line">    QAction* pSendMsg= NULL;</span><br><span class="line">    QNewItem* pObj = NULL;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        pSendMsg=qobject_cast&lt;QAction*&gt;(sender());</span><br><span class="line"></span><br><span class="line">        pObj = pSendMsg-&gt;data().value&lt;QNewItem*&gt;();</span><br><span class="line">    &#125; while (false);</span><br><span class="line"></span><br><span class="line">    if( pObj != nullptr )</span><br><span class="line">    &#123;</span><br><span class="line">        delete pObj;</span><br><span class="line">        pObj = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently, in a project, there was a need to transmit custom data using QAction::setData. I’ve searched online for a lot of information, b</summary>
      
    
    
    
    <category term="C/C++" scheme="http://example.com/categories/C-C/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>The confusing floating point problem</title>
    <link href="http://example.com/2010/03/14/floatData/"/>
    <id>http://example.com/2010/03/14/floatData/</id>
    <published>2010-03-15T02:44:22.000Z</published>
    <updated>2023-10-16T22:48:28.930Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I encountered an issue with floating-point numbers. </p><p>code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fld dword ptr ds:[esi+1E4]</span><br></pre></td></tr></table></figure><p>and </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esi+1E4 = 02FCE9D4</span><br></pre></td></tr></table></figure><p>The following is its memory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">02FCE9D4  00 C0 2B 45 00 C0 2B 45 00 00 00 00 00 00 00 00  .?E.?E........</span><br></pre></td></tr></table></figure><p>After execution this code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fld dword ptr ds:[esi+1E4]</span><br></pre></td></tr></table></figure><p>watches:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ST0 = 2748.00000000000.</span><br></pre></td></tr></table></figure><p>I would like to know how ST0 equals 2748?</p><p>In the end, it’s all about the representation of floating-point numbers. According to the IEEE standard, the first bit is the sign bit, the next 8 bits represent the exponent, and the remaining 23 bits are the mantissa. Considering that it’s <strong><em>little-endian storage</em></strong>, the value of the number <strong><em>00 C0 2B 45</em></strong> is <strong><em>452BC000</em></strong>, which is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0100 0101 0010 1011 1100 0000 0000 0000</span><br></pre></td></tr></table></figure><p>The first bit is 0, indicating it’s a positive number.<br>The next 8 bits, which is <strong><em>10001010</em></strong>, 8A, in decimal, is 138. 138 - 127 &#x3D; 11, indicating the exponent is <strong><em>11</em></strong> bits.<br>And the remaining 23 bits have the value:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">010 1011 1100 0000 0000 0000</span><br></pre></td></tr></table></figure><p>The leading bit, with the omitted <strong><em>1</em></strong>, has a value of:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1010 1011 1100 0000 0000 0000</span><br></pre></td></tr></table></figure><p>Above 11 bits for the exponent indicate that the position of the decimal point is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1010 1011 1100 .  0000 0000 0000</span><br></pre></td></tr></table></figure><p>Converting to hexadecimal, it’s <strong><em>ABC</em></strong>.000. Converting to decimal, it’s <strong><em>2748</em></strong>.00000000.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently, I encountered an issue with floating-point numbers. &lt;/p&gt;
&lt;p&gt;code:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Others" scheme="http://example.com/categories/Others/"/>
    
    
    <category term="asm" scheme="http://example.com/tags/asm/"/>
    
    <category term="float" scheme="http://example.com/tags/float/"/>
    
    <category term="binary" scheme="http://example.com/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>Example program for code decompilation</title>
    <link href="http://example.com/2009/11/04/codedecompilation/"/>
    <id>http://example.com/2009/11/04/codedecompilation/</id>
    <published>2009-11-05T03:36:35.000Z</published>
    <updated>2023-10-17T03:12:23.039Z</updated>
    
    <content type="html"><![CDATA[<p>  Some time ago, a friend asked me to help reverse engineer something, extract its code, save it as an assembly file, and compile and run it in VC (Visual C++).</p><p>  asm file :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">                .686p</span><br><span class="line">                .model flat,c</span><br><span class="line">        option casemap : none</span><br><span class="line">        </span><br><span class="line">        extern sprintf:proc</span><br><span class="line">        extern strcat:proc</span><br><span class="line">                </span><br><span class="line">.data</span><br><span class="line">               ___security_cookie dd 0BB40E64Eh</span><br><span class="line">               a02x_0 db &quot;%02X&quot;</span><br><span class="line">   </span><br><span class="line">.code  </span><br><span class="line">         public      sub_40B444    </span><br><span class="line">         </span><br><span class="line">sub_40B444        proc near                ; CODE XREF: sub_40CCEA+A4p</span><br><span class="line"></span><br><span class="line">;Source                = byte ptr -14h</span><br><span class="line">;var_4                = dword        ptr -4</span><br><span class="line">;arg_0                = dword        ptr  8</span><br><span class="line">;arg_4                = dword        ptr  0Ch</span><br><span class="line">;arg_8                = dword        ptr  10h</span><br><span class="line"></span><br><span class="line">                push        ebp</span><br><span class="line">                mov        ebp, esp</span><br><span class="line">                sub        esp, 14h</span><br><span class="line">                mov        eax, dword ptr ___security_cookie ; &quot;N鍬?</span><br><span class="line">                xor        eax, ebp</span><br><span class="line">                mov        [ebp-4], eax</span><br><span class="line">                push        ebx</span><br><span class="line">                mov        ebx, [ebp+8]</span><br><span class="line">                push        esi</span><br><span class="line">                mov        esi, [ebp+10h]</span><br><span class="line">                push        edi</span><br><span class="line">                xor        edi, edi</span><br><span class="line">                cmp        [ebp+0Ch], edi</span><br><span class="line">                mov        byte ptr [esi],        0</span><br><span class="line">                jbe        short loc_40B48E</span><br><span class="line"></span><br><span class="line">loc_40B467:                                ; CODE XREF: sub_40B444+48j</span><br><span class="line">                movzx        eax, byte ptr [ebx+edi]</span><br><span class="line">                push        eax</span><br><span class="line">                lea        eax, [ebp-14h]</span><br><span class="line">                push        offset a02x_0        ; &quot;%02X&quot;</span><br><span class="line">                push        eax                ; Dest</span><br><span class="line">                call        sprintf</span><br><span class="line">                lea        eax, [ebp-14h]</span><br><span class="line">                push        eax                ; Source</span><br><span class="line">                push        esi                ; Dest</span><br><span class="line">                call        strcat</span><br><span class="line">                add        esp, 14h</span><br><span class="line">                inc        edi</span><br><span class="line">                cmp        edi, [ebp+0Ch]</span><br><span class="line">                jb        short loc_40B467</span><br><span class="line"></span><br><span class="line">loc_40B48E:                                ; CODE XREF: sub_40B444+21j</span><br><span class="line">                mov        ecx, [ebp-4]</span><br><span class="line">                pop        edi</span><br><span class="line">                pop        esi</span><br><span class="line">                xor        ecx, ebp</span><br><span class="line">                leave</span><br><span class="line">                retn</span><br><span class="line">sub_40B444        endp</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>The sample code is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">        char* sub_40B444(char*,int,char*);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">        char* pszBuf = new char[1024];</span><br><span class="line">        memset( pszBuf , 0 , 1024 );</span><br><span class="line">        strcpy_s( pszBuf , 1024 , &quot;des:&quot; );</span><br><span class="line">        sub_40B444( &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; , strlen(&quot;你总是说我在，这样孤单时候，才能想起与你联络&quot;) , pszBuf );</span><br><span class="line">        printf_s( &quot;format string : %s\n&quot; , &quot;你总是说我在，这样孤单时候，才能想起与你联络&quot; );</span><br><span class="line">        printf_s( &quot;format string : %s\n&quot; , pszBuf );</span><br><span class="line"></span><br><span class="line">       if( pszBuf != NULL )</span><br><span class="line">        &#123;</span><br><span class="line">           delete[]pszBuf;</span><br><span class="line">           pszBuf = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  Some time ago, a friend asked me to help reverse engineer something, extract its code, save it as an assembly file, and compile and run</summary>
      
    
    
    
    <category term="Asm" scheme="http://example.com/categories/Asm/"/>
    
    
    <category term="inline" scheme="http://example.com/tags/inline/"/>
    
    <category term="asm" scheme="http://example.com/tags/asm/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>NDIS6 how to drop packets</title>
    <link href="http://example.com/2009/07/14/ndis6DropPackage/"/>
    <id>http://example.com/2009/07/14/ndis6DropPackage/</id>
    <published>2009-07-15T02:29:18.000Z</published>
    <updated>2023-10-16T22:48:53.634Z</updated>
    
    <content type="html"><![CDATA[<p>In ndis6 how to drop packets?</p><p>in FilterSendNetBufferLists:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);</span><br><span class="line">//DEBUGP(DL_TRACE, (&quot;&lt;===SendNetBufferList [CheckPacket] drop this packet. \n&quot;));</span><br><span class="line"> </span><br><span class="line">CurrNbl = NetBufferLists;</span><br><span class="line">while (CurrNbl)</span><br><span class="line">&#123;</span><br><span class="line">    NET_BUFFER_LIST_STATUS(CurrNbl) = NDIS_STATUS_MEDIA_DISCONNECTED ;</span><br><span class="line">    CurrNbl = NET_BUFFER_LIST_NEXT_NBL(CurrNbl);</span><br><span class="line">&#125;</span><br><span class="line">NdisFSendNetBufferListsComplete(pFilter-&gt;FilterHandle,</span><br><span class="line">NetBufferLists,</span><br><span class="line">DispatchLevel ? NDIS_SEND_COMPLETE_FLAGS_DISPATCH_LEVEL : 0);</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><p>in FilterReceiveNetBufferLists:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FILTER_RELEASE_LOCK(&amp;pFilter-&gt;Lock, DispatchLevel);</span><br><span class="line"></span><br><span class="line">if (NDIS_TEST_RECEIVE_CAN_PEND(ReceiveFlags))</span><br><span class="line">&#123;</span><br><span class="line">    ReturnFlags = 0;</span><br><span class="line">    if (NDIS_TEST_RECEIVE_AT_DISPATCH_LEVEL(ReceiveFlags))</span><br><span class="line">    &#123;</span><br><span class="line">        NDIS_SET_RETURN_FLAG(ReturnFlags, NDIS_RETURN_FLAGS_DISPATCH_LEVEL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NdisFReturnNetBufferLists(pFilter-&gt;FilterHandle, NetBufferLists, ReturnFlags);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In ndis6 how to drop packets?&lt;/p&gt;
&lt;p&gt;in FilterSendNetBufferLists:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Kernel" scheme="http://example.com/categories/Kernel/"/>
    
    
    <category term="ndis6" scheme="http://example.com/tags/ndis6/"/>
    
    <category term="kernel" scheme="http://example.com/tags/kernel/"/>
    
    <category term="firewall" scheme="http://example.com/tags/firewall/"/>
    
  </entry>
  
  <entry>
    <title>In a VC (Visual C++) project, how to compile with an assembly language file</title>
    <link href="http://example.com/2009/01/03/compileAssemblyFile/"/>
    <id>http://example.com/2009/01/03/compileAssemblyFile/</id>
    <published>2009-01-04T04:29:12.000Z</published>
    <updated>2023-10-17T03:11:54.934Z</updated>
    
    <content type="html"><![CDATA[<p>It include <strong><em>four steps</em></strong>:</p><ol><li><p>Add the assembly language file to the project.</p></li><li><p>In the Solution Explorer window, right-click the Visual C++ project, choose <strong><em>“Build Customizations…”</em></strong>, and a dialog box labeled <strong><em>“Visual C++ Build Customization Files”</em></strong> will pop up. Check the <strong><em>“masm”</em></strong> option and click <strong><em>OK</em></strong>.</p><p>At this point, in the <strong><em>Configuration Property</em></strong>, you can see “<strong><em>Microsoft Macro Assembler.</em></strong>“</p></li><li><p>Right-click the assembly language file, select “<strong><em>Properties</em></strong>,” go to “<strong><em>Custom Build    Step</em></strong>,” and then “<strong><em>General</em></strong>.” </p><p>In the “<strong><em>Command Line</em></strong>“ field on the right, input:</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ml.exe /c /D<span class="string">&quot;X86&quot;</span> /D<span class="string">&quot;DEBUG&quot;</span> /Fo<span class="string">&quot;<span class="subst">$(IntDir)</span>/<span class="subst">$(InputName)</span>.obj&quot;</span> $(InputFileName)</span><br></pre></td></tr></table></figure><p>   In the “<strong><em>Outputs</em></strong>“ field, input:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(IntDir)/$(InputName).obj</span><br></pre></td></tr></table></figure><ol start="4"><li>Don’t forget to add the path to ml.exe to the environment variable “<strong><em>PATH</em></strong>.”</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It include &lt;strong&gt;&lt;em&gt;four steps&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add the assembly language file to the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the S</summary>
      
    
    
    
    <category term="Asm" scheme="http://example.com/categories/Asm/"/>
    
    
    <category term="inline" scheme="http://example.com/tags/inline/"/>
    
    <category term="asm" scheme="http://example.com/tags/asm/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
</feed>
